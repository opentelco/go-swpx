/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/resource";
import "networkelement/element.proto";
import "provider/provider.proto";


package resource;

message Empty {}


message VersionResponse {
  string version = 1;
}

message TechnicalInformationResponse {
  networkelement.Element network_element = 1;
  string physical_port = 2;
  Error error = 3;
  string RequestObjectID = 4;
}

message Status {
  bool error = 1;
  int32 code = 2;
  string type = 3;
  string message = 4;
}

message Error {
  string message = 1;
  int32 code = 2;
}

// used in request
message NetworkElement {
  string hostname = 1;
  string ip = 2;
  string interface = 3;
  int64 interface_index = 4;
  int64 physical_index = 5;
  provider.Configuration conf = 6;
}


message TechnicalInformationRequest {
  string hostname = 1;
  string port = 2;
  string provider = 3;
  string driver = 4;
  string region = 5;
  int32 timeout = 6;
  bool recreate_index = 7;
  int32 cache_ttl = 8;
}

message NetworkElementInterface {
  int64 index = 1;
  string description = 2;
  string alias = 3;
}
// map port to entire interface for faster retrieval
message NetworkElementInterfaces {
  map<string, NetworkElementInterface> interfaces = 1;
}
message Transceivers {
  map<int32, networkelement.Transceiver> transceivers = 1;
}

message NetworkElementWrapper {
  NetworkElement element = 1;
  int32 numInterfaces = 2;
  networkelement.Element fullElement = 3;
  NetworkElementInterfaces physInterfaces = 4;
}

service TechnicalInformation {
  rpc TechnicalPortInformation(TechnicalInformationRequest) returns (TechnicalInformationResponse);
}

service Resource {
  rpc Version(Empty) returns (VersionResponse);
  rpc TechnicalPortInformation(NetworkElement) returns (networkelement.Element);
  rpc AllPortInformation(NetworkElement) returns (networkelement.Element);
  rpc MapInterface(NetworkElement) returns (NetworkElementInterfaces);
  rpc MapEntityPhysical(NetworkElement) returns (NetworkElementInterfaces);
  rpc GetTransceiverInformation(NetworkElement) returns (networkelement.Transceiver);
  rpc GetAllTransceiverInformation(NetworkElementWrapper) returns (networkelement.Element);
}

