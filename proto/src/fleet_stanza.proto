/*
 * Copyright (c) 2023. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/fleet/stanzapb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package fleet.stanza;

// Stanza is a configuration snippet that can be applied to a device.
message Stanza {
    // the id of the stanza
    string id = 1;

    // name of the configuration snippet e.g "enable-ssh"
    string name = 2;

    // description of the configuration snippet e.g "Enable SSH on the device"
    string description = 3;

    // the content of the configuration snippet the actual configuration that will be applied to the device
    string content = 4;

    // if the configuration content cannot be applied, what should be run to revert the configuration
    string revert_content = 5;

    // the type of device this stanza is applicable to
    string device_type = 6;

    google.protobuf.Timestamp created_at = 7;
    google.protobuf.Timestamp updated_at = 8;

    // applied_at is the time when the stanza was applied to a device (if it has been applied)
    optional google.protobuf.Timestamp applied_at = 9;

    // the id of the device this stanza is applied to (if it has been applied)
    optional string device_id = 10;
}

service StanzaService {
    // Create a new stanza and return it
    rpc Create(CreateRequest) returns (Stanza);

    // Get a stanza by id and return it
    rpc GetByID(GetByIDRequest) returns (Stanza);

    // List stanzas, if no filters are used the list will return all stanzas not applied to a device
    // basically returning the library of stanzas that can be applied to a device.
    rpc List(ListRequest) returns (ListResponse);

    // Update a stanza that is not applied to a device yet. If the stanza is applied to a device, it cannot be updated.
    rpc Update(UpdateRequest) returns (Stanza);

    // Delete a stanza that is not yet applied, Delete from the stanza library
    rpc Delete(DeleteRequest) returns (google.protobuf.Empty);

    // Apply a stanza to a device, this will duplicate the stanza and apply it to the device and return the applied stanza
    // if the Apply fails the stanza will be reverted by using the revert_content in the stanza. If no revert_content is set
    // the stanza will not be reverted and apply will return an error.
    rpc Apply(ApplyRequest) returns (ApplyResponse);

     // Revert a stanza that has been applied to a device, this will use the revert_content in the stanza to revert the configuration
     // written to the device. If no revert_content is set the stanza will not be reverted and revert will return an error and the stanza
    rpc Revert(RevertRequest) returns (RevertResponse);
}

message CreateRequest {
    // name of the configuration snippet e.g "enable-ssh"
    string name = 2;

    // description of the configuration snippet e.g "Enable SSH on the device"
    optional string description = 3;

    // the content of the configuration snippet the actual configuration that will be applied to the device
    string content = 4;

    // if the configuration content cannot be applied, what should be run to revert the configuration
    optional string revert_content = 5;

    // the type of device this stanza is applicable to
    string device_type = 6;
}

message GetByIDRequest {
    // the id of the stanza
    string id = 1;
}


message ListRequest {
    // the type of device this stanza is applicable to
    optional string device_type = 1;

    optional  string device_id = 2;

    repeated Filter filters  = 3;
    enum Filter {
        FILTER_UNSPECIFIED = 0;
        FILTER_APPLIED = 1;
        FILTER_NOT_APPLIED = 2;
    }

    // the maximum number of stanzas to return
    optional int64 limit = 4;

    // the offset to start from when returning stanzas
    optional int64 offset = 5;
}

message ListResponse {
    repeated Stanza stanzas = 1;
    int64 total = 2;
}

message UpdateRequest {
    // the id of the stanza to be updated
    string id = 1;

    // name of the configuration snippet e.g "enable-ssh"
    optional string name = 2;

    // description of the configuration snippet e.g "Enable SSH on the device"
    optional string description = 3;

    // the content of the configuration snippet the actual configuration that will be applied to the device
    optional string content = 4;

    // if the configuration content cannot be applied, what should be run to revert the configuration
    optional string revert_content = 5;

    // the type of device this stanza is applicable to
    optional string device_type = 6;
}


// DeleteRequest
message DeleteRequest {
    // the id of the stanza to be deleted
    string id = 1;
}

message ApplyRequest {
    // the id of the stanza to be applied
    string id = 1;

    // the id of the device to apply the stanza to
    string device_id = 2;

    // should the apply block until the apply is done
    bool blocking = 3;
}

message ApplyResponse {
    // the applied stanza
    Stanza stanza = 1;
}

message RevertResponse {
    // the reverted stanza
    Stanza stanza = 1;
}

message RevertRequest {
    // the id of the stanza to be reverted
    string id = 1;
}


enum TaskQueue {
    TASK_QUEUE_FLEET_STANZA = 0;
}