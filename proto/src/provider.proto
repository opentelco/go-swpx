/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/providerpb";

package provider;
import "core.proto";
import "google/protobuf/empty.proto";


message NameResponse {
  string name = 1;
}

message VersionResponse {
  string version = 1;
}


service Provider {
  rpc Name(google.protobuf.Empty) returns (NameResponse);
  rpc Version(google.protobuf.Empty) returns (VersionResponse);

  // PRE.1 Always called first in the chain of Provider RPCs
  // Resolve any hostname and or port in the session request
  rpc ResolveSessionRequest(core.SessionRequest) returns (core.SessionRequest);

  // PRE.2 Called second in the chain of Provider RPCs
  // From the resolved session request, resolve the resource plugin to be used
  // This is only called if the settings.resource_plugin is empty
  rpc ResolveResourcePlugin(core.SessionRequest) returns (ResolveResourcePluginResponse);

  // POST.1 Called in the end after returning any response to the client
  // Process the Poll response with the provider's own logic
  rpc ProcessPollResponse(core.PollResponse) returns (core.PollResponse);
}


message ResolveResourcePluginResponse {
  string resource_plugin = 1;
}
