/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";
package core;
option go_package = "git.liero.se/opentelco/go-swpx/proto/go/core";

import "network_element.proto";
import "google/protobuf/empty.proto";

message Error {
    string message = 1;
    int32 code = 2;
}


message Request {
    // settings for the request
    string provider_plugin = 1;
    string resource_plugin = 2;
    bool recreate_index = 3;
    bool disable_distributed_lock = 4;
    string timeout = 5;
    string cache_ttl = 6;

    enum Type {
        NOT_SET = 0;
        GET_TECHNICAL_INFO = 1;
        GET_TECHNICAL_INFO_PORT = 2;
    }

    Type type = 7;

    // used to locate the resource
    string access_id = 8;
    string hostname = 9;
    string port = 10;
}

message Response{
    Request request = 1;
    networkelement.Element network_element = 2;

    string physical_port = 3;
    Error error = 4;
    string request_access_id = 5;
    string execution_time = 6;
}


message CommandRequest {}
message CommandResponse {}
message InformationResponse {}

service Core {
    // SWP Polling call to get technical Information
    rpc Poll(Request) returns (Response);

    // Send a command to a network device through the Poller
    rpc Command(CommandRequest) returns (CommandResponse);
    
    // Information returns infomration about the switch poller. loaded resources plugins and provider plugins
    rpc Information(google.protobuf.Empty) returns (InformationResponse);
}



message ProvideCPERequest {}
message ProvideCPEResponse {}
message ProvideAccessRequest {}
message ProvideAccessResponse {}

// Provide 
service Provide {
    // Ask provider to return a valid CPE for a access
    rpc CPE(ProvideCPERequest) returns (ProvideCPEResponse);
    
    // Ask a provider to return information about a selected access
    rpc Access(ProvideAccessRequest) returns (ProvideAccessResponse);

}



// gRPC.Provide.CPE()
// gRPC.Provide.Access()
// gRPC.Core.Poll()
