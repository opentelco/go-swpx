/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";
package core;
option go_package = "git.liero.se/opentelco/go-swpx/proto/go/corepb";

import "network_element.proto";
import "google/protobuf/empty.proto";

message Error {
    string message = 1;
    int32 code     = 2;
}

// Settings for the request
message Settings {
    repeated string provider_plugin = 1;

    string resource_plugin = 2;

    // recreate_index will recreate the index for the resource through snmp
    // this is useful if the index is not correct or if the resource is not
    // parsed correctly, changes of virtual interfaces could cause a change of index
    bool recreate_index = 3;

    // timout for the request, after the timeout the request will be aborted server side
    // any request sent down to the network will be skipped as the ttl is set as Deadline on
    // the request
    string timeout = 5;

    // how long should the cache be valid
    string cache_ttl = 6;

    enum Channel {
        CHANNEL_PRIMARY = 0;
        SECONDARY       = 1;
    }

    // tq_channel can be used to spread traffic load on different channels
    Channel tq_channel = 7;

    enum Priority {
        DEFAULT = 0;
        LOW     = 1;
        MEDIUM  = 2;
        HIGH    = 3;
        URGENT  = 4;
    }

    // priority of the request, the DNC will try to prioritize the requests based on this
    // if it has several requests to process in the queue
    Priority priority = 9;
}

// SessionRequest is passed through the plugin system to resolve the hostname and port etc
message SessionRequest {
    // used to locate the resource by a provider plugin
    // the provider plugin should look up the access_id in the database and populate the hostname and port fields
    // if the access_id is not found the provider plugin should return an error with code 404
    string access_id = 1;

    // hostname and port are used to locate the resource by a resource plugin
    string hostname = 2;
    string port     = 3;

    // network_region is used to send the request to the right pollers
    // each poller group is separted by network_regions and contacts the network
    // elements in that region.
    string network_region = 4;
}

// Request is the Package that travels through the SwitchPoller and its Plugins.
// The idea is that a Request enters the Core and is then, if a Provider Plugin is
// selected, it will process the Request with provider.PreHandler(Request) this
// process might alter the Request depending on the plugin. At the end of the call
// a provider.PostHandler(Response) is executed to alter the output of the Request.
//
// This means that the Request needs to be a generic one and the
message PollRequest {
    SessionRequest session = 1;

    Settings settings      = 2;

    enum Type {
        NOT_SET = 0;

        // GET_TECHNICAL_INFO returns a full picture of the network element or
        // on a specific port
        GET_TECHNICAL_INFO = 1;

        // GET_BASIC_INFO fetches the basic information on a network element
        // or a specific port.
        GET_BASIC_INFO = 2;

        // GET_MAC_TABLE fetches the mac table on the network element or the
        // specified port
        // note: if MAC learning is disabled this will be the same as the GET_IP_TABLE
        GET_MAC_TABLE = 3;

        // GET_IP_TABLE fetches the dhcp snooping table on the network element
        GET_IP_TABLE = 4;

        // GET_CONFIG on the whole network element or on a specific port
        GET_CONFIG = 5;

        // GET_TRANSCEIVER on all ports on a device or on a specific port
        GET_TRANSCEIVER = 6;

    }
    Type type = 3;
}

message PollResponse {
    networkelement.Element network_element = 2;
    string physical_port                   = 3;
    Error error                            = 4;
    string request_access_id               = 5;
    string execution_time                  = 6;
}

// DiscoverRequest is used to discover a network element
message DiscoverRequest {
    // session is used to locate the network element
    SessionRequest session = 1;
    // settings is used to configure the request
    Settings settings      = 2;
}

message DiscoverResponse {
    networkelement.Element network_element = 2;
}

message CommandRequest {}
message CommandResponse {}
message InformationResponse {}

service CoreService {
    // Discover is used to get basic information about an network element
    rpc Discover(DiscoverRequest) returns (DiscoverResponse);

    // SWP Polling call to get technical Information and other information about a network element
    // the request is sent to the correct poller based on the network_region of the request
    // the type of the request is used to determine what information to collect from the network element
    rpc Poll(PollRequest) returns (PollResponse);

    // Send a command to a network device through the Poller
    rpc Command(CommandRequest) returns (CommandResponse);

    // Information returns infomration about the switch poller. loaded resources plugins and provider plugins
    rpc Information(google.protobuf.Empty) returns (InformationResponse);

    // CollectConfig collects the configuration of a network element check for any changes between the stored config and the
    // collected one. Returs a list of changes and the config collected from the network element
    rpc CollectConfig(CollectConfigRequest) returns (CollectConfigResponse);
}

service CommanderService {
    rpc TogglePort(CommandRequest) returns (CommandResponse);
    rpc EnablePortFlapDetection(CommandRequest) returns (CommandResponse);
}

message ProvideCPERequest {}
message ProvideCPEResponse {}
message ProvideAccessRequest {}
message ProvideAccessResponse {}

// Provider
service ProviderService {
    // Ask provider to return a valid CPE for a access
    rpc CPE(ProvideCPERequest) returns (ProvideCPEResponse);

    // Ask a provider to return information about a selected access
    rpc Access(ProvideAccessRequest) returns (ProvideAccessResponse);
}


message CollectConfigRequest {
    Settings settings = 1;
    SessionRequest session = 2;
}

message ConfigChange  {
    string path = 1;
    string old_value = 2;
    string new_value = 3;
}

message CollectConfigResponse {
    string config = 1;
    repeated ConfigChange changes = 2;
    Error error   = 3;
}