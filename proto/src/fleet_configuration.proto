/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/fleet/configurationpb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package fleet.configuration;

service ConfigurationService {
    // Get a device configuration by its ID, this is used to get a specific device configuration
    rpc GetByID(GetByIDParameters) returns (Configuration) {}

    // Compare compares the configuration of a device with the configuration in the database and returns the changes
    // if no specific configuration is specified the latest configuration is used to compare with
    rpc Compare(CompareParameters) returns (CompareResponse) {}

    // List lists all configurations for a device
    rpc List(ListParameters) returns (ListResponse) {}

    // Create a device configuration in the fleet (this is used to store the configuration of a device)
    rpc Create(CreateParameters) returns (Configuration) {}

    // Delete a device configuration from the fleet (removes the configuration from the database)
    rpc Delete(DeleteParameters) returns (google.protobuf.Empty) {}
}

// Configuration is a configuration for a device in the fleet.
// it is fetched from the device and stored in the database
message Configuration {
    // the id for the specific created config
    string id = 1;

    // the id of the device this configuration is for
    string device_id = 2;

    // the configuration as a string
    string configuration = 3;

    // the timestamp when the configuration was created (fetched from the device)
    google.protobuf.Timestamp created = 4;
}

message GetByIDParameters {
    // the id of the device configuration to get
    string id = 1;
}
message CompareParameters {
    // the id of the device to compare the configuration for
    string device_id = 1;

    // the id of the configuration to compare to
    string configuration_id_a = 2;

    // the id of the configuration to compare with
    // if this is not specified the latest configuration before the specified configuration is used
    string configuration_id_b = 3;
}

message ListParameters {
    // the id of the device to list the configurations for
    string device_id = 1;
}

message CreateParameters {
    // the id of the device to create the configuration for
    string device_id = 1;

    // the configuration as a string
    string configuration = 2;
}

message DeleteParameters {
    // the id of the device configuration to delete
    string id = 1;

    // device_id is the id of the device to delete the configuration for
    string devce_id = 2;
}

message CompareResponse {
    // the id of the device to compare the configuration for
    string device_id = 1;

    // the id of the configuration to compare to
    string configuration_id_a = 2;

    // the id of the configuration to compare with
    string configuration_id_b = 3;

    // the diff between the configurations
    repeated string diffs = 4;
}

message ListResponse {
    // the id of the device to list the configurations for
    string device_id = 1;

    // the configurations for the device
    repeated Configuration configurations = 2;
}
