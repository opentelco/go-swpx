/*
 * Copyright (c) 2023. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/fleet/devicepb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package fleet.device;

message Device {
    // id of the device
    string id = 1;

    // the hostname of the device
    string hostname = 2;

    // the domain of the device
    string domain = 3;

    // the primary management ip of the device
    string management_ip = 4;

    // the serial number of the device
    string serial_number = 5;

    // the model of the device, e.g Huawei S6720-54C-EI-48S-AC
    string model = 6;

    // the version of the device, e.g V200R019C10SPC500
    string version = 7;

    // the network region of the device, this is used to match segmentation of the network
    // and tell the Distributed Network Client (go-dnc) which worker to use for polling the device
    // must match the configuration of the go-dnc
    string network_region = 8;

    // switch poller resource plugin to use for this device
    string poller_resource_plugin = 9;

    // switch poller provider to use for this device
    string poller_provider_plugin = 10;

    // the state of the device, the current condition of the device
    // used to determine if the device should be polled or not
    enum State {
        DEVICE_STATE_NEW = 0;
        // the device is active and collection should be done
        DEVICE_STATE_ACTIVE = 1;

        // the device is inactive and collection should not be done
        DEVICE_STATE_INACTIVE = 2;
    }
    // the state of the device
    State state = 11;

    // the status of the device, the current reachability of the device
    // basically the status of the last action done on the device
    enum Status {
        DEVICE_STATUS_NEW = 0;
        // the device could not be reached when polled, discovered or collected
        DEVICE_STATUS_UNREACHABLE = 1;
        // the device could be reached when polled, discovered or collected
        DEVICE_STATUS_REACHABLE = 2;
    }

    // the status of the device
    Status status = 12;

    message Schedule {
        // duration between each poll
        // minimum of 120 seconds (2 minutes)
        google.protobuf.Duration interval = 1;

        enum Type {
            SCHEDULE_TYPE_NOT_SET = 0;
            COLLECT_DEVICE        = 1;
            COLLECT_CONFIG        = 2;
        }

        // the type of schedule
        Type type = 2;

        // the last time the schedule was run (if it has been run)
        google.protobuf.Timestamp last_run = 3;

        // if the schedule is active or not (if it should be run)
        bool active = 4;

        // the number of times the schedule has failed to run
        // if the schedule has failed more than 3 times it will be disabled. To unlock
        // the schedule it needs to be manually enabled again and setting failed count to 0
        int64 failed_count = 5;
    }

    // the schedules for the device (polling, collection etc)
    repeated Schedule schedules = 13;

    // the last time the device was seen by the fleet
    google.protobuf.Timestamp last_seen = 14;

    // the time the device was created in the fleet database
    google.protobuf.Timestamp created = 15;

    // the time the device was updated in the database
    google.protobuf.Timestamp updated = 16;

    // last known time when the device was rebooted (uptime from snmp)
    google.protobuf.Timestamp last_reboot = 17;
}

message Change {
    // the id of the change
    string id = 1;

    // the id of the device
    string device_id = 2;

    // the field that was changed
    string field = 3;

    // the old value of the field
    string old_value = 4;

    // the new value of the field
    string new_value = 5;

    // the timestamp when the changes was created
    google.protobuf.Timestamp created = 6;
}

service DeviceService {
    // *** Device ***
    // Get a device by its ID, this is used to get a specific device
    rpc GetByID(GetByIDParameters) returns (Device) {}

    // Get a device by its hostname, managment ip or serial number etc (used to search for a device)
    rpc List(ListParameters) returns (ListResponse) {}

    // Create a device in the fleet
    // note: if device needs to be discovered use the FleetService instead
    // Creating a device will append the default schedles to the device.
    // - CollectDevice every hour
    // - CollectConfig every 24 hours
    rpc Create(CreateParameters) returns (Device) {}

    // Update a device in the fleet (this is used to update the device with new information)
    rpc Update(UpdateParameters) returns (Device) {}

    // Delete a device from the fleet and all changes for the device
    // To purge a device use the Delete in the FleetService instead (as it also also deletes the configuration)
    rpc Delete(DeleteParameters) returns (google.protobuf.Empty) {}

    // Get changes for a device, changes are created when a device is updated
    rpc GetChangeByID(GetChangeByIDParameters) returns (Change) {}

    // returns a list of changes (default 100)
    rpc ListChanges(ListChangesParameters) returns (ListChangesResponse) {}

    // add an event
    rpc AddEvent(Event) returns (Event) {}

    // Get changes for a device, changes are created when a device is updated
    rpc GetEventByID(GetEventByIDParameters) returns (Event) {}

    // returns a list of events (default 100)
    rpc ListEvents(ListEventsParameters) returns (ListEventsResponse) {}

    // uspert a schedule for a device, the schedule is unuqie by type
    rpc SetSchedule(SetScheduleParameters) returns (Device) {}
}

message GetByIDParameters {
    // the id of the device to get
    string id = 1;
}

message ListParameters {
    // hostname of the device (exact match)
    optional string hostname = 1;
    // management ip of the device (exact match)
    optional string management_ip = 2;

    // free text search for hostname and management_ip
    optional string search = 3;

    // has schedule to be run in the next 10 secs, the device also needs to be in the active state
    // or it will not be returned (default false)
    optional bool has_firing_schedule = 4;

    // one of the schedule types to filter on (default all)
    optional Device.Schedule.Type schedule_type = 5;

    // defaults to 50 devices if not set
    optional int64 limit = 6;

    // offset to start from (default 0)
    optional int64 offset = 7;
}

message CreateParameters {
    // the hostname of the device (switch-a1) this is the DNS name of the device
    // and could differ from the system name of the device
    // NOTE: hostname OR management_ip must be set
    optional string hostname = 1;

    // sysname of the device (switch-a1)
    // the name set in the configuration of the device and will be set on discovery
    optional string sysname = 2;

    // the domain of the device (net.liero.se)
    optional string domain = 3;

    // the primary management ip of the device (172.22.13.3)
    // NOTE: hostname OR management_ip must be set
    optional string management_ip = 4;

    // the serial number of the device (210235T0A2000001)
    optional string serial_number = 5;

    // model of the device (Huawei S6720-54C-EI-48S-AC)
    optional string model = 6;

    // version of the device (V200R019C10SPC500)
    optional string version = 7;

    // the network region of the device, this is used to match segmentation of the network
    // must match the configuration of the Distributed Network Client (go-dnc)
    optional string network_region = 8;

    // provider plugin to use for this device, e.g. default_provider, vx etc
    optional string poller_provider_plugin = 9;

    // switch poller resource plugin to use for this device, vrp, ios, junos etc
    optional string poller_resource_plugin = 10;

    // the last time the device was seen by collect or discovery
    optional google.protobuf.Timestamp last_seen = 11;

    // the last time the device was rebooted (known by the poller)
    optional google.protobuf.Timestamp last_reboot = 12;

    // the state of the device
    optional Device.State state = 13;

    // the status of the device, the current reachability of the device
    // basically the status of the last action done on the device
    optional Device.Status status = 14;
}

message UpdateParameters {
    // the id of the device to update
    string id = 1;

    // the hostname of the device (switch-a1)
    optional string hostname = 2;

    // the domain of the device (net.liero.se)
    optional string domain = 3;

    // the primary management ip of the device (
    optional string management_ip = 4;

    // the serial number of the device (210235T0A2000001)
    optional string serial_number = 5;

    // model of the device (Huawei S6720-54C-EI-48S-AC)
    optional string model = 6;

    // version of the device (V200R019C10SPC500)
    optional string version = 7;

    // the network region of the device, this is used to match segmentation of the network
    // must match the configuration of the Distributed Network Client (go-dnc)
    optional string network_region = 8;

    // provider plugin to use for this device, e.g. default_provider, vx etc
    optional string poller_provider_plugin = 9;

    // switch poller resource plugin to use for this device, vrp, ios, junos etc
    optional string poller_resource_plugin = 10;

    // sysname of the device (switch-a1)
    // the name set in the configuration of the device and will be set on discovery
    optional string sysname = 11;

    // the last time the device was seen by collect or discovery
    optional google.protobuf.Timestamp last_seen = 12;

    // the last time the device was rebooted (known by the poller)
    optional google.protobuf.Timestamp last_reboot = 13;

    // the state of the device
    optional Device.State state = 14;

    // the status of the device, the current reachability of the device
    // basically the status of the last action done on the device
    optional Device.Status status = 15;
}
message DeleteParameters {
    // the id of the device to delete
    string id = 1;
}

message ListResponse {
    // the devices that matched the search
    repeated Device devices = 1;
}

message ListChangesParameters {
    // the id of the device to get changes for
    string device_id = 1;
}
message ListChangesResponse {
    // the changes that matched the search
    repeated Change changes = 1;
}

message GetChangeByIDParameters {
    // the id of the change to get
    string id = 1;
}

message ListEventsParameters {
    // the id of the device to get Events for
    string device_id = 1;
}
message ListEventsResponse {
    // the Events that matched the search
    repeated Event events = 1;
}

message GetEventByIDParameters {
    // the id of the change to get
    string id = 1;
}

message Event {
    string id = 1;
    // the device related to the event
    string device_id = 2;

    // type of event
    enum Type {
        TYPE_NOT_SET  = 0;
        DEVICE        = 1;
        CONFIGURATION = 2;
    }
    Type type = 3;

    string message = 4;

    // Action taken on the device
    enum Action {
        ACTION_NOT_SET = 0;
        CREATE         = 1;
        UPDATE         = 2;
        COLLECT_CONFIG = 3;
        COLLECT_DEVICE = 4;
    }
    Action action = 5;

    // the outcome of the event
    enum Outcome {
        OUTCOME_NOT_SET = 0;
        SUCCESS         = 1;
        FAILURE         = 2;
    }
    Outcome outcome = 6;

    // the timestamp when the event was created
    google.protobuf.Timestamp created = 7;
}

message SetScheduleParameters {
    // the id of the device to upsert the schedule for
    string device_id = 1;
    // the schedule to upsert
    Device.Schedule schedule = 2;
}



enum TaskQueue {
    TASK_QUEUE_FLEET_DEVICE = 0;
}