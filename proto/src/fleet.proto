/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/fleet/fleetpb";

import "fleet_device.proto";
import "fleet_configuration.proto";
import "google/protobuf/empty.proto";

package fleet;

service FleetService {
    // DiscoverDevice discovers a device in the network, creates the device with the information provided
    // by the poller in the discovery. (e.g. sysname, ip address, mac address, etc)
    // NOTE: hostname OR management_ip must be set
    rpc DiscoverDevice(fleet.device.CreateParameters) returns (fleet.device.Device) {}

    // CollectDevice collects information about the device from the network (with the help of the poller)
    // and returns the device with the updated information
    rpc CollectDevice(CollectDeviceParameters) returns (fleet.device.Device) {}

    // CollectConfig collects the running configuration from the device in the network (with the help of the poller) and
    // returns the config as a string
    rpc CollectConfig(CollectConfigParameters) returns (fleet.configuration.Configuration) {}

    // Delete a device, chagnes and all stored configuration
    rpc DeleteDevice(fleet.device.DeleteParameters) returns (google.protobuf.Empty) {}
}

message CollectDeviceParameters {
    // the id of the device to collect information for
    string device_id = 1;
}

message CollectConfigParameters {
    // the id of the device to collect the configuration for
    string device_id = 1;
}
