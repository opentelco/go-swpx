/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/fleetpb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package fleet;

message Device {
    // id of the device
    string id = 1;

    // the hostname of the device
    string hostname = 2;

    // the domain of the device
    string domain = 3;

    // the primary management ip of the device
    string management_ip = 4;

    // the serial number of the device
    string serial_number = 5;

    // the model of the device, e.g Huawei S6720-54C-EI-48S-AC
    string model = 6;

    // the version of the device, e.g V200R019C10SPC500
    string version = 7;

    // switch poller resource plugin to use for this device
    string poller_resource_plugin = 8;

    // switch poller provider to use for this device
    string poller_provider = 9;

    // the last time the device was seen
    google.protobuf.Timestamp last_seen = 10;

    // the time the device was created
    google.protobuf.Timestamp created = 11;

    // the time the device was updated
    google.protobuf.Timestamp updated = 12;

    // the time the device was updated
    google.protobuf.Timestamp deleted = 13;

    // the changes that has been made to the device
    repeated Changes changes = 14;
}

message Changes {
    // the id of the device
    string device_id = 1;

    // the field that was changed
    string field = 2;

    // the old value of the field
    string old_value = 3;

    // the new value of the field
    string new_value = 4;

    // the timestamp when the changes was created
    google.protobuf.Timestamp created = 5;
}

// DeviceConfiguration is a configuration for a device in the fleet.
// it is fetched from the device and stored in the database
message DeviceConfiguration {
    // the id for the specific created config
    string id = 1;

    // the id of the device this configuration is for
    string device_id = 2;

    // the configuration as a string
    string configuration = 3;

    // the timestamp when the configuration was created (fetched from the device)
    google.protobuf.Timestamp created = 4;
}

service Fleet {
    // *** Device ***
    // Get a device by its ID, this is used to get a specific device
    rpc GetDeviceByID(GetDeviceByIDParameters) returns (Device) {}

    // CollectDevice collects information about the device from the network (with the help of the poller)
    // and returns the device with the updated information
    rpc CollectDevice(CollectDeviceParameters) returns (Device) {}

    // Get a device by its hostname, managment ip or serial number etc (used to search for a device)
    rpc ListDevices(ListDevicesParameters) returns (ListDevicesResponse) {}

    // Create a device in the fleet
    rpc CreateDevice(CreateDeviceParameters) returns (Device) {}

    // Update a device in the fleet (this is used to update the device with new information)
    rpc UpdateDevice(UpdateDeviceParameters) returns (Device) {}

    // Delete a device from the fleet (mark the device as deleted)
    rpc DeleteDevice(DeleteDeviceParameters) returns (google.protobuf.Empty) {}

    // *** Configuration ***
    // CollectConfig collects the running configuration from the device in the network (with the help of the poller) and
    // returns the config as a string
    rpc CollectConfig(CollectConfigParameters) returns (DeviceConfiguration) {}

    // Get a device configuration by its ID, this is used to get a specific device configuration
    rpc GetDeviceConfigurationByID(GetDeviceConfigurationByIDParameters) returns (DeviceConfiguration) {}

    // CompareDeviceConfiguration compares the configuration of a device with the configuration in the database and returns the changes
    // if no specific configuration is specified the latest configuration is used to compare with
    rpc CompareDeviceConfiguration(CompareDeviceConfigurationParameters) returns (CompareDeviceConfigurationResponse) {}

    // ListDeviceConfigurations lists all configurations for a device
    rpc ListDeviceConfigurations(ListDeviceConfigurationsParameters) returns (ListDeviceConfigurationsResponse) {}

    // Create a device configuration in the fleet (this is used to store the configuration of a device)
    rpc CreateDeviceConfiguration(CreateDeviceConfigurationParameters) returns (DeviceConfiguration) {}

    // Delete a device configuration from the fleet (removes the configuration from the database)
    rpc DeleteDeviceConfiguration(DeleteDeviceConfigurationParameters) returns (google.protobuf.Empty) {}
}

message GetDeviceByIDParameters {
    // the id of the device to get
    string id = 1;
}

message ListDevicesParameters {
    // hostname of the device (exact match)
    string hostname = 1;
    // management ip of the device (exact match)
    string management_ip = 2;

    // free text search for hostname and management_ip
    string search = 3;
}

message CreateDeviceParameters {
    // the hostname of the device (switch-a1)
    string hostname = 1;

    // the domain of the device (net.liero.se)
    string domain = 2;

    // the primary management ip of the device (172.22.13.3)
    string management_ip = 3;

    // the serial number of the device (210235T0A2000001)
    string serial_number = 4;

    // model of the device (Huawei S6720-54C-EI-48S-AC)
    string model = 5;

    // version of the device (V200R019C10SPC500)
    string version = 6;

    // provider plugin to use for this device, e.g. default_provider, vx etc
    string poller_provider = 7;

    // switch poller resource plugin to use for this device, vrp, ios, junos etc
    string poller_resource_plugin = 8;
}

message UpdateDeviceParameters {
    // the id of the device to update
    string id = 1;

    // the hostname of the device (switch-a1)
    string hostname = 2;

    // the domain of the device (net.liero.se)
    string domain = 3;

    // the primary management ip of the device (
    string management_ip = 4;

    // the serial number of the device (210235T0A2000001)
    string serial_number = 5;

    // model of the device (Huawei S6720-54C-EI-48S-AC)
    string model = 6;

    // version of the device (V200R019C10SPC500)
    string version = 7;

    // provider plugin to use for this device, e.g. default_provider, vx etc
    string poller_provider = 8;

    // switch poller resource plugin to use for this device, vrp, ios, junos etc
    string poller_resource_plugin = 9;
}
message DeleteDeviceParameters {
    // the id of the device to delete
    string id = 1;
}
message GetDeviceConfigurationByIDParameters {
    // the id of the device configuration to get
    string id = 1;
}
message CompareDeviceConfigurationParameters {
    // the id of the device to compare the configuration for
    string device_id = 1;

    // the id of the configuration to compare to
    string configuration_id_a = 2;

    // the id of the configuration to compare with
    // if this is not specified the latest configuration before the specified configuration is used
    string configuration_id_b = 3;
}

message ListDeviceConfigurationsParameters {
    // the id of the device to list the configurations for
    string device_id = 1;
}

message CreateDeviceConfigurationParameters {
    // the id of the device to create the configuration for
    string device_id = 1;

    // the configuration as a string
    string configuration = 2;
}

message DeleteDeviceConfigurationParameters {
    // the id of the device configuration to delete
    string id = 1;
}

message CollectDeviceParameters {
    // the id of the device to collect information for
    string device_id = 1;
}

message CollectConfigParameters {
    // the id of the device to collect the configuration for
    string device_id = 1;
}

// *** Returns ***

message ListDevicesResponse {
    // the devices that matched the search
    repeated Device devices = 1;
}

message CompareDeviceConfigurationResponse {
    // the id of the device to compare the configuration for
    string device_id = 1;

    // the id of the configuration to compare to
    string configuration_id_a = 2;

    // the id of the configuration to compare with
    string configuration_id_b = 3;

    // the diff between the configurations
    repeated string diffs = 4;
}

message ListDeviceConfigurationsResponse {
    // the id of the device to list the configurations for
    string device_id = 1;

    // the configurations for the device
    repeated DeviceConfiguration configurations = 2;
}
