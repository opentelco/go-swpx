// notifications

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/go/fleet/notificationpb";

package notificationpb;

import "google/protobuf/timestamp.proto";

// Notification is a notification triggered by a fleet event
// (e.g. a new device is added to the fleet or a device is removed from the fleet,
// a device is not reachable, or a configuration not being successfully fetched)
message Notification {
    // The ID of the notification
    string id = 1;

    // The title of the notification
    // (e.g. "Device 1234 is not reachable")
    string title = 2;

    // The ID of the device
    string resource_id = 3;

    // the resource type of the notification (e.g. device, config)
    // used to identify the resource_id (e.g. device_id, config_id)
    ResourceType resource_type = 4;
    enum ResourceType {
        RESOURCE_TYPE_UNSPECIFIED = 0;
        RESOURCE_TYPE_DEVICE      = 1;
        RESOURCE_TYPE_CONFIG      = 2;
    }

    // The timestamp of the notification
    google.protobuf.Timestamp timestamp = 5;

    // The message of the notification e.g "Device 1234 is not reachable since 2020-01-01 12:00:00 UTC,
    // last seen 2020-01-01 11:00:00 UTC, last config update 2020-01-01 10:00:00 UTC"
    string message = 6;

    // used to mark the notification as read
    bool read = 7;
}

service NotificationService {
    rpc GetByID(GetByIDRequest) returns (Notification) {}
    // list unread notifications by  default, use filter to show all notifications
    rpc List(ListRequest) returns (ListResponse) {}
    rpc Create(CreateRequest) returns (Notification) {}
    rpc Delete(DeleteRequest) returns (DeleteResponse) {}
    rpc MarkAsRead(MarkAsReadRequest) returns (MarkAsReadResponse) {}
}

message GetByIDRequest {
    string id = 1;
}

message ListRequest {
    repeated string resource_ids = 1;

    repeated string ids = 2;

    repeated Filter filter = 3;
    enum Filter {
        NO_LIST_REQUEST_FILTER = 0;
        RESOURCE_TYPE_DEVICE   = 1;
        RESOURCE_TYPE_CONFIG   = 2;
        // include read notifications and unread notifications
        INCLUDE_READ           = 3;
    }

    // how many notifications to return (default 10)
    optional int64 limit = 4;

    // offset to start from (default 0)
    optional int64 offset = 5;
}

message ListResponse {
    repeated Notification notifications = 1;
}

message CreateRequest {
    // The title of the notification
    // (e.g. "Device 1234 is not reachable")
    string title = 2;

    // The ID of the device
    string resource_id = 3;

    // the resource type of the notification (e.g. device, config)
    // used to identify the resource_id (e.g. device_id, config_id)
    Notification.ResourceType resource_type = 4;

    // The message of the notification e.g "Device 1234 is not reachable since 2020-01-01 12:00:00 UTC,
    // last seen 2020-01-01 11:00:00 UTC, last config update 2020-01-01 10:00:00 UTC"
    optional string message = 6;
}

message DeleteRequest {
    string id = 1;
}

message DeleteResponse {
    string id = 1;
}

message MarkAsReadRequest {
    repeated string ids = 1;
}

message MarkAsReadResponse {
    repeated Notification notifications = 1;
}

enum TaskQueue {
    TASK_QUEUE_FLEET_NOTIFICATIONS = 0;
}