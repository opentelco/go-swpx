//
// Copyright (c) 2023. Liero AB
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: plugin_resource.proto

package resourcepb

import (
	context "context"
	devicepb "go.opentelco.io/go-swpx/proto/go/devicepb"
	stanzapb "go.opentelco.io/go-swpx/proto/go/stanzapb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Resource_Version_FullMethodName                      = "/resource.Resource/Version"
	Resource_Discover_FullMethodName                     = "/resource.Resource/Discover"
	Resource_MapInterface_FullMethodName                 = "/resource.Resource/MapInterface"
	Resource_MapEntityPhysical_FullMethodName            = "/resource.Resource/MapEntityPhysical"
	Resource_BasicPortInformation_FullMethodName         = "/resource.Resource/BasicPortInformation"
	Resource_TechnicalPortInformation_FullMethodName     = "/resource.Resource/TechnicalPortInformation"
	Resource_AllPortInformation_FullMethodName           = "/resource.Resource/AllPortInformation"
	Resource_GetDeviceInformation_FullMethodName         = "/resource.Resource/GetDeviceInformation"
	Resource_GetTransceiverInformation_FullMethodName    = "/resource.Resource/GetTransceiverInformation"
	Resource_GetAllTransceiverInformation_FullMethodName = "/resource.Resource/GetAllTransceiverInformation"
	Resource_GetRunningConfig_FullMethodName             = "/resource.Resource/GetRunningConfig"
	Resource_ConfigureStanza_FullMethodName              = "/resource.Resource/ConfigureStanza"
)

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceClient interface {
	// Get the version of the network element
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// discover the device, type version and other basic information about the device
	Discover(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error)
	// Map the interfaces with ifIndex and description
	MapInterface(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PortIndex, error)
	// Map the interace description and the environemnt index
	MapEntityPhysical(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PortIndex, error)
	BasicPortInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error)
	// Get technical information about a port
	TechnicalPortInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error)
	// Get technical information about all ports TODO: rename
	AllPortInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error)
	GetDeviceInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error)
	// Get transceiver information about a interface
	GetTransceiverInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Transceiver, error)
	// Get transceiver information about all interfaces
	GetAllTransceiverInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Transceivers, error)
	// Get the running config and return it
	GetRunningConfig(ctx context.Context, in *GetRunningConfigParameters, opts ...grpc.CallOption) (*GetRunningConfigResponse, error)
	// ConfigureStanza the devcice by trying to set the lines in the config array
	// the resource plugin is repsonsible for preparing the device for the configuration
	// and to commit the configuration if it is successful for example,
	//
	//	if the device is a Cisco device, the plugin should send the "configure terminal" command
	//	and then send the lines in the stanza, and then send the "end" command
	//	and then send copy run start to commit the configuration on a Huaawei device,
	//	the plugin should send the "system-view" command and then send the lines in the stanza,
	//
	// and then send the "quit" command and then send save to commit the configuration.
	//
	// Locking is expected to be done by the one calling the ConfigureStanza method
	// the plugin should not do any locking. Use the DNC SDK to lock the device with
	// the "Mutex Locking API" together with Temporal
	ConfigureStanza(ctx context.Context, in *ConfigureStanzaRequest, opts ...grpc.CallOption) (*stanzapb.ConfigureResponse, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, Resource_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) Discover(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error) {
	out := new(devicepb.Device)
	err := c.cc.Invoke(ctx, Resource_Discover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MapInterface(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PortIndex, error) {
	out := new(PortIndex)
	err := c.cc.Invoke(ctx, Resource_MapInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MapEntityPhysical(ctx context.Context, in *Request, opts ...grpc.CallOption) (*PortIndex, error) {
	out := new(PortIndex)
	err := c.cc.Invoke(ctx, Resource_MapEntityPhysical_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) BasicPortInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error) {
	out := new(devicepb.Device)
	err := c.cc.Invoke(ctx, Resource_BasicPortInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) TechnicalPortInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error) {
	out := new(devicepb.Device)
	err := c.cc.Invoke(ctx, Resource_TechnicalPortInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AllPortInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error) {
	out := new(devicepb.Device)
	err := c.cc.Invoke(ctx, Resource_AllPortInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetDeviceInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Device, error) {
	out := new(devicepb.Device)
	err := c.cc.Invoke(ctx, Resource_GetDeviceInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetTransceiverInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Transceiver, error) {
	out := new(devicepb.Transceiver)
	err := c.cc.Invoke(ctx, Resource_GetTransceiverInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetAllTransceiverInformation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*devicepb.Transceivers, error) {
	out := new(devicepb.Transceivers)
	err := c.cc.Invoke(ctx, Resource_GetAllTransceiverInformation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetRunningConfig(ctx context.Context, in *GetRunningConfigParameters, opts ...grpc.CallOption) (*GetRunningConfigResponse, error) {
	out := new(GetRunningConfigResponse)
	err := c.cc.Invoke(ctx, Resource_GetRunningConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) ConfigureStanza(ctx context.Context, in *ConfigureStanzaRequest, opts ...grpc.CallOption) (*stanzapb.ConfigureResponse, error) {
	out := new(stanzapb.ConfigureResponse)
	err := c.cc.Invoke(ctx, Resource_ConfigureStanza_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
// All implementations must embed UnimplementedResourceServer
// for forward compatibility
type ResourceServer interface {
	// Get the version of the network element
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	// discover the device, type version and other basic information about the device
	Discover(context.Context, *Request) (*devicepb.Device, error)
	// Map the interfaces with ifIndex and description
	MapInterface(context.Context, *Request) (*PortIndex, error)
	// Map the interace description and the environemnt index
	MapEntityPhysical(context.Context, *Request) (*PortIndex, error)
	BasicPortInformation(context.Context, *Request) (*devicepb.Device, error)
	// Get technical information about a port
	TechnicalPortInformation(context.Context, *Request) (*devicepb.Device, error)
	// Get technical information about all ports TODO: rename
	AllPortInformation(context.Context, *Request) (*devicepb.Device, error)
	GetDeviceInformation(context.Context, *Request) (*devicepb.Device, error)
	// Get transceiver information about a interface
	GetTransceiverInformation(context.Context, *Request) (*devicepb.Transceiver, error)
	// Get transceiver information about all interfaces
	GetAllTransceiverInformation(context.Context, *Request) (*devicepb.Transceivers, error)
	// Get the running config and return it
	GetRunningConfig(context.Context, *GetRunningConfigParameters) (*GetRunningConfigResponse, error)
	// ConfigureStanza the devcice by trying to set the lines in the config array
	// the resource plugin is repsonsible for preparing the device for the configuration
	// and to commit the configuration if it is successful for example,
	//
	//	if the device is a Cisco device, the plugin should send the "configure terminal" command
	//	and then send the lines in the stanza, and then send the "end" command
	//	and then send copy run start to commit the configuration on a Huaawei device,
	//	the plugin should send the "system-view" command and then send the lines in the stanza,
	//
	// and then send the "quit" command and then send save to commit the configuration.
	//
	// Locking is expected to be done by the one calling the ConfigureStanza method
	// the plugin should not do any locking. Use the DNC SDK to lock the device with
	// the "Mutex Locking API" together with Temporal
	ConfigureStanza(context.Context, *ConfigureStanzaRequest) (*stanzapb.ConfigureResponse, error)
	mustEmbedUnimplementedResourceServer()
}

// UnimplementedResourceServer must be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (UnimplementedResourceServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedResourceServer) Discover(context.Context, *Request) (*devicepb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedResourceServer) MapInterface(context.Context, *Request) (*PortIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapInterface not implemented")
}
func (UnimplementedResourceServer) MapEntityPhysical(context.Context, *Request) (*PortIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapEntityPhysical not implemented")
}
func (UnimplementedResourceServer) BasicPortInformation(context.Context, *Request) (*devicepb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasicPortInformation not implemented")
}
func (UnimplementedResourceServer) TechnicalPortInformation(context.Context, *Request) (*devicepb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TechnicalPortInformation not implemented")
}
func (UnimplementedResourceServer) AllPortInformation(context.Context, *Request) (*devicepb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPortInformation not implemented")
}
func (UnimplementedResourceServer) GetDeviceInformation(context.Context, *Request) (*devicepb.Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInformation not implemented")
}
func (UnimplementedResourceServer) GetTransceiverInformation(context.Context, *Request) (*devicepb.Transceiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransceiverInformation not implemented")
}
func (UnimplementedResourceServer) GetAllTransceiverInformation(context.Context, *Request) (*devicepb.Transceivers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransceiverInformation not implemented")
}
func (UnimplementedResourceServer) GetRunningConfig(context.Context, *GetRunningConfigParameters) (*GetRunningConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunningConfig not implemented")
}
func (UnimplementedResourceServer) ConfigureStanza(context.Context, *ConfigureStanzaRequest) (*stanzapb.ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureStanza not implemented")
}
func (UnimplementedResourceServer) mustEmbedUnimplementedResourceServer() {}

// UnsafeResourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceServer will
// result in compilation errors.
type UnsafeResourceServer interface {
	mustEmbedUnimplementedResourceServer()
}

func RegisterResourceServer(s grpc.ServiceRegistrar, srv ResourceServer) {
	s.RegisterService(&Resource_ServiceDesc, srv)
}

func _Resource_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Discover(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MapInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MapInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_MapInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MapInterface(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MapEntityPhysical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MapEntityPhysical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_MapEntityPhysical_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MapEntityPhysical(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_BasicPortInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).BasicPortInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_BasicPortInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).BasicPortInformation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_TechnicalPortInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).TechnicalPortInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_TechnicalPortInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).TechnicalPortInformation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AllPortInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AllPortInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_AllPortInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AllPortInformation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetDeviceInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetDeviceInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_GetDeviceInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetDeviceInformation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetTransceiverInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetTransceiverInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_GetTransceiverInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetTransceiverInformation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetAllTransceiverInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetAllTransceiverInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_GetAllTransceiverInformation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetAllTransceiverInformation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetRunningConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunningConfigParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetRunningConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_GetRunningConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetRunningConfig(ctx, req.(*GetRunningConfigParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_ConfigureStanza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureStanzaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).ConfigureStanza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Resource_ConfigureStanza_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).ConfigureStanza(ctx, req.(*ConfigureStanzaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Resource_ServiceDesc is the grpc.ServiceDesc for Resource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Resource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resource.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Resource_Version_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _Resource_Discover_Handler,
		},
		{
			MethodName: "MapInterface",
			Handler:    _Resource_MapInterface_Handler,
		},
		{
			MethodName: "MapEntityPhysical",
			Handler:    _Resource_MapEntityPhysical_Handler,
		},
		{
			MethodName: "BasicPortInformation",
			Handler:    _Resource_BasicPortInformation_Handler,
		},
		{
			MethodName: "TechnicalPortInformation",
			Handler:    _Resource_TechnicalPortInformation_Handler,
		},
		{
			MethodName: "AllPortInformation",
			Handler:    _Resource_AllPortInformation_Handler,
		},
		{
			MethodName: "GetDeviceInformation",
			Handler:    _Resource_GetDeviceInformation_Handler,
		},
		{
			MethodName: "GetTransceiverInformation",
			Handler:    _Resource_GetTransceiverInformation_Handler,
		},
		{
			MethodName: "GetAllTransceiverInformation",
			Handler:    _Resource_GetAllTransceiverInformation_Handler,
		},
		{
			MethodName: "GetRunningConfig",
			Handler:    _Resource_GetRunningConfig_Handler,
		},
		{
			MethodName: "ConfigureStanza",
			Handler:    _Resource_ConfigureStanza_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin_resource.proto",
}
