// Code generated by protoc-gen-go. DO NOT EDIT.
// source: git.liero.se/opentelco/go-swpx/proto/src/network_element.proto

package networkelement

import (
	fmt "fmt"
	analysis "git.liero.se/opentelco/go-swpx/proto/go/analysis"
	traffic_policy "git.liero.se/opentelco/go-swpx/proto/go/traffic_policy"
	proto "github.com/golang/protobuf/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ModuleType int32

const (
	ModuleType_POWER     ModuleType = 0
	ModuleType_FAN       ModuleType = 1
	ModuleType_INTERFACE ModuleType = 2
)

var ModuleType_name = map[int32]string{
	0: "POWER",
	1: "FAN",
	2: "INTERFACE",
}

var ModuleType_value = map[string]int32{
	"POWER":     0,
	"FAN":       1,
	"INTERFACE": 2,
}

func (x ModuleType) String() string {
	return proto.EnumName(ModuleType_name, int32(x))
}

func (ModuleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{0}
}

type InterfaceStatus int32

const (
	InterfaceStatus_unset          InterfaceStatus = 0
	InterfaceStatus_up             InterfaceStatus = 1
	InterfaceStatus_down           InterfaceStatus = 2
	InterfaceStatus_testing        InterfaceStatus = 3
	InterfaceStatus_unknown        InterfaceStatus = 4
	InterfaceStatus_dorman         InterfaceStatus = 5
	InterfaceStatus_notPresent     InterfaceStatus = 6
	InterfaceStatus_lowerLayerDown InterfaceStatus = 7
)

var InterfaceStatus_name = map[int32]string{
	0: "unset",
	1: "up",
	2: "down",
	3: "testing",
	4: "unknown",
	5: "dorman",
	6: "notPresent",
	7: "lowerLayerDown",
}

var InterfaceStatus_value = map[string]int32{
	"unset":          0,
	"up":             1,
	"down":           2,
	"testing":        3,
	"unknown":        4,
	"dorman":         5,
	"notPresent":     6,
	"lowerLayerDown": 7,
}

func (x InterfaceStatus) String() string {
	return proto.EnumName(InterfaceStatus_name, int32(x))
}

func (InterfaceStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{1}
}

type InterfaceType int32

const (
	InterfaceType_unknown_interface_type        InterfaceType = 0
	InterfaceType_other                         InterfaceType = 1
	InterfaceType_regular1822                   InterfaceType = 2
	InterfaceType_hdh1822                       InterfaceType = 3
	InterfaceType_ddnX25                        InterfaceType = 4
	InterfaceType_rfc877x25                     InterfaceType = 5
	InterfaceType_ethernetCsmacd                InterfaceType = 6
	InterfaceType_iso88023Csmacd                InterfaceType = 7
	InterfaceType_iso88024TokenBus              InterfaceType = 8
	InterfaceType_iso88025TokenRing             InterfaceType = 9
	InterfaceType_iso88026Man                   InterfaceType = 10
	InterfaceType_starLan                       InterfaceType = 11
	InterfaceType_proteon10Mbit                 InterfaceType = 12
	InterfaceType_proteon80Mbit                 InterfaceType = 13
	InterfaceType_hyperchannel                  InterfaceType = 14
	InterfaceType_fddi                          InterfaceType = 15
	InterfaceType_lapb                          InterfaceType = 16
	InterfaceType_sdlc                          InterfaceType = 17
	InterfaceType_ds1                           InterfaceType = 18
	InterfaceType_e1                            InterfaceType = 19
	InterfaceType_basicISDN                     InterfaceType = 20
	InterfaceType_primaryISDN                   InterfaceType = 21
	InterfaceType_propPointToPointSerial        InterfaceType = 22
	InterfaceType_ppp                           InterfaceType = 23
	InterfaceType_softwareLoopback              InterfaceType = 24
	InterfaceType_eon                           InterfaceType = 25
	InterfaceType_ethernet3Mbit                 InterfaceType = 26
	InterfaceType_nsip                          InterfaceType = 27
	InterfaceType_slip                          InterfaceType = 28
	InterfaceType_ultra                         InterfaceType = 29
	InterfaceType_ds3                           InterfaceType = 30
	InterfaceType_sip                           InterfaceType = 31
	InterfaceType_frameRelay                    InterfaceType = 32
	InterfaceType_rs232                         InterfaceType = 33
	InterfaceType_para                          InterfaceType = 34
	InterfaceType_arcnet                        InterfaceType = 35
	InterfaceType_arcnetPlus                    InterfaceType = 36
	InterfaceType_atm                           InterfaceType = 37
	InterfaceType_miox25                        InterfaceType = 38
	InterfaceType_sonet                         InterfaceType = 39
	InterfaceType_x25ple                        InterfaceType = 40
	InterfaceType_iso88022llc                   InterfaceType = 41
	InterfaceType_localTalk                     InterfaceType = 42
	InterfaceType_smdsDxi                       InterfaceType = 43
	InterfaceType_frameRelayService             InterfaceType = 44
	InterfaceType_v35                           InterfaceType = 45
	InterfaceType_hssi                          InterfaceType = 46
	InterfaceType_hippi                         InterfaceType = 47
	InterfaceType_modem                         InterfaceType = 48
	InterfaceType_aal5                          InterfaceType = 49
	InterfaceType_sonetPath                     InterfaceType = 50
	InterfaceType_sonetVT                       InterfaceType = 51
	InterfaceType_smdsIcip                      InterfaceType = 52
	InterfaceType_propVirtual                   InterfaceType = 53
	InterfaceType_propMultiplexor               InterfaceType = 54
	InterfaceType_ieee80212                     InterfaceType = 55
	InterfaceType_fibreChannel                  InterfaceType = 56
	InterfaceType_hippiInterface                InterfaceType = 57
	InterfaceType_frameRelayInterconnect        InterfaceType = 58
	InterfaceType_aflane8023                    InterfaceType = 59
	InterfaceType_aflane8025                    InterfaceType = 60
	InterfaceType_cctEmul                       InterfaceType = 61
	InterfaceType_fastEther                     InterfaceType = 62
	InterfaceType_isdn                          InterfaceType = 63
	InterfaceType_v11                           InterfaceType = 64
	InterfaceType_v36                           InterfaceType = 65
	InterfaceType_g703at64k                     InterfaceType = 66
	InterfaceType_g703at2mb                     InterfaceType = 67
	InterfaceType_qllc                          InterfaceType = 68
	InterfaceType_fastEtherFX                   InterfaceType = 69
	InterfaceType_channel                       InterfaceType = 70
	InterfaceType_ieee80211                     InterfaceType = 71
	InterfaceType_ibm370parChan                 InterfaceType = 72
	InterfaceType_escon                         InterfaceType = 73
	InterfaceType_dlsw                          InterfaceType = 74
	InterfaceType_isdns                         InterfaceType = 75
	InterfaceType_isdnu                         InterfaceType = 76
	InterfaceType_lapd                          InterfaceType = 77
	InterfaceType_ipSwitch                      InterfaceType = 78
	InterfaceType_rsrb                          InterfaceType = 79
	InterfaceType_atmLogical                    InterfaceType = 80
	InterfaceType_ds0                           InterfaceType = 81
	InterfaceType_ds0Bundle                     InterfaceType = 82
	InterfaceType_bsc                           InterfaceType = 83
	InterfaceType_async                         InterfaceType = 84
	InterfaceType_cnr                           InterfaceType = 85
	InterfaceType_iso88025Dtr                   InterfaceType = 86
	InterfaceType_eplrs                         InterfaceType = 87
	InterfaceType_arap                          InterfaceType = 88
	InterfaceType_propCnls                      InterfaceType = 89
	InterfaceType_hostPad                       InterfaceType = 90
	InterfaceType_termPad                       InterfaceType = 91
	InterfaceType_frameRelayMPI                 InterfaceType = 92
	InterfaceType_x213                          InterfaceType = 93
	InterfaceType_adsl                          InterfaceType = 94
	InterfaceType_radsl                         InterfaceType = 95
	InterfaceType_sdsl                          InterfaceType = 96
	InterfaceType_vdsl                          InterfaceType = 97
	InterfaceType_iso88025CRFPInt               InterfaceType = 98
	InterfaceType_myrinet                       InterfaceType = 99
	InterfaceType_voiceEM                       InterfaceType = 100
	InterfaceType_voiceFXO                      InterfaceType = 101
	InterfaceType_voiceFXS                      InterfaceType = 102
	InterfaceType_voiceEncap                    InterfaceType = 103
	InterfaceType_voiceOverIp                   InterfaceType = 104
	InterfaceType_atmDxi                        InterfaceType = 105
	InterfaceType_atmFuni                       InterfaceType = 106
	InterfaceType_atmIma                        InterfaceType = 107
	InterfaceType_pppMultilinkBundle            InterfaceType = 108
	InterfaceType_ipOverCdlc                    InterfaceType = 109
	InterfaceType_ipOverClaw                    InterfaceType = 110
	InterfaceType_stackToStack                  InterfaceType = 111
	InterfaceType_virtualIpAddress              InterfaceType = 112
	InterfaceType_mpc                           InterfaceType = 113
	InterfaceType_ipOverAtm                     InterfaceType = 114
	InterfaceType_iso88025Fiber                 InterfaceType = 115
	InterfaceType_tdlc                          InterfaceType = 116
	InterfaceType_gigabitEthernet               InterfaceType = 117
	InterfaceType_hdlc                          InterfaceType = 118
	InterfaceType_lapf                          InterfaceType = 119
	InterfaceType_v37                           InterfaceType = 120
	InterfaceType_x25mlp                        InterfaceType = 121
	InterfaceType_x25huntGroup                  InterfaceType = 122
	InterfaceType_transpHdlc                    InterfaceType = 123
	InterfaceType_interleave                    InterfaceType = 124
	InterfaceType_fast                          InterfaceType = 125
	InterfaceType_ip                            InterfaceType = 126
	InterfaceType_docsCableMaclayer             InterfaceType = 127
	InterfaceType_docsCableDownstream           InterfaceType = 128
	InterfaceType_docsCableUpstream             InterfaceType = 129
	InterfaceType_a12MppSwitch                  InterfaceType = 130
	InterfaceType_tunnel                        InterfaceType = 131
	InterfaceType_coffee                        InterfaceType = 132
	InterfaceType_ces                           InterfaceType = 133
	InterfaceType_atmSubInterface               InterfaceType = 134
	InterfaceType_l2vlan                        InterfaceType = 135
	InterfaceType_l3ipvlan                      InterfaceType = 136
	InterfaceType_l3ipxvlan                     InterfaceType = 137
	InterfaceType_digitalPowerline              InterfaceType = 138
	InterfaceType_mediaMailOverIp               InterfaceType = 139
	InterfaceType_dtm                           InterfaceType = 140
	InterfaceType_dcn                           InterfaceType = 141
	InterfaceType_ipForward                     InterfaceType = 142
	InterfaceType_msdsl                         InterfaceType = 143
	InterfaceType_ieee1394                      InterfaceType = 144
	InterfaceType_if_gsn                        InterfaceType = 145
	InterfaceType_dvbRccMacLayer                InterfaceType = 146
	InterfaceType_dvbRccDownstream              InterfaceType = 147
	InterfaceType_dvbRccUpstream                InterfaceType = 148
	InterfaceType_atmVirtual                    InterfaceType = 149
	InterfaceType_mplsTunnel                    InterfaceType = 150
	InterfaceType_srp                           InterfaceType = 151
	InterfaceType_voiceOverAtm                  InterfaceType = 152
	InterfaceType_voiceOverFrameRelay           InterfaceType = 153
	InterfaceType_idsl                          InterfaceType = 154
	InterfaceType_compositeLink                 InterfaceType = 155
	InterfaceType_ss7SigLink                    InterfaceType = 156
	InterfaceType_propWirelessP2P               InterfaceType = 157
	InterfaceType_frForward                     InterfaceType = 158
	InterfaceType_rfc1483                       InterfaceType = 159
	InterfaceType_usb                           InterfaceType = 160
	InterfaceType_ieee8023adLag                 InterfaceType = 161
	InterfaceType_bgppolicyaccounting           InterfaceType = 162
	InterfaceType_frf16MfrBundle                InterfaceType = 163
	InterfaceType_h323Gatekeeper                InterfaceType = 164
	InterfaceType_h323Proxy                     InterfaceType = 165
	InterfaceType_mpls                          InterfaceType = 166
	InterfaceType_mfSigLink                     InterfaceType = 167
	InterfaceType_hdsl2                         InterfaceType = 168
	InterfaceType_shdsl                         InterfaceType = 169
	InterfaceType_ds1FDL                        InterfaceType = 170
	InterfaceType_pos                           InterfaceType = 171
	InterfaceType_dvbAsiIn                      InterfaceType = 172
	InterfaceType_dvbAsiOut                     InterfaceType = 173
	InterfaceType_plc                           InterfaceType = 174
	InterfaceType_nfas                          InterfaceType = 175
	InterfaceType_tr008                         InterfaceType = 176
	InterfaceType_gr303RDT                      InterfaceType = 177
	InterfaceType_gr303IDT                      InterfaceType = 178
	InterfaceType_isup                          InterfaceType = 179
	InterfaceType_propDocsWirelessMaclayer      InterfaceType = 180
	InterfaceType_propDocsWirelessDownstream    InterfaceType = 181
	InterfaceType_propDocsWirelessUpstream      InterfaceType = 182
	InterfaceType_hiperlan2                     InterfaceType = 183
	InterfaceType_propBWAp2Mp                   InterfaceType = 184
	InterfaceType_sonetOverheadChannel          InterfaceType = 185
	InterfaceType_digitalWrapperOverheadChannel InterfaceType = 186
	InterfaceType_aal2                          InterfaceType = 187
	InterfaceType_radioMAC                      InterfaceType = 188
	InterfaceType_atmRadio                      InterfaceType = 189
	InterfaceType_imt                           InterfaceType = 190
	InterfaceType_mvl                           InterfaceType = 191
	InterfaceType_reachDSL                      InterfaceType = 192
	InterfaceType_frDlciEndPt                   InterfaceType = 193
	InterfaceType_atmVciEndPt                   InterfaceType = 194
	InterfaceType_opticalChannel                InterfaceType = 195
	InterfaceType_opticalTransport              InterfaceType = 196
	InterfaceType_propAtm                       InterfaceType = 197
	InterfaceType_voiceOverCable                InterfaceType = 198
	InterfaceType_infiniband                    InterfaceType = 199
	InterfaceType_teLink                        InterfaceType = 200
	InterfaceType_q2931                         InterfaceType = 201
	InterfaceType_virtualTg                     InterfaceType = 202
	InterfaceType_sipTg                         InterfaceType = 203
	InterfaceType_sipSig                        InterfaceType = 204
	InterfaceType_docsCableUpstreamChannel      InterfaceType = 205
	InterfaceType_econet                        InterfaceType = 206
	InterfaceType_pon155                        InterfaceType = 207
	InterfaceType_pon622                        InterfaceType = 208
	InterfaceType_bridge                        InterfaceType = 209
	InterfaceType_linegroup                     InterfaceType = 210
	InterfaceType_voiceEMFGD                    InterfaceType = 211
	InterfaceType_voiceFGDEANA                  InterfaceType = 212
	InterfaceType_voiceDID                      InterfaceType = 213
	InterfaceType_mpegTransport                 InterfaceType = 214
	InterfaceType_sixToFour                     InterfaceType = 215
	InterfaceType_gtp                           InterfaceType = 216
	InterfaceType_pdnEtherLoop1                 InterfaceType = 217
	InterfaceType_pdnEtherLoop2                 InterfaceType = 218
	InterfaceType_opticalChannelGroup           InterfaceType = 219
	InterfaceType_homepna                       InterfaceType = 220
	InterfaceType_gfp                           InterfaceType = 221
	InterfaceType_ciscoISLvlan                  InterfaceType = 222
	InterfaceType_actelisMetaLOOP               InterfaceType = 223
	InterfaceType_fcipLink                      InterfaceType = 224
	InterfaceType_rpr                           InterfaceType = 225
	InterfaceType_qam                           InterfaceType = 226
	InterfaceType_lmp                           InterfaceType = 227
	InterfaceType_cblVectaStar                  InterfaceType = 228
	InterfaceType_docsCableMCmtsDownstream      InterfaceType = 229
	InterfaceType_adsl2                         InterfaceType = 230
	InterfaceType_macSecControlledIF            InterfaceType = 231
	InterfaceType_macSecUncontrolledIF          InterfaceType = 232
	InterfaceType_aviciOpticalEther             InterfaceType = 233
	InterfaceType_atmbond                       InterfaceType = 234
	InterfaceType_voiceFGDOS                    InterfaceType = 235
	InterfaceType_mocaVersion1                  InterfaceType = 236
	InterfaceType_ieee80216WMAN                 InterfaceType = 237
	InterfaceType_adsl2plus                     InterfaceType = 238
	InterfaceType_dvbRcsMacLayer                InterfaceType = 239
	InterfaceType_dvbTdm                        InterfaceType = 240
	InterfaceType_dvbRcsTdma                    InterfaceType = 241
	InterfaceType_x86Laps                       InterfaceType = 242
	InterfaceType_wwanPP                        InterfaceType = 243
	InterfaceType_wwanPP2                       InterfaceType = 244
	InterfaceType_voiceEBS                      InterfaceType = 245
	InterfaceType_ifPwType                      InterfaceType = 246
	InterfaceType_ilan                          InterfaceType = 247
	InterfaceType_pip                           InterfaceType = 248
	InterfaceType_aluELP                        InterfaceType = 249
	InterfaceType_gpon                          InterfaceType = 250
	InterfaceType_vdsl2                         InterfaceType = 251
	InterfaceType_capwapDot11Profile            InterfaceType = 252
	InterfaceType_capwapDot11Bss                InterfaceType = 253
	InterfaceType_capwapWtpVirtualRadio         InterfaceType = 254
	InterfaceType_bits                          InterfaceType = 255
	InterfaceType_docsCableUpstreamRfPort       InterfaceType = 256
	InterfaceType_cableDownstreamRfPort         InterfaceType = 257
	InterfaceType_vmwareVirtualNic              InterfaceType = 258
	InterfaceType_ieee802154                    InterfaceType = 259
	InterfaceType_otnOdu                        InterfaceType = 260
	InterfaceType_otnOtu                        InterfaceType = 261
	InterfaceType_ifVfiType                     InterfaceType = 262
	InterfaceType_g9981                         InterfaceType = 263
	InterfaceType_g9982                         InterfaceType = 264
	InterfaceType_g9983                         InterfaceType = 265
	InterfaceType_aluEpon                       InterfaceType = 266
	InterfaceType_aluEponOnu                    InterfaceType = 267
	InterfaceType_aluEponPhysicalUni            InterfaceType = 268
	InterfaceType_aluEponLogicalLink            InterfaceType = 269
	InterfaceType_aluGponOnu                    InterfaceType = 270
	InterfaceType_aluGponPhysicalUni            InterfaceType = 271
	InterfaceType_vmwareNicTeam                 InterfaceType = 272
)

var InterfaceType_name = map[int32]string{
	0:   "unknown_interface_type",
	1:   "other",
	2:   "regular1822",
	3:   "hdh1822",
	4:   "ddnX25",
	5:   "rfc877x25",
	6:   "ethernetCsmacd",
	7:   "iso88023Csmacd",
	8:   "iso88024TokenBus",
	9:   "iso88025TokenRing",
	10:  "iso88026Man",
	11:  "starLan",
	12:  "proteon10Mbit",
	13:  "proteon80Mbit",
	14:  "hyperchannel",
	15:  "fddi",
	16:  "lapb",
	17:  "sdlc",
	18:  "ds1",
	19:  "e1",
	20:  "basicISDN",
	21:  "primaryISDN",
	22:  "propPointToPointSerial",
	23:  "ppp",
	24:  "softwareLoopback",
	25:  "eon",
	26:  "ethernet3Mbit",
	27:  "nsip",
	28:  "slip",
	29:  "ultra",
	30:  "ds3",
	31:  "sip",
	32:  "frameRelay",
	33:  "rs232",
	34:  "para",
	35:  "arcnet",
	36:  "arcnetPlus",
	37:  "atm",
	38:  "miox25",
	39:  "sonet",
	40:  "x25ple",
	41:  "iso88022llc",
	42:  "localTalk",
	43:  "smdsDxi",
	44:  "frameRelayService",
	45:  "v35",
	46:  "hssi",
	47:  "hippi",
	48:  "modem",
	49:  "aal5",
	50:  "sonetPath",
	51:  "sonetVT",
	52:  "smdsIcip",
	53:  "propVirtual",
	54:  "propMultiplexor",
	55:  "ieee80212",
	56:  "fibreChannel",
	57:  "hippiInterface",
	58:  "frameRelayInterconnect",
	59:  "aflane8023",
	60:  "aflane8025",
	61:  "cctEmul",
	62:  "fastEther",
	63:  "isdn",
	64:  "v11",
	65:  "v36",
	66:  "g703at64k",
	67:  "g703at2mb",
	68:  "qllc",
	69:  "fastEtherFX",
	70:  "channel",
	71:  "ieee80211",
	72:  "ibm370parChan",
	73:  "escon",
	74:  "dlsw",
	75:  "isdns",
	76:  "isdnu",
	77:  "lapd",
	78:  "ipSwitch",
	79:  "rsrb",
	80:  "atmLogical",
	81:  "ds0",
	82:  "ds0Bundle",
	83:  "bsc",
	84:  "async",
	85:  "cnr",
	86:  "iso88025Dtr",
	87:  "eplrs",
	88:  "arap",
	89:  "propCnls",
	90:  "hostPad",
	91:  "termPad",
	92:  "frameRelayMPI",
	93:  "x213",
	94:  "adsl",
	95:  "radsl",
	96:  "sdsl",
	97:  "vdsl",
	98:  "iso88025CRFPInt",
	99:  "myrinet",
	100: "voiceEM",
	101: "voiceFXO",
	102: "voiceFXS",
	103: "voiceEncap",
	104: "voiceOverIp",
	105: "atmDxi",
	106: "atmFuni",
	107: "atmIma",
	108: "pppMultilinkBundle",
	109: "ipOverCdlc",
	110: "ipOverClaw",
	111: "stackToStack",
	112: "virtualIpAddress",
	113: "mpc",
	114: "ipOverAtm",
	115: "iso88025Fiber",
	116: "tdlc",
	117: "gigabitEthernet",
	118: "hdlc",
	119: "lapf",
	120: "v37",
	121: "x25mlp",
	122: "x25huntGroup",
	123: "transpHdlc",
	124: "interleave",
	125: "fast",
	126: "ip",
	127: "docsCableMaclayer",
	128: "docsCableDownstream",
	129: "docsCableUpstream",
	130: "a12MppSwitch",
	131: "tunnel",
	132: "coffee",
	133: "ces",
	134: "atmSubInterface",
	135: "l2vlan",
	136: "l3ipvlan",
	137: "l3ipxvlan",
	138: "digitalPowerline",
	139: "mediaMailOverIp",
	140: "dtm",
	141: "dcn",
	142: "ipForward",
	143: "msdsl",
	144: "ieee1394",
	145: "if_gsn",
	146: "dvbRccMacLayer",
	147: "dvbRccDownstream",
	148: "dvbRccUpstream",
	149: "atmVirtual",
	150: "mplsTunnel",
	151: "srp",
	152: "voiceOverAtm",
	153: "voiceOverFrameRelay",
	154: "idsl",
	155: "compositeLink",
	156: "ss7SigLink",
	157: "propWirelessP2P",
	158: "frForward",
	159: "rfc1483",
	160: "usb",
	161: "ieee8023adLag",
	162: "bgppolicyaccounting",
	163: "frf16MfrBundle",
	164: "h323Gatekeeper",
	165: "h323Proxy",
	166: "mpls",
	167: "mfSigLink",
	168: "hdsl2",
	169: "shdsl",
	170: "ds1FDL",
	171: "pos",
	172: "dvbAsiIn",
	173: "dvbAsiOut",
	174: "plc",
	175: "nfas",
	176: "tr008",
	177: "gr303RDT",
	178: "gr303IDT",
	179: "isup",
	180: "propDocsWirelessMaclayer",
	181: "propDocsWirelessDownstream",
	182: "propDocsWirelessUpstream",
	183: "hiperlan2",
	184: "propBWAp2Mp",
	185: "sonetOverheadChannel",
	186: "digitalWrapperOverheadChannel",
	187: "aal2",
	188: "radioMAC",
	189: "atmRadio",
	190: "imt",
	191: "mvl",
	192: "reachDSL",
	193: "frDlciEndPt",
	194: "atmVciEndPt",
	195: "opticalChannel",
	196: "opticalTransport",
	197: "propAtm",
	198: "voiceOverCable",
	199: "infiniband",
	200: "teLink",
	201: "q2931",
	202: "virtualTg",
	203: "sipTg",
	204: "sipSig",
	205: "docsCableUpstreamChannel",
	206: "econet",
	207: "pon155",
	208: "pon622",
	209: "bridge",
	210: "linegroup",
	211: "voiceEMFGD",
	212: "voiceFGDEANA",
	213: "voiceDID",
	214: "mpegTransport",
	215: "sixToFour",
	216: "gtp",
	217: "pdnEtherLoop1",
	218: "pdnEtherLoop2",
	219: "opticalChannelGroup",
	220: "homepna",
	221: "gfp",
	222: "ciscoISLvlan",
	223: "actelisMetaLOOP",
	224: "fcipLink",
	225: "rpr",
	226: "qam",
	227: "lmp",
	228: "cblVectaStar",
	229: "docsCableMCmtsDownstream",
	230: "adsl2",
	231: "macSecControlledIF",
	232: "macSecUncontrolledIF",
	233: "aviciOpticalEther",
	234: "atmbond",
	235: "voiceFGDOS",
	236: "mocaVersion1",
	237: "ieee80216WMAN",
	238: "adsl2plus",
	239: "dvbRcsMacLayer",
	240: "dvbTdm",
	241: "dvbRcsTdma",
	242: "x86Laps",
	243: "wwanPP",
	244: "wwanPP2",
	245: "voiceEBS",
	246: "ifPwType",
	247: "ilan",
	248: "pip",
	249: "aluELP",
	250: "gpon",
	251: "vdsl2",
	252: "capwapDot11Profile",
	253: "capwapDot11Bss",
	254: "capwapWtpVirtualRadio",
	255: "bits",
	256: "docsCableUpstreamRfPort",
	257: "cableDownstreamRfPort",
	258: "vmwareVirtualNic",
	259: "ieee802154",
	260: "otnOdu",
	261: "otnOtu",
	262: "ifVfiType",
	263: "g9981",
	264: "g9982",
	265: "g9983",
	266: "aluEpon",
	267: "aluEponOnu",
	268: "aluEponPhysicalUni",
	269: "aluEponLogicalLink",
	270: "aluGponOnu",
	271: "aluGponPhysicalUni",
	272: "vmwareNicTeam",
}

var InterfaceType_value = map[string]int32{
	"unknown_interface_type":        0,
	"other":                         1,
	"regular1822":                   2,
	"hdh1822":                       3,
	"ddnX25":                        4,
	"rfc877x25":                     5,
	"ethernetCsmacd":                6,
	"iso88023Csmacd":                7,
	"iso88024TokenBus":              8,
	"iso88025TokenRing":             9,
	"iso88026Man":                   10,
	"starLan":                       11,
	"proteon10Mbit":                 12,
	"proteon80Mbit":                 13,
	"hyperchannel":                  14,
	"fddi":                          15,
	"lapb":                          16,
	"sdlc":                          17,
	"ds1":                           18,
	"e1":                            19,
	"basicISDN":                     20,
	"primaryISDN":                   21,
	"propPointToPointSerial":        22,
	"ppp":                           23,
	"softwareLoopback":              24,
	"eon":                           25,
	"ethernet3Mbit":                 26,
	"nsip":                          27,
	"slip":                          28,
	"ultra":                         29,
	"ds3":                           30,
	"sip":                           31,
	"frameRelay":                    32,
	"rs232":                         33,
	"para":                          34,
	"arcnet":                        35,
	"arcnetPlus":                    36,
	"atm":                           37,
	"miox25":                        38,
	"sonet":                         39,
	"x25ple":                        40,
	"iso88022llc":                   41,
	"localTalk":                     42,
	"smdsDxi":                       43,
	"frameRelayService":             44,
	"v35":                           45,
	"hssi":                          46,
	"hippi":                         47,
	"modem":                         48,
	"aal5":                          49,
	"sonetPath":                     50,
	"sonetVT":                       51,
	"smdsIcip":                      52,
	"propVirtual":                   53,
	"propMultiplexor":               54,
	"ieee80212":                     55,
	"fibreChannel":                  56,
	"hippiInterface":                57,
	"frameRelayInterconnect":        58,
	"aflane8023":                    59,
	"aflane8025":                    60,
	"cctEmul":                       61,
	"fastEther":                     62,
	"isdn":                          63,
	"v11":                           64,
	"v36":                           65,
	"g703at64k":                     66,
	"g703at2mb":                     67,
	"qllc":                          68,
	"fastEtherFX":                   69,
	"channel":                       70,
	"ieee80211":                     71,
	"ibm370parChan":                 72,
	"escon":                         73,
	"dlsw":                          74,
	"isdns":                         75,
	"isdnu":                         76,
	"lapd":                          77,
	"ipSwitch":                      78,
	"rsrb":                          79,
	"atmLogical":                    80,
	"ds0":                           81,
	"ds0Bundle":                     82,
	"bsc":                           83,
	"async":                         84,
	"cnr":                           85,
	"iso88025Dtr":                   86,
	"eplrs":                         87,
	"arap":                          88,
	"propCnls":                      89,
	"hostPad":                       90,
	"termPad":                       91,
	"frameRelayMPI":                 92,
	"x213":                          93,
	"adsl":                          94,
	"radsl":                         95,
	"sdsl":                          96,
	"vdsl":                          97,
	"iso88025CRFPInt":               98,
	"myrinet":                       99,
	"voiceEM":                       100,
	"voiceFXO":                      101,
	"voiceFXS":                      102,
	"voiceEncap":                    103,
	"voiceOverIp":                   104,
	"atmDxi":                        105,
	"atmFuni":                       106,
	"atmIma":                        107,
	"pppMultilinkBundle":            108,
	"ipOverCdlc":                    109,
	"ipOverClaw":                    110,
	"stackToStack":                  111,
	"virtualIpAddress":              112,
	"mpc":                           113,
	"ipOverAtm":                     114,
	"iso88025Fiber":                 115,
	"tdlc":                          116,
	"gigabitEthernet":               117,
	"hdlc":                          118,
	"lapf":                          119,
	"v37":                           120,
	"x25mlp":                        121,
	"x25huntGroup":                  122,
	"transpHdlc":                    123,
	"interleave":                    124,
	"fast":                          125,
	"ip":                            126,
	"docsCableMaclayer":             127,
	"docsCableDownstream":           128,
	"docsCableUpstream":             129,
	"a12MppSwitch":                  130,
	"tunnel":                        131,
	"coffee":                        132,
	"ces":                           133,
	"atmSubInterface":               134,
	"l2vlan":                        135,
	"l3ipvlan":                      136,
	"l3ipxvlan":                     137,
	"digitalPowerline":              138,
	"mediaMailOverIp":               139,
	"dtm":                           140,
	"dcn":                           141,
	"ipForward":                     142,
	"msdsl":                         143,
	"ieee1394":                      144,
	"if_gsn":                        145,
	"dvbRccMacLayer":                146,
	"dvbRccDownstream":              147,
	"dvbRccUpstream":                148,
	"atmVirtual":                    149,
	"mplsTunnel":                    150,
	"srp":                           151,
	"voiceOverAtm":                  152,
	"voiceOverFrameRelay":           153,
	"idsl":                          154,
	"compositeLink":                 155,
	"ss7SigLink":                    156,
	"propWirelessP2P":               157,
	"frForward":                     158,
	"rfc1483":                       159,
	"usb":                           160,
	"ieee8023adLag":                 161,
	"bgppolicyaccounting":           162,
	"frf16MfrBundle":                163,
	"h323Gatekeeper":                164,
	"h323Proxy":                     165,
	"mpls":                          166,
	"mfSigLink":                     167,
	"hdsl2":                         168,
	"shdsl":                         169,
	"ds1FDL":                        170,
	"pos":                           171,
	"dvbAsiIn":                      172,
	"dvbAsiOut":                     173,
	"plc":                           174,
	"nfas":                          175,
	"tr008":                         176,
	"gr303RDT":                      177,
	"gr303IDT":                      178,
	"isup":                          179,
	"propDocsWirelessMaclayer":      180,
	"propDocsWirelessDownstream":    181,
	"propDocsWirelessUpstream":      182,
	"hiperlan2":                     183,
	"propBWAp2Mp":                   184,
	"sonetOverheadChannel":          185,
	"digitalWrapperOverheadChannel": 186,
	"aal2":                          187,
	"radioMAC":                      188,
	"atmRadio":                      189,
	"imt":                           190,
	"mvl":                           191,
	"reachDSL":                      192,
	"frDlciEndPt":                   193,
	"atmVciEndPt":                   194,
	"opticalChannel":                195,
	"opticalTransport":              196,
	"propAtm":                       197,
	"voiceOverCable":                198,
	"infiniband":                    199,
	"teLink":                        200,
	"q2931":                         201,
	"virtualTg":                     202,
	"sipTg":                         203,
	"sipSig":                        204,
	"docsCableUpstreamChannel":      205,
	"econet":                        206,
	"pon155":                        207,
	"pon622":                        208,
	"bridge":                        209,
	"linegroup":                     210,
	"voiceEMFGD":                    211,
	"voiceFGDEANA":                  212,
	"voiceDID":                      213,
	"mpegTransport":                 214,
	"sixToFour":                     215,
	"gtp":                           216,
	"pdnEtherLoop1":                 217,
	"pdnEtherLoop2":                 218,
	"opticalChannelGroup":           219,
	"homepna":                       220,
	"gfp":                           221,
	"ciscoISLvlan":                  222,
	"actelisMetaLOOP":               223,
	"fcipLink":                      224,
	"rpr":                           225,
	"qam":                           226,
	"lmp":                           227,
	"cblVectaStar":                  228,
	"docsCableMCmtsDownstream":      229,
	"adsl2":                         230,
	"macSecControlledIF":            231,
	"macSecUncontrolledIF":          232,
	"aviciOpticalEther":             233,
	"atmbond":                       234,
	"voiceFGDOS":                    235,
	"mocaVersion1":                  236,
	"ieee80216WMAN":                 237,
	"adsl2plus":                     238,
	"dvbRcsMacLayer":                239,
	"dvbTdm":                        240,
	"dvbRcsTdma":                    241,
	"x86Laps":                       242,
	"wwanPP":                        243,
	"wwanPP2":                       244,
	"voiceEBS":                      245,
	"ifPwType":                      246,
	"ilan":                          247,
	"pip":                           248,
	"aluELP":                        249,
	"gpon":                          250,
	"vdsl2":                         251,
	"capwapDot11Profile":            252,
	"capwapDot11Bss":                253,
	"capwapWtpVirtualRadio":         254,
	"bits":                          255,
	"docsCableUpstreamRfPort":       256,
	"cableDownstreamRfPort":         257,
	"vmwareVirtualNic":              258,
	"ieee802154":                    259,
	"otnOdu":                        260,
	"otnOtu":                        261,
	"ifVfiType":                     262,
	"g9981":                         263,
	"g9982":                         264,
	"g9983":                         265,
	"aluEpon":                       266,
	"aluEponOnu":                    267,
	"aluEponPhysicalUni":            268,
	"aluEponLogicalLink":            269,
	"aluGponOnu":                    270,
	"aluGponPhysicalUni":            271,
	"vmwareNicTeam":                 272,
}

func (x InterfaceType) String() string {
	return proto.EnumName(InterfaceType_name, int32(x))
}

func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{2}
}

type TransientError_Level int32

const (
	TransientError_INFO  TransientError_Level = 0
	TransientError_WARN  TransientError_Level = 1
	TransientError_FATAL TransientError_Level = 2
)

var TransientError_Level_name = map[int32]string{
	0: "INFO",
	1: "WARN",
	2: "FATAL",
}

var TransientError_Level_value = map[string]int32{
	"INFO":  0,
	"WARN":  1,
	"FATAL": 2,
}

func (x TransientError_Level) String() string {
	return proto.EnumName(TransientError_Level_name, int32(x))
}

func (TransientError_Level) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{2, 0}
}

type Element struct {
	Hostname             string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Version              string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	SoftwareVersion      string                 `protobuf:"bytes,3,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	SnmpObjectId         string                 `protobuf:"bytes,4,opt,name=snmp_object_id,json=snmpObjectId,proto3" json:"snmp_object_id,omitempty"`
	InterfaceIndex       int32                  `protobuf:"varint,5,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
	Virtual              bool                   `protobuf:"varint,6,opt,name=virtual,proto3" json:"virtual,omitempty"`
	Uptime               string                 `protobuf:"bytes,7,opt,name=uptime,proto3" json:"uptime,omitempty"`
	Contact              string                 `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty"`
	Sysname              string                 `protobuf:"bytes,9,opt,name=sysname,proto3" json:"sysname,omitempty"`
	Location             string                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	BridgeMacAddress     string                 `protobuf:"bytes,11,opt,name=bridge_mac_address,json=bridgeMacAddress,proto3" json:"bridge_mac_address,omitempty"`
	Interfaces           []*Interface           `protobuf:"bytes,12,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	AggregatedInterfaces []*AggregatedInterface `protobuf:"bytes,13,rep,name=aggregated_interfaces,json=aggregatedInterfaces,proto3" json:"aggregated_interfaces,omitempty"`
	Modules              []*Module              `protobuf:"bytes,14,rep,name=modules,proto3" json:"modules,omitempty"`
	Driver               string                 `protobuf:"bytes,15,opt,name=driver,proto3" json:"driver,omitempty"`
	TransientErrors      *TransientErrors       `protobuf:"bytes,16,opt,name=transient_errors,json=transientErrors,proto3" json:"transient_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Element) Reset()         { *m = Element{} }
func (m *Element) String() string { return proto.CompactTextString(m) }
func (*Element) ProtoMessage()    {}
func (*Element) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{0}
}

func (m *Element) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Element.Unmarshal(m, b)
}
func (m *Element) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Element.Marshal(b, m, deterministic)
}
func (m *Element) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Element.Merge(m, src)
}
func (m *Element) XXX_Size() int {
	return xxx_messageInfo_Element.Size(m)
}
func (m *Element) XXX_DiscardUnknown() {
	xxx_messageInfo_Element.DiscardUnknown(m)
}

var xxx_messageInfo_Element proto.InternalMessageInfo

func (m *Element) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Element) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Element) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *Element) GetSnmpObjectId() string {
	if m != nil {
		return m.SnmpObjectId
	}
	return ""
}

func (m *Element) GetInterfaceIndex() int32 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

func (m *Element) GetVirtual() bool {
	if m != nil {
		return m.Virtual
	}
	return false
}

func (m *Element) GetUptime() string {
	if m != nil {
		return m.Uptime
	}
	return ""
}

func (m *Element) GetContact() string {
	if m != nil {
		return m.Contact
	}
	return ""
}

func (m *Element) GetSysname() string {
	if m != nil {
		return m.Sysname
	}
	return ""
}

func (m *Element) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Element) GetBridgeMacAddress() string {
	if m != nil {
		return m.BridgeMacAddress
	}
	return ""
}

func (m *Element) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Element) GetAggregatedInterfaces() []*AggregatedInterface {
	if m != nil {
		return m.AggregatedInterfaces
	}
	return nil
}

func (m *Element) GetModules() []*Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *Element) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *Element) GetTransientErrors() *TransientErrors {
	if m != nil {
		return m.TransientErrors
	}
	return nil
}

type TransientErrors struct {
	Errors               []*TransientError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TransientErrors) Reset()         { *m = TransientErrors{} }
func (m *TransientErrors) String() string { return proto.CompactTextString(m) }
func (*TransientErrors) ProtoMessage()    {}
func (*TransientErrors) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{1}
}

func (m *TransientErrors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransientErrors.Unmarshal(m, b)
}
func (m *TransientErrors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransientErrors.Marshal(b, m, deterministic)
}
func (m *TransientErrors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransientErrors.Merge(m, src)
}
func (m *TransientErrors) XXX_Size() int {
	return xxx_messageInfo_TransientErrors.Size(m)
}
func (m *TransientErrors) XXX_DiscardUnknown() {
	xxx_messageInfo_TransientErrors.DiscardUnknown(m)
}

var xxx_messageInfo_TransientErrors proto.InternalMessageInfo

func (m *TransientErrors) GetErrors() []*TransientError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type TransientError struct {
	Code                 int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Cause                string               `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
	Level                TransientError_Level `protobuf:"varint,4,opt,name=level,proto3,enum=networkelement.TransientError_Level" json:"level,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TransientError) Reset()         { *m = TransientError{} }
func (m *TransientError) String() string { return proto.CompactTextString(m) }
func (*TransientError) ProtoMessage()    {}
func (*TransientError) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{2}
}

func (m *TransientError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransientError.Unmarshal(m, b)
}
func (m *TransientError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransientError.Marshal(b, m, deterministic)
}
func (m *TransientError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransientError.Merge(m, src)
}
func (m *TransientError) XXX_Size() int {
	return xxx_messageInfo_TransientError.Size(m)
}
func (m *TransientError) XXX_DiscardUnknown() {
	xxx_messageInfo_TransientError.DiscardUnknown(m)
}

var xxx_messageInfo_TransientError proto.InternalMessageInfo

func (m *TransientError) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TransientError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TransientError) GetCause() string {
	if m != nil {
		return m.Cause
	}
	return ""
}

func (m *TransientError) GetLevel() TransientError_Level {
	if m != nil {
		return m.Level
	}
	return TransientError_INFO
}

type Module struct {
	Id                   int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slot                 int32      `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description          string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Type                 ModuleType `protobuf:"varint,5,opt,name=type,proto3,enum=networkelement.ModuleType" json:"type,omitempty"`
	SerialNumber         string     `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	BoardType            string     `protobuf:"bytes,7,opt,name=board_type,json=boardType,proto3" json:"board_type,omitempty"`
	Bom                  string     `protobuf:"bytes,8,opt,name=bom,proto3" json:"bom,omitempty"`
	CleiCode             string     `protobuf:"bytes,9,opt,name=clei_code,json=cleiCode,proto3" json:"clei_code,omitempty"`
	IssueNumber          string     `protobuf:"bytes,10,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty"`
	MacAddress           string     `protobuf:"bytes,11,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Item                 string     `protobuf:"bytes,12,opt,name=item,proto3" json:"item,omitempty"`
	Manufactured         string     `protobuf:"bytes,13,opt,name=manufactured,proto3" json:"manufactured,omitempty"`
	VendorName           string     `protobuf:"bytes,14,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Module) Reset()         { *m = Module{} }
func (m *Module) String() string { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()    {}
func (*Module) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{3}
}

func (m *Module) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Module.Unmarshal(m, b)
}
func (m *Module) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Module.Marshal(b, m, deterministic)
}
func (m *Module) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Module.Merge(m, src)
}
func (m *Module) XXX_Size() int {
	return xxx_messageInfo_Module.Size(m)
}
func (m *Module) XXX_DiscardUnknown() {
	xxx_messageInfo_Module.DiscardUnknown(m)
}

var xxx_messageInfo_Module proto.InternalMessageInfo

func (m *Module) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Module) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Module) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Module) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Module) GetType() ModuleType {
	if m != nil {
		return m.Type
	}
	return ModuleType_POWER
}

func (m *Module) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Module) GetBoardType() string {
	if m != nil {
		return m.BoardType
	}
	return ""
}

func (m *Module) GetBom() string {
	if m != nil {
		return m.Bom
	}
	return ""
}

func (m *Module) GetCleiCode() string {
	if m != nil {
		return m.CleiCode
	}
	return ""
}

func (m *Module) GetIssueNumber() string {
	if m != nil {
		return m.IssueNumber
	}
	return ""
}

func (m *Module) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *Module) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func (m *Module) GetManufactured() string {
	if m != nil {
		return m.Manufactured
	}
	return ""
}

func (m *Module) GetVendorName() string {
	if m != nil {
		return m.VendorName
	}
	return ""
}

type InterfaceStatisticsInput struct {
	Packets              int64    `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes                int64    `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Unicast              int64    `protobuf:"varint,3,opt,name=unicast,proto3" json:"unicast,omitempty"`
	Broadcast            int64    `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Multicast            int64    `protobuf:"varint,5,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Pauses               int64    `protobuf:"varint,6,opt,name=pauses,proto3" json:"pauses,omitempty"`
	Errors               int64    `protobuf:"varint,7,opt,name=errors,proto3" json:"errors,omitempty"`
	CrcErrors            int64    `protobuf:"varint,8,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfaceStatisticsInput) Reset()         { *m = InterfaceStatisticsInput{} }
func (m *InterfaceStatisticsInput) String() string { return proto.CompactTextString(m) }
func (*InterfaceStatisticsInput) ProtoMessage()    {}
func (*InterfaceStatisticsInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{4}
}

func (m *InterfaceStatisticsInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceStatisticsInput.Unmarshal(m, b)
}
func (m *InterfaceStatisticsInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceStatisticsInput.Marshal(b, m, deterministic)
}
func (m *InterfaceStatisticsInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceStatisticsInput.Merge(m, src)
}
func (m *InterfaceStatisticsInput) XXX_Size() int {
	return xxx_messageInfo_InterfaceStatisticsInput.Size(m)
}
func (m *InterfaceStatisticsInput) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceStatisticsInput.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceStatisticsInput proto.InternalMessageInfo

func (m *InterfaceStatisticsInput) GetPackets() int64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetUnicast() int64 {
	if m != nil {
		return m.Unicast
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetBroadcast() int64 {
	if m != nil {
		return m.Broadcast
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetMulticast() int64 {
	if m != nil {
		return m.Multicast
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetPauses() int64 {
	if m != nil {
		return m.Pauses
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetErrors() int64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

func (m *InterfaceStatisticsInput) GetCrcErrors() int64 {
	if m != nil {
		return m.CrcErrors
	}
	return 0
}

type InterfaceStatisticsOutput struct {
	Packets              int64    `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes                int64    `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Unicast              int64    `protobuf:"varint,3,opt,name=unicast,proto3" json:"unicast,omitempty"`
	Broadcast            int64    `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Multicast            int64    `protobuf:"varint,5,opt,name=multicast,proto3" json:"multicast,omitempty"`
	Pauses               int64    `protobuf:"varint,6,opt,name=pauses,proto3" json:"pauses,omitempty"`
	Errors               int64    `protobuf:"varint,7,opt,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfaceStatisticsOutput) Reset()         { *m = InterfaceStatisticsOutput{} }
func (m *InterfaceStatisticsOutput) String() string { return proto.CompactTextString(m) }
func (*InterfaceStatisticsOutput) ProtoMessage()    {}
func (*InterfaceStatisticsOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{5}
}

func (m *InterfaceStatisticsOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceStatisticsOutput.Unmarshal(m, b)
}
func (m *InterfaceStatisticsOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceStatisticsOutput.Marshal(b, m, deterministic)
}
func (m *InterfaceStatisticsOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceStatisticsOutput.Merge(m, src)
}
func (m *InterfaceStatisticsOutput) XXX_Size() int {
	return xxx_messageInfo_InterfaceStatisticsOutput.Size(m)
}
func (m *InterfaceStatisticsOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceStatisticsOutput.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceStatisticsOutput proto.InternalMessageInfo

func (m *InterfaceStatisticsOutput) GetPackets() int64 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *InterfaceStatisticsOutput) GetBytes() int64 {
	if m != nil {
		return m.Bytes
	}
	return 0
}

func (m *InterfaceStatisticsOutput) GetUnicast() int64 {
	if m != nil {
		return m.Unicast
	}
	return 0
}

func (m *InterfaceStatisticsOutput) GetBroadcast() int64 {
	if m != nil {
		return m.Broadcast
	}
	return 0
}

func (m *InterfaceStatisticsOutput) GetMulticast() int64 {
	if m != nil {
		return m.Multicast
	}
	return 0
}

func (m *InterfaceStatisticsOutput) GetPauses() int64 {
	if m != nil {
		return m.Pauses
	}
	return 0
}

func (m *InterfaceStatisticsOutput) GetErrors() int64 {
	if m != nil {
		return m.Errors
	}
	return 0
}

type InterfaceStatistics struct {
	Input                *InterfaceStatisticsInput  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output               *InterfaceStatisticsOutput `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Resets               int64                      `protobuf:"varint,3,opt,name=resets,proto3" json:"resets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *InterfaceStatistics) Reset()         { *m = InterfaceStatistics{} }
func (m *InterfaceStatistics) String() string { return proto.CompactTextString(m) }
func (*InterfaceStatistics) ProtoMessage()    {}
func (*InterfaceStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{6}
}

func (m *InterfaceStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceStatistics.Unmarshal(m, b)
}
func (m *InterfaceStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceStatistics.Marshal(b, m, deterministic)
}
func (m *InterfaceStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceStatistics.Merge(m, src)
}
func (m *InterfaceStatistics) XXX_Size() int {
	return xxx_messageInfo_InterfaceStatistics.Size(m)
}
func (m *InterfaceStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceStatistics proto.InternalMessageInfo

func (m *InterfaceStatistics) GetInput() *InterfaceStatisticsInput {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *InterfaceStatistics) GetOutput() *InterfaceStatisticsOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *InterfaceStatistics) GetResets() int64 {
	if m != nil {
		return m.Resets
	}
	return 0
}

type Interface struct {
	AggregatedId            string                                  `protobuf:"bytes,1,opt,name=aggregated_id,json=aggregatedId,proto3" json:"aggregated_id,omitempty"`
	Index                   int64                                   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Alias                   string                                  `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Description             string                                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Hwaddress               string                                  `protobuf:"bytes,5,opt,name=hwaddress,proto3" json:"hwaddress,omitempty"`
	Type                    InterfaceType                           `protobuf:"varint,6,opt,name=type,proto3,enum=networkelement.InterfaceType" json:"type,omitempty"`
	AdminStatus             InterfaceStatus                         `protobuf:"varint,7,opt,name=admin_status,json=adminStatus,proto3,enum=networkelement.InterfaceStatus" json:"admin_status,omitempty"`
	OperationalStatus       InterfaceStatus                         `protobuf:"varint,8,opt,name=operational_status,json=operationalStatus,proto3,enum=networkelement.InterfaceStatus" json:"operational_status,omitempty"`
	LastChanged             *timestamppb.Timestamp                  `protobuf:"bytes,9,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty"`
	Speed                   int64                                   `protobuf:"varint,11,opt,name=speed,proto3" json:"speed,omitempty"`
	Duplex                  string                                  `protobuf:"bytes,12,opt,name=duplex,proto3" json:"duplex,omitempty"`
	Mtu                     int64                                   `protobuf:"varint,13,opt,name=mtu,proto3" json:"mtu,omitempty"`
	Stats                   *InterfaceStatistics                    `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty"`
	Transceiver             *Transceiver                            `protobuf:"bytes,15,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
	Neighbor                *Neighbor                               `protobuf:"bytes,16,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	MacAddressTable         []*MACEntry                             `protobuf:"bytes,17,rep,name=mac_address_table,json=macAddressTable,proto3" json:"mac_address_table,omitempty"`
	DhcpTable               []*DHCPEntry                            `protobuf:"bytes,18,rep,name=dhcp_table,json=dhcpTable,proto3" json:"dhcp_table,omitempty"`
	Config                  string                                  `protobuf:"bytes,19,opt,name=config,proto3" json:"config,omitempty"`
	InterfaceStatus         int64                                   `protobuf:"varint,20,opt,name=interface_status,json=interfaceStatus,proto3" json:"interface_status,omitempty"`
	ConfiguredTrafficPolicy *traffic_policy.ConfiguredTrafficPolicy `protobuf:"bytes,21,opt,name=configuredTrafficPolicy,proto3" json:"configuredTrafficPolicy,omitempty"`
	Qos                     *traffic_policy.QOS                     `protobuf:"bytes,22,opt,name=qos,proto3" json:"qos,omitempty"`
	// provider can fill this in based on collected data
	ConnectedSdd         *Element `protobuf:"bytes,23,opt,name=connected_sdd,json=connectedSdd,proto3" json:"connected_sdd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{7}
}

func (m *Interface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface.Unmarshal(m, b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return xxx_messageInfo_Interface.Size(m)
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetAggregatedId() string {
	if m != nil {
		return m.AggregatedId
	}
	return ""
}

func (m *Interface) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Interface) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *Interface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Interface) GetHwaddress() string {
	if m != nil {
		return m.Hwaddress
	}
	return ""
}

func (m *Interface) GetType() InterfaceType {
	if m != nil {
		return m.Type
	}
	return InterfaceType_unknown_interface_type
}

func (m *Interface) GetAdminStatus() InterfaceStatus {
	if m != nil {
		return m.AdminStatus
	}
	return InterfaceStatus_unset
}

func (m *Interface) GetOperationalStatus() InterfaceStatus {
	if m != nil {
		return m.OperationalStatus
	}
	return InterfaceStatus_unset
}

func (m *Interface) GetLastChanged() *timestamppb.Timestamp {
	if m != nil {
		return m.LastChanged
	}
	return nil
}

func (m *Interface) GetSpeed() int64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Interface) GetDuplex() string {
	if m != nil {
		return m.Duplex
	}
	return ""
}

func (m *Interface) GetMtu() int64 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

func (m *Interface) GetStats() *InterfaceStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Interface) GetTransceiver() *Transceiver {
	if m != nil {
		return m.Transceiver
	}
	return nil
}

func (m *Interface) GetNeighbor() *Neighbor {
	if m != nil {
		return m.Neighbor
	}
	return nil
}

func (m *Interface) GetMacAddressTable() []*MACEntry {
	if m != nil {
		return m.MacAddressTable
	}
	return nil
}

func (m *Interface) GetDhcpTable() []*DHCPEntry {
	if m != nil {
		return m.DhcpTable
	}
	return nil
}

func (m *Interface) GetConfig() string {
	if m != nil {
		return m.Config
	}
	return ""
}

func (m *Interface) GetInterfaceStatus() int64 {
	if m != nil {
		return m.InterfaceStatus
	}
	return 0
}

func (m *Interface) GetConfiguredTrafficPolicy() *traffic_policy.ConfiguredTrafficPolicy {
	if m != nil {
		return m.ConfiguredTrafficPolicy
	}
	return nil
}

func (m *Interface) GetQos() *traffic_policy.QOS {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *Interface) GetConnectedSdd() *Element {
	if m != nil {
		return m.ConnectedSdd
	}
	return nil
}

type AggregatedInterface struct {
	Priority             int64        `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	Mode                 string       `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Type                 string       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OperKey              string       `protobuf:"bytes,4,opt,name=oper_key,json=operKey,proto3" json:"oper_key,omitempty"`
	Status               string       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp            string       `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Interfaces           []*Interface `protobuf:"bytes,7,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *AggregatedInterface) Reset()         { *m = AggregatedInterface{} }
func (m *AggregatedInterface) String() string { return proto.CompactTextString(m) }
func (*AggregatedInterface) ProtoMessage()    {}
func (*AggregatedInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{8}
}

func (m *AggregatedInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregatedInterface.Unmarshal(m, b)
}
func (m *AggregatedInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregatedInterface.Marshal(b, m, deterministic)
}
func (m *AggregatedInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatedInterface.Merge(m, src)
}
func (m *AggregatedInterface) XXX_Size() int {
	return xxx_messageInfo_AggregatedInterface.Size(m)
}
func (m *AggregatedInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatedInterface.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatedInterface proto.InternalMessageInfo

func (m *AggregatedInterface) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *AggregatedInterface) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *AggregatedInterface) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AggregatedInterface) GetOperKey() string {
	if m != nil {
		return m.OperKey
	}
	return ""
}

func (m *AggregatedInterface) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AggregatedInterface) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *AggregatedInterface) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type Transceiver struct {
	ConnectorType        string                   `protobuf:"bytes,1,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty"`
	Ddm                  bool                     `protobuf:"varint,2,opt,name=ddm,proto3" json:"ddm,omitempty"`
	Vendor               string                   `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Type                 string                   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	TransferDistance     string                   `protobuf:"bytes,5,opt,name=transfer_distance,json=transferDistance,proto3" json:"transfer_distance,omitempty"`
	Wavelength           string                   `protobuf:"bytes,6,opt,name=wavelength,proto3" json:"wavelength,omitempty"`
	SerialNumber         string                   `protobuf:"bytes,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	PartNumber           string                   `protobuf:"bytes,8,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty"`
	ManufacturingDate    string                   `protobuf:"bytes,9,opt,name=manufacturing_date,json=manufacturingDate,proto3" json:"manufacturing_date,omitempty"`
	Stats                []*TransceiverStatistics `protobuf:"bytes,10,rep,name=stats,proto3" json:"stats,omitempty"`
	Analysis             []*analysis.Analysis     `protobuf:"bytes,11,rep,name=analysis,proto3" json:"analysis,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Transceiver) Reset()         { *m = Transceiver{} }
func (m *Transceiver) String() string { return proto.CompactTextString(m) }
func (*Transceiver) ProtoMessage()    {}
func (*Transceiver) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{9}
}

func (m *Transceiver) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transceiver.Unmarshal(m, b)
}
func (m *Transceiver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transceiver.Marshal(b, m, deterministic)
}
func (m *Transceiver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transceiver.Merge(m, src)
}
func (m *Transceiver) XXX_Size() int {
	return xxx_messageInfo_Transceiver.Size(m)
}
func (m *Transceiver) XXX_DiscardUnknown() {
	xxx_messageInfo_Transceiver.DiscardUnknown(m)
}

var xxx_messageInfo_Transceiver proto.InternalMessageInfo

func (m *Transceiver) GetConnectorType() string {
	if m != nil {
		return m.ConnectorType
	}
	return ""
}

func (m *Transceiver) GetDdm() bool {
	if m != nil {
		return m.Ddm
	}
	return false
}

func (m *Transceiver) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *Transceiver) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Transceiver) GetTransferDistance() string {
	if m != nil {
		return m.TransferDistance
	}
	return ""
}

func (m *Transceiver) GetWavelength() string {
	if m != nil {
		return m.Wavelength
	}
	return ""
}

func (m *Transceiver) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *Transceiver) GetPartNumber() string {
	if m != nil {
		return m.PartNumber
	}
	return ""
}

func (m *Transceiver) GetManufacturingDate() string {
	if m != nil {
		return m.ManufacturingDate
	}
	return ""
}

func (m *Transceiver) GetStats() []*TransceiverStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *Transceiver) GetAnalysis() []*analysis.Analysis {
	if m != nil {
		return m.Analysis
	}
	return nil
}

type TransceiverStatistics struct {
	Current              float64  `protobuf:"fixed64,1,opt,name=current,proto3" json:"current,omitempty"`
	Rx                   float64  `protobuf:"fixed64,2,opt,name=rx,proto3" json:"rx,omitempty"`
	Tx                   float64  `protobuf:"fixed64,3,opt,name=tx,proto3" json:"tx,omitempty"`
	Temp                 float64  `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty"`
	Voltage              float64  `protobuf:"fixed64,5,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Timestamp            string   `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransceiverStatistics) Reset()         { *m = TransceiverStatistics{} }
func (m *TransceiverStatistics) String() string { return proto.CompactTextString(m) }
func (*TransceiverStatistics) ProtoMessage()    {}
func (*TransceiverStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{10}
}

func (m *TransceiverStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransceiverStatistics.Unmarshal(m, b)
}
func (m *TransceiverStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransceiverStatistics.Marshal(b, m, deterministic)
}
func (m *TransceiverStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransceiverStatistics.Merge(m, src)
}
func (m *TransceiverStatistics) XXX_Size() int {
	return xxx_messageInfo_TransceiverStatistics.Size(m)
}
func (m *TransceiverStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_TransceiverStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_TransceiverStatistics proto.InternalMessageInfo

func (m *TransceiverStatistics) GetCurrent() float64 {
	if m != nil {
		return m.Current
	}
	return 0
}

func (m *TransceiverStatistics) GetRx() float64 {
	if m != nil {
		return m.Rx
	}
	return 0
}

func (m *TransceiverStatistics) GetTx() float64 {
	if m != nil {
		return m.Tx
	}
	return 0
}

func (m *TransceiverStatistics) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *TransceiverStatistics) GetVoltage() float64 {
	if m != nil {
		return m.Voltage
	}
	return 0
}

func (m *TransceiverStatistics) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type Neighbor struct {
	ConnectInterfaceType       string   `protobuf:"bytes,1,opt,name=connect_interface_type,json=connectInterfaceType,proto3" json:"connect_interface_type,omitempty"`
	RemoteInterface            string   `protobuf:"bytes,2,opt,name=remote_interface,json=remoteInterface,proto3" json:"remote_interface,omitempty"`
	RemoteHostname             string   `protobuf:"bytes,3,opt,name=remote_hostname,json=remoteHostname,proto3" json:"remote_hostname,omitempty"`
	RemoteMgmtIpAddress        string   `protobuf:"bytes,4,opt,name=remote_mgmt_ip_address,json=remoteMgmtIpAddress,proto3" json:"remote_mgmt_ip_address,omitempty"`
	RemoteInterfaceDescription string   `protobuf:"bytes,5,opt,name=remote_interface_description,json=remoteInterfaceDescription,proto3" json:"remote_interface_description,omitempty"`
	ChassisId                  string   `protobuf:"bytes,6,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty"`
	Pvid                       string   `protobuf:"bytes,7,opt,name=pvid,proto3" json:"pvid,omitempty"`
	Lagg                       bool     `protobuf:"varint,8,opt,name=lagg,proto3" json:"lagg,omitempty"`
	Timestamp                  string   `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral       struct{} `json:"-"`
	XXX_unrecognized           []byte   `json:"-"`
	XXX_sizecache              int32    `json:"-"`
}

func (m *Neighbor) Reset()         { *m = Neighbor{} }
func (m *Neighbor) String() string { return proto.CompactTextString(m) }
func (*Neighbor) ProtoMessage()    {}
func (*Neighbor) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{11}
}

func (m *Neighbor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Neighbor.Unmarshal(m, b)
}
func (m *Neighbor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Neighbor.Marshal(b, m, deterministic)
}
func (m *Neighbor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Neighbor.Merge(m, src)
}
func (m *Neighbor) XXX_Size() int {
	return xxx_messageInfo_Neighbor.Size(m)
}
func (m *Neighbor) XXX_DiscardUnknown() {
	xxx_messageInfo_Neighbor.DiscardUnknown(m)
}

var xxx_messageInfo_Neighbor proto.InternalMessageInfo

func (m *Neighbor) GetConnectInterfaceType() string {
	if m != nil {
		return m.ConnectInterfaceType
	}
	return ""
}

func (m *Neighbor) GetRemoteInterface() string {
	if m != nil {
		return m.RemoteInterface
	}
	return ""
}

func (m *Neighbor) GetRemoteHostname() string {
	if m != nil {
		return m.RemoteHostname
	}
	return ""
}

func (m *Neighbor) GetRemoteMgmtIpAddress() string {
	if m != nil {
		return m.RemoteMgmtIpAddress
	}
	return ""
}

func (m *Neighbor) GetRemoteInterfaceDescription() string {
	if m != nil {
		return m.RemoteInterfaceDescription
	}
	return ""
}

func (m *Neighbor) GetChassisId() string {
	if m != nil {
		return m.ChassisId
	}
	return ""
}

func (m *Neighbor) GetPvid() string {
	if m != nil {
		return m.Pvid
	}
	return ""
}

func (m *Neighbor) GetLagg() bool {
	if m != nil {
		return m.Lagg
	}
	return false
}

func (m *Neighbor) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type MACEntry struct {
	HardwareAddress      string   `protobuf:"bytes,1,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty"`
	Vlan                 int64    `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Vendor               string   `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Timestamp            string   `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MACEntry) Reset()         { *m = MACEntry{} }
func (m *MACEntry) String() string { return proto.CompactTextString(m) }
func (*MACEntry) ProtoMessage()    {}
func (*MACEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{12}
}

func (m *MACEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MACEntry.Unmarshal(m, b)
}
func (m *MACEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MACEntry.Marshal(b, m, deterministic)
}
func (m *MACEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MACEntry.Merge(m, src)
}
func (m *MACEntry) XXX_Size() int {
	return xxx_messageInfo_MACEntry.Size(m)
}
func (m *MACEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MACEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MACEntry proto.InternalMessageInfo

func (m *MACEntry) GetHardwareAddress() string {
	if m != nil {
		return m.HardwareAddress
	}
	return ""
}

func (m *MACEntry) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *MACEntry) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *MACEntry) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type DHCPEntry struct {
	IpAddress            string   `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HardwareAddress      string   `protobuf:"bytes,2,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty"`
	Vendor               string   `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	Vlan                 int64    `protobuf:"varint,4,opt,name=vlan,proto3" json:"vlan,omitempty"`
	Timestamp            string   `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DHCPEntry) Reset()         { *m = DHCPEntry{} }
func (m *DHCPEntry) String() string { return proto.CompactTextString(m) }
func (*DHCPEntry) ProtoMessage()    {}
func (*DHCPEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{13}
}

func (m *DHCPEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DHCPEntry.Unmarshal(m, b)
}
func (m *DHCPEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DHCPEntry.Marshal(b, m, deterministic)
}
func (m *DHCPEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHCPEntry.Merge(m, src)
}
func (m *DHCPEntry) XXX_Size() int {
	return xxx_messageInfo_DHCPEntry.Size(m)
}
func (m *DHCPEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DHCPEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DHCPEntry proto.InternalMessageInfo

func (m *DHCPEntry) GetIpAddress() string {
	if m != nil {
		return m.IpAddress
	}
	return ""
}

func (m *DHCPEntry) GetHardwareAddress() string {
	if m != nil {
		return m.HardwareAddress
	}
	return ""
}

func (m *DHCPEntry) GetVendor() string {
	if m != nil {
		return m.Vendor
	}
	return ""
}

func (m *DHCPEntry) GetVlan() int64 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *DHCPEntry) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type InterfaceMetrics struct {
	Timestamp            string   `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InterfaceMetrics) Reset()         { *m = InterfaceMetrics{} }
func (m *InterfaceMetrics) String() string { return proto.CompactTextString(m) }
func (*InterfaceMetrics) ProtoMessage()    {}
func (*InterfaceMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{14}
}

func (m *InterfaceMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InterfaceMetrics.Unmarshal(m, b)
}
func (m *InterfaceMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InterfaceMetrics.Marshal(b, m, deterministic)
}
func (m *InterfaceMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceMetrics.Merge(m, src)
}
func (m *InterfaceMetrics) XXX_Size() int {
	return xxx_messageInfo_InterfaceMetrics.Size(m)
}
func (m *InterfaceMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceMetrics proto.InternalMessageInfo

func (m *InterfaceMetrics) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type PhysicalPortInformation struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Oid                  string   `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhysicalPortInformation) Reset()         { *m = PhysicalPortInformation{} }
func (m *PhysicalPortInformation) String() string { return proto.CompactTextString(m) }
func (*PhysicalPortInformation) ProtoMessage()    {}
func (*PhysicalPortInformation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e5645720a5411c2, []int{15}
}

func (m *PhysicalPortInformation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhysicalPortInformation.Unmarshal(m, b)
}
func (m *PhysicalPortInformation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhysicalPortInformation.Marshal(b, m, deterministic)
}
func (m *PhysicalPortInformation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhysicalPortInformation.Merge(m, src)
}
func (m *PhysicalPortInformation) XXX_Size() int {
	return xxx_messageInfo_PhysicalPortInformation.Size(m)
}
func (m *PhysicalPortInformation) XXX_DiscardUnknown() {
	xxx_messageInfo_PhysicalPortInformation.DiscardUnknown(m)
}

var xxx_messageInfo_PhysicalPortInformation proto.InternalMessageInfo

func (m *PhysicalPortInformation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PhysicalPortInformation) GetOid() string {
	if m != nil {
		return m.Oid
	}
	return ""
}

func (m *PhysicalPortInformation) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("networkelement.ModuleType", ModuleType_name, ModuleType_value)
	proto.RegisterEnum("networkelement.InterfaceStatus", InterfaceStatus_name, InterfaceStatus_value)
	proto.RegisterEnum("networkelement.InterfaceType", InterfaceType_name, InterfaceType_value)
	proto.RegisterEnum("networkelement.TransientError_Level", TransientError_Level_name, TransientError_Level_value)
	proto.RegisterType((*Element)(nil), "networkelement.Element")
	proto.RegisterType((*TransientErrors)(nil), "networkelement.TransientErrors")
	proto.RegisterType((*TransientError)(nil), "networkelement.TransientError")
	proto.RegisterType((*Module)(nil), "networkelement.Module")
	proto.RegisterType((*InterfaceStatisticsInput)(nil), "networkelement.InterfaceStatisticsInput")
	proto.RegisterType((*InterfaceStatisticsOutput)(nil), "networkelement.InterfaceStatisticsOutput")
	proto.RegisterType((*InterfaceStatistics)(nil), "networkelement.InterfaceStatistics")
	proto.RegisterType((*Interface)(nil), "networkelement.Interface")
	proto.RegisterType((*AggregatedInterface)(nil), "networkelement.AggregatedInterface")
	proto.RegisterType((*Transceiver)(nil), "networkelement.Transceiver")
	proto.RegisterType((*TransceiverStatistics)(nil), "networkelement.TransceiverStatistics")
	proto.RegisterType((*Neighbor)(nil), "networkelement.Neighbor")
	proto.RegisterType((*MACEntry)(nil), "networkelement.MACEntry")
	proto.RegisterType((*DHCPEntry)(nil), "networkelement.DHCPEntry")
	proto.RegisterType((*InterfaceMetrics)(nil), "networkelement.InterfaceMetrics")
	proto.RegisterType((*PhysicalPortInformation)(nil), "networkelement.PhysicalPortInformation")
}

func init() {
	proto.RegisterFile("git.liero.se/opentelco/go-swpx/proto/src/network_element.proto", fileDescriptor_0e5645720a5411c2)
}

var fileDescriptor_0e5645720a5411c2 = []byte{
	// 4387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3a, 0x67, 0x78, 0x5c, 0xc7,
	0x71, 0x3a, 0x74, 0x2c, 0x40, 0x60, 0xf8, 0xd8, 0x4e, 0x54, 0x21, 0x05, 0x49, 0x16, 0x25, 0x5b,
	0x20, 0xee, 0x40, 0x90, 0xa0, 0x6d, 0x29, 0x06, 0x51, 0x28, 0xd8, 0x28, 0xe7, 0x07, 0x88, 0x54,
	0x9c, 0x72, 0xd9, 0x7b, 0x6f, 0xef, 0x6e, 0x8d, 0x57, 0x56, 0xbb, 0x7b, 0x07, 0x20, 0xcd, 0xbd,
	0xd7, 0x24, 0x4e, 0x8f, 0xe2, 0xd8, 0xe9, 0xdd, 0xe9, 0x4e, 0xef, 0xbd, 0x38, 0x4e, 0xef, 0xdd,
	0xe9, 0x89, 0x9d, 0xde, 0xcb, 0x37, 0xb3, 0xef, 0xdd, 0x1d, 0x40, 0x88, 0x9f, 0xf2, 0x33, 0xbf,
	0xb0, 0x33, 0x3b, 0x3b, 0x3b, 0x7d, 0x66, 0x1f, 0x8e, 0x3d, 0xde, 0x90, 0x76, 0x3a, 0x92, 0x42,
	0xa7, 0xd3, 0x46, 0x5c, 0x4c, 0x95, 0x48, 0xac, 0x88, 0x82, 0xf4, 0x62, 0x23, 0x7d, 0xd4, 0xec,
	0xaa, 0xbd, 0x8b, 0x4a, 0xa7, 0x36, 0xbd, 0x68, 0x74, 0x70, 0x31, 0x11, 0x76, 0x37, 0xd5, 0x3b,
	0x55, 0x11, 0x89, 0x58, 0x24, 0x76, 0x9a, 0x76, 0xbc, 0x89, 0x0c, 0x9d, 0x61, 0xcf, 0x9e, 0x6b,
	0xa4, 0x69, 0x23, 0x12, 0xee, 0x5c, 0xad, 0x55, 0xbf, 0x68, 0x65, 0x2c, 0x8c, 0xe5, 0xb1, 0x72,
	0x07, 0xce, 0x9e, 0xb4, 0x9a, 0xd7, 0xeb, 0x32, 0xa8, 0xaa, 0x34, 0x92, 0xc1, 0x7e, 0x86, 0x9d,
	0xe0, 0x09, 0x8f, 0xf6, 0x8d, 0x34, 0x0e, 0x9e, 0x7a, 0xcf, 0x20, 0x1b, 0x5e, 0x76, 0x2c, 0xbd,
	0xb3, 0x6c, 0xa4, 0x99, 0x1a, 0x9b, 0xf0, 0x58, 0x14, 0x0b, 0xe7, 0x0b, 0x17, 0x46, 0xfd, 0x0e,
	0xec, 0x15, 0xd9, 0x70, 0x5b, 0x68, 0x23, 0xd3, 0xa4, 0xd8, 0x47, 0x5b, 0x39, 0xe8, 0x3d, 0xcc,
	0xc0, 0xa4, 0x75, 0xbb, 0xcb, 0xb5, 0xa8, 0xe6, 0x24, 0xfd, 0x44, 0x32, 0x99, 0xe3, 0x6f, 0x64,
	0xa4, 0x0f, 0xb0, 0x09, 0x93, 0xc4, 0xaa, 0x9a, 0xd6, 0x5e, 0x29, 0x02, 0x5b, 0x95, 0x61, 0x71,
	0x80, 0x08, 0xc7, 0x11, 0xbb, 0x49, 0xc8, 0xd5, 0xd0, 0x7b, 0x88, 0x4d, 0xca, 0xc4, 0x0a, 0x5d,
	0xe7, 0x81, 0xa8, 0xca, 0x24, 0x14, 0x7b, 0xc5, 0xc1, 0xf3, 0x85, 0x0b, 0x83, 0xfe, 0x44, 0x07,
	0xbd, 0x8a, 0x58, 0x92, 0x49, 0x6a, 0xdb, 0xe2, 0x51, 0x71, 0xe8, 0x7c, 0xe1, 0xc2, 0x88, 0x9f,
	0x83, 0xde, 0x69, 0x36, 0xd4, 0x52, 0x68, 0x90, 0xe2, 0x30, 0x5d, 0x90, 0x41, 0x78, 0x22, 0x48,
	0x13, 0xcb, 0x03, 0x5b, 0x1c, 0x71, 0x5a, 0x64, 0x20, 0xee, 0x98, 0x7d, 0x43, 0xaa, 0x8f, 0xba,
	0x9d, 0x0c, 0x44, 0xab, 0x44, 0x69, 0xc0, 0x2d, 0xea, 0xc5, 0x9c, 0x55, 0x72, 0xd8, 0x7b, 0x01,
	0xf3, 0x6a, 0x5a, 0x86, 0x0d, 0x51, 0x8d, 0x79, 0x50, 0xe5, 0x61, 0xa8, 0x85, 0x31, 0xc5, 0x31,
	0xa2, 0x02, 0xb7, 0xb3, 0xce, 0x83, 0x05, 0x87, 0xf7, 0xae, 0x32, 0xd6, 0xd1, 0xc0, 0x14, 0xc7,
	0xcf, 0xf7, 0x5f, 0x18, 0x2b, 0xdf, 0x39, 0x7d, 0xd0, 0xaf, 0xd3, 0xab, 0x39, 0x85, 0xdf, 0x43,
	0xec, 0x3d, 0xc5, 0x4e, 0xf1, 0x46, 0x43, 0x8b, 0x06, 0xb7, 0x22, 0xac, 0xf6, 0x70, 0x39, 0x46,
	0x5c, 0xee, 0x3f, 0xcc, 0x65, 0xa1, 0x43, 0xdc, 0xe5, 0x77, 0x92, 0xdf, 0x8a, 0x34, 0xde, 0x0c,
	0x1b, 0x8e, 0xd3, 0xb0, 0x15, 0x09, 0x53, 0x9c, 0x20, 0x5e, 0xa7, 0x0f, 0xf3, 0x5a, 0xa7, 0x6d,
	0x3f, 0x27, 0x43, 0xe3, 0x86, 0x5a, 0xb6, 0x85, 0x2e, 0x4e, 0x3a, 0xe3, 0x3a, 0xc8, 0x7b, 0x29,
	0x03, 0xab, 0x79, 0x62, 0xa4, 0x48, 0x6c, 0x55, 0x68, 0x9d, 0x6a, 0x53, 0x84, 0xf3, 0x85, 0x0b,
	0x63, 0xe5, 0x73, 0x87, 0x59, 0x6e, 0xe7, 0x74, 0xcb, 0x44, 0xe6, 0x4f, 0xda, 0x83, 0x88, 0xa9,
	0x55, 0x36, 0x79, 0x88, 0xc6, 0xbb, 0xcc, 0x86, 0x32, 0xa6, 0x05, 0x92, 0xf3, 0xde, 0xdb, 0x33,
	0xf5, 0x33, 0xea, 0xa9, 0x0f, 0x16, 0xd8, 0xc4, 0xc1, 0x2d, 0xcf, 0x63, 0x03, 0x41, 0x1a, 0xba,
	0x20, 0x1f, 0xf4, 0x69, 0x8d, 0x01, 0x10, 0x0b, 0x63, 0x78, 0x43, 0xe4, 0x01, 0x9e, 0x81, 0xde,
	0x49, 0x36, 0x18, 0xf0, 0x96, 0x11, 0x59, 0x54, 0x3b, 0xc0, 0x7b, 0x21, 0x1b, 0x8c, 0x44, 0x5b,
	0x44, 0x14, 0xc2, 0x13, 0xe5, 0x07, 0x6e, 0x2f, 0xcd, 0xf4, 0x1a, 0xd2, 0xfa, 0xee, 0xc8, 0xd4,
	0xf3, 0xd8, 0x20, 0xc1, 0xde, 0x08, 0x1b, 0x58, 0xdd, 0x58, 0xd9, 0x84, 0x3b, 0x70, 0x75, 0x73,
	0xc1, 0xdf, 0x80, 0x82, 0x37, 0xca, 0x06, 0x57, 0x16, 0xb6, 0x17, 0xd6, 0xa0, 0x6f, 0xea, 0xfd,
	0xfd, 0x6c, 0xc8, 0x59, 0xdf, 0x9b, 0x60, 0x7d, 0x32, 0xcc, 0x04, 0xee, 0x93, 0x21, 0xaa, 0x60,
	0xa2, 0xd4, 0x92, 0xac, 0x83, 0x3e, 0xad, 0x11, 0x47, 0x01, 0xec, 0xe4, 0xa4, 0xb5, 0x77, 0x9e,
	0x8d, 0x85, 0xc2, 0x04, 0x5a, 0x2a, 0x0a, 0x60, 0x97, 0x6f, 0xbd, 0x28, 0x6f, 0x9a, 0x0d, 0xd8,
	0x7d, 0x25, 0x28, 0xc7, 0x26, 0xca, 0x67, 0x8f, 0xf6, 0xfe, 0xf6, 0xbe, 0x12, 0x3e, 0xd1, 0x79,
	0xf7, 0xb3, 0x63, 0x46, 0x68, 0xc9, 0xa3, 0x6a, 0xd2, 0x8a, 0x6b, 0x42, 0x53, 0xee, 0x61, 0x0e,
	0x13, 0x72, 0x83, 0x70, 0xde, 0x3d, 0x8c, 0xd5, 0x52, 0xae, 0xc3, 0x2a, 0xb1, 0x76, 0x49, 0x38,
	0x4a, 0x18, 0xe4, 0xe4, 0x01, 0xeb, 0xaf, 0xa5, 0x71, 0x96, 0x83, 0xb8, 0xf4, 0xee, 0x62, 0xa3,
	0x41, 0x24, 0x64, 0x95, 0xfc, 0xe2, 0x32, 0x70, 0x04, 0x11, 0x8b, 0xe8, 0x9b, 0xfb, 0xd8, 0xb8,
	0x34, 0xa6, 0x25, 0xf2, 0x1b, 0x5d, 0x1a, 0x8e, 0x11, 0x2e, 0xbb, 0xf0, 0x1c, 0x1b, 0xbb, 0x35,
	0x05, 0x59, 0xdc, 0x4d, 0x3e, 0x8f, 0x0d, 0x48, 0x2b, 0xe2, 0xe2, 0xb8, 0x33, 0x0e, 0xae, 0xbd,
	0x29, 0x36, 0x1e, 0xf3, 0xa4, 0x55, 0xe7, 0x81, 0x6d, 0x69, 0x11, 0x16, 0x8f, 0x39, 0x4d, 0x7a,
	0x71, 0xc8, 0xb8, 0x2d, 0x92, 0x30, 0xd5, 0x55, 0xb2, 0xed, 0x84, 0x63, 0xec, 0x50, 0x1b, 0x3c,
	0x16, 0x53, 0x1f, 0x2d, 0xb0, 0x62, 0x27, 0x9f, 0xb6, 0x2c, 0xb7, 0xd2, 0x58, 0x19, 0x98, 0xd5,
	0x44, 0xb5, 0xa8, 0xac, 0x28, 0x1e, 0xec, 0x08, 0x6b, 0xc8, 0x77, 0xfd, 0x7e, 0x0e, 0x62, 0x54,
	0xd5, 0xf6, 0xad, 0x30, 0xe4, 0xc1, 0x7e, 0xdf, 0x01, 0x48, 0xdf, 0x4a, 0x64, 0xc0, 0x8d, 0x25,
	0x2f, 0xf6, 0xfb, 0x39, 0xe8, 0xdd, 0xcd, 0x46, 0x6b, 0x3a, 0xe5, 0x21, 0xed, 0x0d, 0xd0, 0x5e,
	0x17, 0x81, 0xbb, 0x71, 0x2b, 0xb2, 0xee, 0xe4, 0xa0, 0xdb, 0xed, 0x20, 0x30, 0x63, 0x15, 0x06,
	0xad, 0x21, 0x5f, 0xf5, 0xfb, 0x19, 0x84, 0xf8, 0x2c, 0xa5, 0x86, 0x1d, 0xde, 0x41, 0xe8, 0xbd,
	0x40, 0x07, 0x79, 0x0e, 0x8f, 0x38, 0x76, 0x81, 0x0e, 0xb2, 0xe4, 0xfc, 0x70, 0x81, 0xdd, 0x79,
	0x84, 0xc6, 0x9b, 0x2d, 0xfb, 0xff, 0x56, 0xe5, 0xa9, 0x0f, 0x14, 0xd8, 0x89, 0x23, 0x74, 0xf2,
	0x1e, 0x67, 0x83, 0x12, 0x3d, 0x49, 0xba, 0x8c, 0x95, 0x2f, 0x3c, 0x6b, 0xb9, 0x3e, 0xe4, 0x79,
	0xdf, 0x1d, 0xf3, 0x16, 0xd8, 0x50, 0x4a, 0x76, 0x21, 0xa5, 0xc7, 0xca, 0x0f, 0x3f, 0x07, 0x06,
	0xce, 0x90, 0x7e, 0x76, 0x10, 0x45, 0xd6, 0xc2, 0xa0, 0x3d, 0x9d, 0x7d, 0x32, 0x68, 0xea, 0x99,
	0x11, 0x36, 0xda, 0x39, 0x8d, 0x69, 0xd9, 0xdb, 0x21, 0xc2, 0xac, 0x83, 0x8f, 0xf7, 0x14, 0xfd,
	0x10, 0x3d, 0xe0, 0x1a, 0x6a, 0xe6, 0x01, 0x02, 0x10, 0xcb, 0x23, 0xc9, 0x4d, 0x5e, 0xe0, 0x08,
	0x78, 0x0e, 0x95, 0xe3, 0x6e, 0x36, 0xda, 0xdc, 0xcd, 0x33, 0x6e, 0xd0, 0xe5, 0x78, 0x07, 0xe1,
	0x95, 0xb2, 0xba, 0x32, 0x44, 0x75, 0xe5, 0x9e, 0x67, 0xd5, 0xbb, 0xa7, 0xb4, 0x5c, 0x63, 0xe3,
	0x3c, 0x8c, 0x65, 0x52, 0x35, 0x96, 0xdb, 0x96, 0x73, 0xd1, 0xc4, 0xad, 0xdd, 0xe3, 0x80, 0xc9,
	0x5a, 0xc6, 0x1f, 0xa3, 0x43, 0x0e, 0xf0, 0x36, 0x98, 0x97, 0x2a, 0xa1, 0xa9, 0x3f, 0xf3, 0x28,
	0xe7, 0x34, 0xf2, 0xdc, 0x38, 0x1d, 0xef, 0x39, 0x9a, 0xf1, 0x7b, 0x8c, 0x8d, 0x47, 0xdc, 0xd8,
	0x6a, 0xd0, 0xe4, 0x49, 0x43, 0x84, 0x54, 0x9b, 0xc6, 0xca, 0x67, 0xa7, 0xdd, 0xf8, 0x35, 0x9d,
	0x8f, 0x5f, 0xd3, 0xdb, 0xf9, 0xf8, 0xe5, 0x8f, 0x21, 0xfd, 0xa2, 0x23, 0x47, 0xdb, 0x1a, 0x25,
	0x44, 0x48, 0x15, 0xa9, 0xdf, 0x77, 0x00, 0xb5, 0xd0, 0x96, 0x8a, 0xc4, 0x5e, 0x56, 0x8e, 0x32,
	0x08, 0xeb, 0x62, 0x6c, 0x5b, 0x54, 0x87, 0xfa, 0x7d, 0x5c, 0x7a, 0x57, 0xd9, 0x20, 0xaa, 0x60,
	0xa8, 0xf0, 0x1c, 0xd1, 0xe8, 0x8f, 0x08, 0x1f, 0xdf, 0x9d, 0xf0, 0x1e, 0x63, 0x63, 0xd4, 0x56,
	0x03, 0xd1, 0x69, 0xd6, 0x63, 0xe5, 0xbb, 0x8e, 0xec, 0x53, 0x8e, 0xc4, 0xef, 0xa5, 0xf7, 0x2e,
	0xb1, 0x91, 0x44, 0xc8, 0x46, 0xb3, 0x96, 0xea, 0xac, 0x8d, 0x17, 0x0f, 0x9f, 0xdd, 0xc8, 0xf6,
	0xfd, 0x0e, 0xa5, 0xb7, 0xc4, 0x8e, 0xf7, 0xd4, 0xe1, 0xaa, 0xe5, 0xb5, 0x48, 0x14, 0x8f, 0x53,
	0xc3, 0xbe, 0xe5, 0xf8, 0xfa, 0xc2, 0xe2, 0x72, 0x62, 0xf5, 0xbe, 0x3f, 0xd9, 0xad, 0xd3, 0xdb,
	0x78, 0xc0, 0x9b, 0x67, 0x2c, 0x6c, 0x06, 0x2a, 0x3b, 0xee, 0x1d, 0x3d, 0x29, 0x2d, 0x3d, 0xb1,
	0x58, 0x71, 0xe7, 0x47, 0x91, 0xd8, 0x9d, 0x3c, 0xcd, 0x86, 0x82, 0x34, 0xa9, 0xcb, 0x46, 0xf1,
	0x84, 0xb3, 0xac, 0x83, 0x70, 0x4a, 0xed, 0x0e, 0x95, 0x59, 0x50, 0x9c, 0x24, 0x33, 0x77, 0x87,
	0xcd, 0xcc, 0xe3, 0x9c, 0x9d, 0x71, 0x87, 0xb0, 0xfe, 0x6f, 0xbb, 0x21, 0xba, 0x42, 0x33, 0x74,
	0xf1, 0x14, 0xd9, 0xe1, 0xa1, 0xe9, 0x43, 0xa3, 0xf5, 0xe2, 0xd1, 0xe4, 0xfe, 0xb3, 0xf1, 0xf1,
	0x1e, 0x64, 0xfd, 0x4f, 0xa7, 0xa6, 0x78, 0x9a, 0xd8, 0x9d, 0x38, 0xcc, 0xee, 0xe5, 0x9b, 0x5b,
	0x3e, 0xee, 0x7b, 0x2f, 0x66, 0xc7, 0x82, 0x34, 0x49, 0x44, 0x80, 0x29, 0x6d, 0xc2, 0xb0, 0x78,
	0x86, 0x0e, 0x9c, 0x39, 0x6c, 0x89, 0x6c, 0x80, 0xf7, 0xc7, 0x3b, 0xd4, 0x5b, 0x61, 0x38, 0xf5,
	0x91, 0x02, 0x3b, 0x71, 0xc4, 0x1c, 0x88, 0x03, 0xad, 0xd2, 0x32, 0xd5, 0xd2, 0xee, 0x67, 0x15,
	0xba, 0x03, 0x63, 0x97, 0x8c, 0xb1, 0x03, 0xbb, 0x11, 0x88, 0xd6, 0x88, 0xa3, 0x44, 0xce, 0xc6,
	0x0a, 0xca, 0xd4, 0x3b, 0xd9, 0x08, 0xa6, 0x4a, 0x75, 0x47, 0xec, 0x67, 0x95, 0x61, 0x18, 0xe1,
	0x97, 0x89, 0x7d, 0xf4, 0x40, 0x66, 0x5f, 0x57, 0x12, 0x32, 0x08, 0xab, 0x45, 0xe7, 0x89, 0x92,
	0xcd, 0x0c, 0x5d, 0xc4, 0xa1, 0xd9, 0x78, 0xf8, 0xff, 0x30, 0x1b, 0x4f, 0xbd, 0xaf, 0x9f, 0x8d,
	0xf5, 0x44, 0xb1, 0xf7, 0x20, 0x9b, 0xc8, 0xec, 0x90, 0x6a, 0x37, 0x7f, 0xb8, 0x52, 0x78, 0xac,
	0x83, 0xcd, 0x67, 0x90, 0x30, 0x8c, 0x49, 0xd3, 0x11, 0x1f, 0x97, 0x28, 0xb9, 0xeb, 0xeb, 0x99,
	0xaa, 0x19, 0xd4, 0x31, 0xc0, 0x40, 0x8f, 0x01, 0x9e, 0xcf, 0x8e, 0x53, 0xb2, 0xd4, 0x85, 0xae,
	0x86, 0xd2, 0x58, 0x9e, 0x04, 0x22, 0x53, 0x18, 0xf2, 0x8d, 0xa5, 0x0c, 0xef, 0xdd, 0xcb, 0xd8,
	0x2e, 0x6f, 0x8b, 0x48, 0x24, 0x0d, 0xdb, 0xcc, 0x74, 0xef, 0xc1, 0xdc, 0x3a, 0x52, 0x0d, 0x1f,
	0x31, 0x52, 0x9d, 0x63, 0x63, 0x8a, 0x6b, 0x9b, 0x93, 0xb8, 0xd9, 0x89, 0x21, 0x2a, 0x23, 0x78,
	0x94, 0x79, 0xdd, 0xc9, 0x45, 0x26, 0x8d, 0x6a, 0xc8, 0x6d, 0x3e, 0x4b, 0x1d, 0x3f, 0xb0, 0xb3,
	0xc4, 0xad, 0xf0, 0x5e, 0x94, 0x57, 0x16, 0x46, 0xc6, 0x7e, 0xf0, 0x36, 0x85, 0xe1, 0xd6, 0xda,
	0x32, 0xcd, 0x46, 0xf2, 0x87, 0x64, 0x71, 0x8c, 0xce, 0x7b, 0xd3, 0x9d, 0x97, 0xe5, 0x42, 0xb6,
	0xf0, 0x3b, 0x34, 0x53, 0xcf, 0x14, 0xd8, 0xa9, 0x23, 0x19, 0xd2, 0x93, 0xac, 0xa5, 0xb5, 0x48,
	0x5c, 0x8b, 0x2d, 0xf8, 0x39, 0x88, 0x23, 0xaf, 0x76, 0x9d, 0xaa, 0xe0, 0xf7, 0xe9, 0x3d, 0x84,
	0xed, 0x1e, 0xb9, 0xa6, 0xe0, 0xf7, 0xd9, 0x3d, 0x72, 0x8b, 0x88, 0x15, 0xb9, 0xa5, 0xe0, 0xd3,
	0x9a, 0x9e, 0x84, 0x69, 0x64, 0x71, 0x8a, 0x1f, 0x74, 0xdc, 0x32, 0xf0, 0xf6, 0xe1, 0x37, 0xf5,
	0xb1, 0x3e, 0x36, 0x92, 0x57, 0x33, 0xef, 0x12, 0x3b, 0x9d, 0x85, 0x4a, 0xf7, 0xa5, 0xd5, 0x1b,
	0x48, 0x27, 0xb3, 0xdd, 0x03, 0x2d, 0x0c, 0x2b, 0x8c, 0x16, 0x71, 0x6a, 0x45, 0xf7, 0x50, 0x96,
	0x46, 0x93, 0x0e, 0xdf, 0xcd, 0xc0, 0x87, 0x58, 0x86, 0xaa, 0x76, 0xde, 0xdb, 0x2e, 0xe2, 0x26,
	0x1c, 0xfa, 0x89, 0xfc, 0xd5, 0x3d, 0xcb, 0x4e, 0x67, 0x84, 0x71, 0x23, 0xb6, 0x55, 0xa9, 0x3a,
	0x03, 0xae, 0x8b, 0xc5, 0x13, 0x6e, 0x77, 0xbd, 0x11, 0xdb, 0x55, 0x95, 0x4f, 0xba, 0x2f, 0x61,
	0x77, 0x1f, 0x16, 0xa4, 0xda, 0xdb, 0xc9, 0x5d, 0x94, 0x9e, 0x3d, 0x24, 0xd4, 0x52, 0x4f, 0x63,
	0xc7, 0xf9, 0xaf, 0xc9, 0x8d, 0x91, 0x06, 0x07, 0x89, 0xcc, 0x58, 0x19, 0x66, 0x95, 0xde, 0x1e,
	0xaa, 0x2d, 0xc3, 0x2c, 0x4a, 0x69, 0x8d, 0xb8, 0x88, 0x37, 0x1a, 0x14, 0x96, 0x23, 0x3e, 0xad,
	0x0f, 0x9a, 0x7c, 0xf4, 0xb0, 0xc9, 0x5f, 0xc5, 0x46, 0xf2, 0x06, 0x80, 0xb6, 0x6b, 0x72, 0x1d,
	0xd2, 0x37, 0x84, 0x5c, 0x43, 0x67, 0xeb, 0xc9, 0x1c, 0xdf, 0x33, 0xc7, 0xb7, 0x23, 0x9e, 0x64,
	0x13, 0x0c, 0xad, 0x9f, 0x35, 0x71, 0x0f, 0x08, 0x30, 0x70, 0x58, 0x80, 0xf7, 0x16, 0xd8, 0x68,
	0xa7, 0x87, 0xa0, 0xce, 0x3d, 0xe6, 0x75, 0x97, 0x8f, 0xca, 0x8e, 0x51, 0x8f, 0x92, 0xb0, 0xef,
	0x68, 0x09, 0x6f, 0x53, 0x46, 0x48, 0xf2, 0x81, 0x1e, 0xc9, 0x0f, 0x48, 0x38, 0x78, 0x58, 0xc2,
	0x19, 0x06, 0x1d, 0xff, 0xac, 0x0b, 0xab, 0x31, 0x5f, 0x0e, 0x9c, 0x28, 0x1c, 0x3e, 0xf1, 0x24,
	0x3b, 0x53, 0x69, 0xee, 0x1b, 0x19, 0xf0, 0xa8, 0x92, 0x6a, 0xbb, 0x9a, 0xd4, 0x53, 0x1d, 0xbb,
	0x6f, 0x15, 0xf9, 0xeb, 0xb0, 0xd0, 0xf3, 0x3a, 0x04, 0xd6, 0x9f, 0xca, 0x30, 0x53, 0x04, 0x97,
	0x38, 0xaf, 0xb4, 0x79, 0xd4, 0xea, 0x3c, 0x76, 0x09, 0x78, 0xe4, 0x22, 0x63, 0xdd, 0x77, 0x20,
	0xbe, 0x50, 0x2b, 0x9b, 0x37, 0x97, 0x7d, 0xb8, 0xc3, 0x1b, 0x66, 0xfd, 0x2b, 0x0b, 0xf8, 0x6a,
	0x3d, 0xc6, 0x46, 0x57, 0x37, 0xb6, 0x97, 0xfd, 0x95, 0x85, 0xc5, 0x65, 0xe8, 0x7b, 0x64, 0x8f,
	0x4d, 0x1e, 0x9a, 0xad, 0xf0, 0x54, 0x2b, 0x31, 0xc2, 0xc2, 0x1d, 0xde, 0x10, 0xeb, 0x6b, 0x29,
	0x28, 0xe0, 0xa3, 0x37, 0x4c, 0x77, 0x13, 0xe8, 0xf3, 0xc6, 0xd8, 0xb0, 0x15, 0xc6, 0xca, 0xa4,
	0x01, 0xfd, 0x08, 0xb4, 0x92, 0x9d, 0x04, 0x77, 0x06, 0x3c, 0xc6, 0x86, 0x42, 0xd4, 0x21, 0x81,
	0x41, 0x6f, 0x82, 0xb1, 0x24, 0xb5, 0x15, 0x9c, 0x7f, 0x13, 0x0b, 0x43, 0x9e, 0xc7, 0x26, 0xa2,
	0x74, 0x57, 0xe8, 0x35, 0xbe, 0x2f, 0xf4, 0x12, 0xd2, 0x0f, 0x3f, 0xf2, 0xa1, 0xfb, 0xd8, 0xb1,
	0x83, 0x89, 0x79, 0x96, 0x9d, 0xce, 0xd8, 0x1d, 0x4a, 0x67, 0xb8, 0x03, 0x85, 0x4a, 0x6d, 0x53,
	0x68, 0x28, 0x78, 0x93, 0x6c, 0x4c, 0x8b, 0x46, 0x2b, 0xe2, 0xba, 0x34, 0x5f, 0x2e, 0x3b, 0x99,
	0x9a, 0x61, 0x93, 0x80, 0x7e, 0x12, 0x23, 0x4c, 0x9e, 0x2a, 0xcf, 0xc1, 0x00, 0xea, 0xaa, 0xeb,
	0xc1, 0xfc, 0x95, 0x2b, 0x7b, 0xe5, 0x39, 0x18, 0x44, 0x29, 0x04, 0xf2, 0x48, 0x84, 0x5d, 0x34,
	0x31, 0x0f, 0x42, 0x27, 0x99, 0x34, 0xe9, 0xfc, 0xfc, 0x4c, 0x79, 0x36, 0xc3, 0x0d, 0x7b, 0x27,
	0x19, 0x64, 0xb8, 0x4b, 0xdb, 0xe9, 0x8e, 0x48, 0xae, 0xb5, 0x0c, 0x8c, 0x78, 0xa7, 0xd8, 0xf1,
	0x0c, 0x3b, 0x47, 0x58, 0x1f, 0x6d, 0x30, 0x8a, 0xd2, 0x64, 0xe8, 0xcb, 0xeb, 0x3c, 0x01, 0x86,
	0xd2, 0x18, 0xcb, 0xf5, 0x1a, 0x4f, 0x60, 0xcc, 0x3b, 0xce, 0x8e, 0xe1, 0xe0, 0x29, 0xd2, 0xa4,
	0x34, 0xb3, 0x5e, 0x93, 0x16, 0xc6, 0x7b, 0x50, 0xf3, 0x0e, 0x75, 0xcc, 0x03, 0x36, 0xde, 0xdc,
	0x57, 0x42, 0xe3, 0xe8, 0x9a, 0x88, 0x08, 0x26, 0xd0, 0xe0, 0xf5, 0x30, 0x94, 0x30, 0x89, 0xab,
	0x88, 0xab, 0x1a, 0x00, 0xae, 0x4c, 0x18, 0x05, 0x70, 0x1c, 0x9d, 0x19, 0x9a, 0x12, 0x78, 0xe8,
	0x1f, 0x51, 0x82, 0x13, 0xa8, 0x68, 0x8d, 0x1b, 0x19, 0xac, 0x6e, 0x2d, 0x6d, 0xc0, 0x49, 0x94,
	0x49, 0x69, 0x19, 0x73, 0xbd, 0x4f, 0x88, 0x53, 0x68, 0x59, 0xa5, 0x53, 0x55, 0x49, 0x65, 0x62,
	0xb7, 0x53, 0xfa, 0xb3, 0x45, 0x2d, 0x0b, 0x4e, 0x23, 0x33, 0xa5, 0x14, 0x9c, 0x41, 0xb5, 0xf3,
	0xef, 0x80, 0x6b, 0x69, 0xaa, 0x6a, 0x3c, 0xd8, 0x81, 0x22, 0x6e, 0x8b, 0x34, 0x81, 0x3b, 0x51,
	0xee, 0xdc, 0x7a, 0xb3, 0x24, 0xf7, 0x59, 0x94, 0x28, 0x31, 0x52, 0xc1, 0x5d, 0x24, 0x5b, 0x24,
	0x15, 0xdc, 0x4d, 0xd1, 0x13, 0x59, 0xcd, 0xe1, 0x1e, 0x27, 0xe6, 0x2c, 0xdc, 0x8b, 0x0b, 0x24,
	0x3b, 0x87, 0x71, 0x51, 0xd7, 0x3c, 0x16, 0xbe, 0x88, 0xf8, 0x3e, 0x9c, 0x47, 0x62, 0x6d, 0xca,
	0xb3, 0x65, 0xb8, 0x0f, 0x39, 0x28, 0xae, 0x39, 0x4c, 0xa1, 0x07, 0xb9, 0x0e, 0x12, 0x61, 0xe1,
	0x7e, 0x3c, 0xe0, 0xd6, 0x95, 0xa8, 0x65, 0xe0, 0x01, 0xe4, 0xc4, 0x6d, 0x0c, 0x0f, 0x22, 0x51,
	0x2c, 0x53, 0xf4, 0xeb, 0xf3, 0x90, 0x8b, 0x49, 0x91, 0xfe, 0x21, 0x44, 0xef, 0x95, 0xe7, 0x54,
	0x24, 0xe0, 0x42, 0x8f, 0x67, 0xca, 0x51, 0x14, 0xc0, 0xc3, 0x68, 0xa5, 0x28, 0x0d, 0x78, 0xb4,
	0xcd, 0xa3, 0x1d, 0x78, 0x84, 0x1c, 0x15, 0x87, 0x66, 0x69, 0x4f, 0xc2, 0xf3, 0xd1, 0xbb, 0x5d,
	0xc9, 0xb6, 0x84, 0x6e, 0xcb, 0x40, 0xc0, 0x0b, 0xf0, 0xbe, 0xf6, 0xec, 0x1c, 0x3c, 0x8a, 0xe2,
	0x35, 0x8d, 0x91, 0x30, 0x8d, 0xb7, 0x35, 0xa5, 0x52, 0x12, 0x2e, 0xe2, 0x12, 0x07, 0xaf, 0x18,
	0x66, 0x70, 0x9f, 0xf3, 0x68, 0x0e, 0x4a, 0x78, 0x0b, 0x49, 0x53, 0xe1, 0xb6, 0x09, 0x65, 0xba,
	0x05, 0xc1, 0x1b, 0xdb, 0x30, 0xeb, 0x8d, 0xb3, 0x11, 0xbc, 0x72, 0x35, 0x90, 0x0a, 0x2e, 0x39,
	0x37, 0xa5, 0xea, 0x86, 0xfb, 0x16, 0x0a, 0x73, 0xde, 0x09, 0x36, 0x89, 0x88, 0x75, 0x7c, 0x1c,
	0xe3, 0x33, 0x23, 0xd5, 0x70, 0x19, 0xf9, 0x49, 0x21, 0xc4, 0xfc, 0x4c, 0xb9, 0x54, 0x86, 0x2b,
	0x18, 0x2b, 0x75, 0x59, 0xd3, 0x62, 0x31, 0x8b, 0x95, 0x79, 0x0c, 0x61, 0x12, 0xa8, 0x93, 0x4c,
	0x70, 0x15, 0x1d, 0xde, 0x55, 0x87, 0x36, 0xb2, 0x56, 0x08, 0x2f, 0x24, 0x9b, 0xd6, 0x23, 0x9e,
	0x20, 0xcb, 0x59, 0x78, 0xd1, 0x01, 0x78, 0x0e, 0x5e, 0x8c, 0x12, 0x07, 0x81, 0x5d, 0x8e, 0x5b,
	0x11, 0x3c, 0x86, 0xb7, 0xd7, 0xb9, 0xb1, 0xcb, 0x94, 0x7b, 0x8f, 0xa3, 0x9a, 0xd2, 0x84, 0x09,
	0x7c, 0x1c, 0x59, 0xa6, 0x54, 0x82, 0x97, 0x38, 0x13, 0x5d, 0x86, 0x05, 0x24, 0x6d, 0x5c, 0x99,
	0x99, 0xe5, 0xf6, 0xf2, 0xa5, 0x1d, 0xb8, 0xd6, 0x05, 0xcb, 0x71, 0x0d, 0x16, 0xf1, 0xe4, 0xd3,
	0xe8, 0x86, 0x25, 0x54, 0xbb, 0xc3, 0x72, 0xe5, 0x29, 0x58, 0xa6, 0x0b, 0x33, 0x6d, 0x56, 0x7a,
	0xd5, 0x2d, 0xc1, 0x75, 0x8c, 0x3a, 0x59, 0x8b, 0x67, 0xaf, 0xcc, 0x28, 0xae, 0x51, 0x65, 0x78,
	0x02, 0xad, 0x2e, 0x4c, 0x90, 0x26, 0xb0, 0x4a, 0x75, 0x29, 0x32, 0xbb, 0xf0, 0x52, 0x44, 0xa2,
	0x60, 0x06, 0x5e, 0x96, 0x2f, 0x5b, 0xb0, 0x96, 0x25, 0x4f, 0x08, 0xeb, 0x68, 0x79, 0xa9, 0xb6,
	0x76, 0xa5, 0x0d, 0x9a, 0xb0, 0x81, 0x78, 0x6d, 0x74, 0x0d, 0x36, 0x49, 0x79, 0x1b, 0xaf, 0xa5,
	0x0d, 0xac, 0xc4, 0x50, 0x71, 0x31, 0x3b, 0x03, 0x2f, 0x47, 0x39, 0x42, 0x33, 0x73, 0xad, 0x95,
	0x84, 0x91, 0x00, 0x1f, 0xf1, 0x35, 0x13, 0xc0, 0x16, 0x72, 0xe7, 0x66, 0x3f, 0x09, 0x60, 0x1b,
	0x71, 0x41, 0xa2, 0xe1, 0xc9, 0x9e, 0x48, 0x9b, 0x5b, 0xb2, 0x1a, 0x6e, 0x90, 0x88, 0x2a, 0xd2,
	0x06, 0x6e, 0x52, 0x60, 0x68, 0xae, 0xe0, 0x29, 0x14, 0x01, 0xbd, 0xbb, 0x98, 0x44, 0x06, 0x3e,
	0x9e, 0x8a, 0x56, 0x6a, 0x6c, 0x85, 0x87, 0xf0, 0x0a, 0x57, 0x55, 0x75, 0x8c, 0xc0, 0x27, 0xa0,
	0xca, 0x5d, 0xdf, 0xad, 0x57, 0x56, 0xe1, 0x13, 0x91, 0xc9, 0x5e, 0xb9, 0x34, 0x0b, 0x9f, 0x44,
	0xec, 0x42, 0x13, 0xc1, 0x27, 0x53, 0xee, 0xd0, 0xb2, 0xea, 0x2a, 0x83, 0x89, 0xe0, 0x53, 0x70,
	0xd5, 0xc6, 0x15, 0xc7, 0x58, 0xca, 0x65, 0x5a, 0xf4, 0x57, 0x2a, 0xab, 0x89, 0x85, 0x1a, 0xde,
	0x13, 0xef, 0x6b, 0x89, 0xb9, 0x12, 0x20, 0xd0, 0x4e, 0x65, 0x20, 0x96, 0xd7, 0x21, 0x44, 0xe1,
	0x08, 0x58, 0x79, 0x6a, 0x13, 0x44, 0x0f, 0xb4, 0x05, 0x75, 0xb4, 0x91, 0x23, 0x4c, 0x02, 0xae,
	0xa0, 0x81, 0xea, 0x12, 0xbc, 0xd9, 0x16, 0x7a, 0x55, 0x41, 0x93, 0x32, 0xd6, 0xc6, 0x98, 0x48,
	0x12, 0xb9, 0x72, 0x1b, 0xaf, 0xb4, 0x12, 0x09, 0xaf, 0xcc, 0x36, 0x56, 0x63, 0x0e, 0x3b, 0xde,
	0x69, 0xe6, 0x29, 0xe5, 0x62, 0x3b, 0x92, 0xc9, 0x4e, 0x66, 0xd9, 0x08, 0xb9, 0x4b, 0x85, 0xac,
	0x16, 0xb1, 0xb8, 0xc5, 0x3d, 0x70, 0xc4, 0x77, 0x21, 0xc1, 0x80, 0x37, 0x96, 0x07, 0x3b, 0xdb,
	0xe9, 0x16, 0xfe, 0x81, 0x14, 0x0b, 0x55, 0xf6, 0xff, 0x83, 0xce, 0x2c, 0x05, 0x0a, 0xbd, 0x11,
	0xab, 0x00, 0x9e, 0xa6, 0x08, 0x22, 0x06, 0x0b, 0x36, 0x06, 0x4d, 0x11, 0x94, 0x19, 0x62, 0x45,
	0xd6, 0x84, 0x06, 0x83, 0x56, 0xb2, 0x78, 0x99, 0x45, 0x2b, 0x35, 0x64, 0x83, 0xd7, 0xa4, 0x0b,
	0x47, 0x34, 0x4c, 0x8b, 0x72, 0x1d, 0xb7, 0xdb, 0x59, 0xfc, 0xd4, 0x61, 0xd7, 0x45, 0xf9, 0x15,
	0xd8, 0xcb, 0x2a, 0x4c, 0x1c, 0x29, 0xd8, 0x47, 0xd1, 0xf6, 0xca, 0x73, 0xcd, 0x56, 0x62, 0xaf,
	0xeb, 0xb4, 0xa5, 0xe0, 0x53, 0x51, 0x78, 0x7a, 0x54, 0xa8, 0x27, 0x90, 0xc1, 0xa7, 0x91, 0x32,
	0x98, 0x7d, 0x91, 0xe0, 0x6d, 0x01, 0x9f, 0x4e, 0x75, 0x9d, 0x1b, 0x0b, 0x9f, 0x81, 0xa5, 0x5b,
	0x2a, 0xf8, 0x4c, 0x2c, 0x3c, 0x61, 0x1a, 0x98, 0x45, 0x7c, 0x14, 0xaf, 0xf3, 0x20, 0xc2, 0x0e,
	0x09, 0xaf, 0xf2, 0x8a, 0xec, 0x44, 0x07, 0x8d, 0x0d, 0xd3, 0x58, 0x2d, 0x78, 0x0c, 0xaf, 0x2e,
	0x78, 0xa7, 0x7b, 0x0e, 0x3c, 0xa9, 0x32, 0xfc, 0x6b, 0x0a, 0xde, 0x71, 0x36, 0xce, 0x4b, 0xe5,
	0x75, 0x95, 0x47, 0xf9, 0x6b, 0x0b, 0xde, 0x18, 0x1b, 0xb2, 0x2d, 0xca, 0xab, 0xd7, 0x11, 0x10,
	0xa4, 0xf5, 0xba, 0x10, 0xf0, 0x7a, 0x6c, 0xe8, 0xfd, 0x81, 0x30, 0xf0, 0x86, 0x82, 0x77, 0x92,
	0x4d, 0x72, 0x1b, 0x6f, 0xb5, 0x6a, 0xdd, 0xf2, 0xf1, 0x46, 0x22, 0x8e, 0xca, 0x38, 0xf8, 0xc0,
	0x9b, 0x70, 0x64, 0x18, 0x89, 0x66, 0xa5, 0x22, 0xf0, 0xcd, 0x05, 0x6f, 0x82, 0x8d, 0x22, 0xb8,
	0x47, 0xf0, 0x5b, 0x0a, 0xde, 0x29, 0x06, 0xa1, 0x6c, 0x48, 0x8b, 0x93, 0xcc, 0xae, 0xd0, 0x91,
	0x4c, 0x04, 0xbc, 0x95, 0x18, 0xc7, 0x22, 0x94, 0x7c, 0x9d, 0xcb, 0x28, 0x8b, 0x94, 0xb7, 0xd1,
	0xc5, 0xa1, 0x8d, 0xe1, 0xed, 0x6e, 0x15, 0x24, 0xf0, 0x0e, 0x62, 0x28, 0xd5, 0x4a, 0xaa, 0x77,
	0xb9, 0x0e, 0xe1, 0x9d, 0x05, 0x8f, 0xb1, 0xc1, 0x98, 0xe2, 0xf9, 0x5d, 0x74, 0x37, 0x96, 0x83,
	0xd2, 0xec, 0xd5, 0x4b, 0xf0, 0x6e, 0x92, 0x4b, 0xd6, 0xab, 0x0d, 0x93, 0xc0, 0x67, 0x15, 0xbc,
	0x13, 0x6c, 0x22, 0x6c, 0xd7, 0xfc, 0x20, 0x58, 0xe7, 0x01, 0x4d, 0x16, 0xf0, 0xd9, 0x4e, 0x1a,
	0x42, 0xf6, 0x58, 0xed, 0x73, 0x7a, 0x68, 0x3b, 0x26, 0x7b, 0x0f, 0x4e, 0x12, 0x98, 0xfc, 0x79,
	0xfd, 0xfd, 0x5c, 0x42, 0xc4, 0x2a, 0x32, 0xdb, 0xce, 0x68, 0x9f, 0x47, 0x42, 0x1a, 0xad, 0xe0,
	0xf3, 0xc9, 0xbc, 0x9d, 0xa0, 0xc7, 0xc0, 0xfa, 0x82, 0x02, 0xfa, 0xa8, 0x83, 0x5a, 0xe9, 0xb6,
	0xb5, 0x2f, 0x2c, 0x78, 0xa3, 0x6c, 0x40, 0xa2, 0x02, 0x5f, 0x54, 0xf0, 0x3c, 0x76, 0x2c, 0x48,
	0x63, 0x95, 0x1a, 0x69, 0xc5, 0x9a, 0x4c, 0x76, 0xe0, 0x8b, 0xe9, 0x1a, 0x63, 0xae, 0x6c, 0xc9,
	0x06, 0x21, 0xbe, 0x84, 0x6c, 0x85, 0xa5, 0xe1, 0xa6, 0xd4, 0x22, 0x12, 0xc6, 0x54, 0xca, 0x15,
	0x78, 0x86, 0xec, 0x52, 0xd7, 0xb9, 0x5d, 0xbe, 0xb4, 0xe0, 0x8d, 0xb3, 0x61, 0x5d, 0x0f, 0x4a,
	0x97, 0xe6, 0x67, 0xe1, 0xbd, 0x24, 0x5a, 0xcb, 0xd4, 0xe0, 0xcb, 0xe8, 0x8a, 0xac, 0x64, 0xce,
	0xf2, 0x70, 0x8d, 0x37, 0xe0, 0x7d, 0x24, 0x5b, 0xad, 0xa1, 0xdc, 0x77, 0x0a, 0x1e, 0x04, 0x69,
	0x2b, 0xa1, 0x99, 0xed, 0xfd, 0x64, 0x89, 0xba, 0xae, 0x97, 0x2e, 0xaf, 0xd7, 0x75, 0x96, 0x83,
	0x5f, 0x4e, 0xc8, 0xe6, 0x6c, 0x79, 0xf6, 0x3a, 0xb7, 0x62, 0x47, 0x08, 0x25, 0x34, 0x7c, 0x05,
	0xdd, 0x8f, 0xc8, 0x8a, 0x4e, 0xf7, 0xf6, 0xe1, 0x2b, 0x49, 0x2b, 0xb4, 0x0e, 0x7c, 0x15, 0x6d,
	0xc5, 0xf5, 0x5c, 0x81, 0xaf, 0x26, 0x97, 0x35, 0x43, 0x13, 0x95, 0xe1, 0x6b, 0x68, 0x6d, 0x10,
	0x80, 0xaf, 0x25, 0x7f, 0x85, 0xa6, 0xb4, 0xb2, 0xb4, 0x06, 0x5f, 0x47, 0x12, 0xab, 0xd4, 0xc0,
	0xd7, 0x93, 0x57, 0xc3, 0x76, 0x6d, 0xc1, 0xc8, 0xd5, 0x04, 0xbe, 0x81, 0xb8, 0x39, 0x70, 0xb3,
	0x65, 0xe1, 0x1b, 0x1d, 0x61, 0x14, 0xc0, 0x37, 0xd1, 0x95, 0x49, 0x9d, 0x1b, 0xf8, 0x66, 0x62,
	0x6b, 0xf5, 0xcc, 0xcc, 0x3c, 0x7c, 0x80, 0xce, 0x37, 0xf4, 0xec, 0xcc, 0xac, 0xbf, 0xb4, 0x0d,
	0xdf, 0xd2, 0x05, 0x57, 0x97, 0xb6, 0xe1, 0x5b, 0x9d, 0xf5, 0x4d, 0x4b, 0xc1, 0xb7, 0x15, 0xbc,
	0x7b, 0x58, 0x11, 0x0d, 0xbb, 0x94, 0x06, 0x26, 0x37, 0x6e, 0x27, 0xc9, 0xbe, 0xbd, 0xe0, 0x9d,
	0x63, 0x67, 0x0f, 0x6f, 0xf7, 0x84, 0xcd, 0x77, 0x1c, 0x79, 0xbe, 0x13, 0x40, 0xdf, 0xe9, 0x2c,
	0x24, 0x95, 0xd0, 0x11, 0x4f, 0xca, 0xf0, 0x5d, 0x05, 0x0f, 0x5c, 0x47, 0xbf, 0x76, 0x73, 0x41,
	0x95, 0xd7, 0x15, 0x7c, 0xb0, 0xe0, 0xdd, 0xc9, 0x4e, 0x52, 0xfb, 0xc7, 0x18, 0x69, 0x0a, 0x1e,
	0xe6, 0x6d, 0xfb, 0xbb, 0x0b, 0xde, 0x14, 0xbb, 0x27, 0xcb, 0x9b, 0x9b, 0x9a, 0x2b, 0x25, 0xf4,
	0x61, 0x9a, 0xef, 0x21, 0x55, 0x38, 0x8f, 0xca, 0xf0, 0xbd, 0xa4, 0xa4, 0xe6, 0xa1, 0x4c, 0xd7,
	0x17, 0x16, 0xe1, 0xfb, 0x08, 0xe4, 0x36, 0xf6, 0x11, 0x03, 0xdf, 0x4f, 0x26, 0x93, 0xb1, 0x85,
	0x1f, 0xa0, 0x55, 0xdc, 0x8e, 0xe0, 0x07, 0xdd, 0x09, 0xc1, 0x83, 0xe6, 0xd2, 0xd6, 0x1a, 0xfc,
	0x10, 0x09, 0x57, 0xd7, 0x4b, 0x51, 0x20, 0x97, 0x93, 0xb0, 0x62, 0xe1, 0x87, 0x09, 0x83, 0xf1,
	0x9f, 0x63, 0x7e, 0x84, 0xe2, 0x20, 0x55, 0x16, 0x7b, 0x61, 0x2e, 0xc4, 0x8f, 0x52, 0x4a, 0x65,
	0x48, 0xfa, 0x32, 0xa0, 0x52, 0x6d, 0xe1, 0xc7, 0x28, 0x1c, 0x51, 0x59, 0x4c, 0x86, 0x1f, 0xa7,
	0x93, 0x9d, 0x64, 0xa0, 0xda, 0x04, 0x3f, 0x41, 0x81, 0x2e, 0x93, 0xba, 0x4c, 0x64, 0x8d, 0x27,
	0x21, 0xfc, 0xa4, 0xab, 0x48, 0x2e, 0x0d, 0x7e, 0x8a, 0x3c, 0xfa, 0x74, 0xf9, 0xea, 0x6c, 0x09,
	0x7e, 0x9a, 0x2c, 0x99, 0xd5, 0xf4, 0xed, 0x06, 0xfc, 0x8c, 0x0b, 0x22, 0xa9, 0xb6, 0x1b, 0xf0,
	0xb3, 0x74, 0xc8, 0x48, 0xb5, 0x25, 0x1b, 0xf0, 0x73, 0xe4, 0x91, 0x5b, 0xca, 0x5f, 0x2e, 0xeb,
	0xcf, 0x13, 0xad, 0x08, 0x68, 0x18, 0xfc, 0x05, 0x02, 0x54, 0x9a, 0x94, 0xe6, 0xe6, 0xe0, 0x43,
	0x39, 0x70, 0xb9, 0x5c, 0x86, 0x5f, 0x24, 0xc0, 0xfd, 0xd7, 0x17, 0x3e, 0xec, 0x0a, 0x9a, 0x4c,
	0x44, 0x83, 0x6a, 0xf8, 0x2f, 0x91, 0xd4, 0x59, 0x63, 0x5c, 0xb9, 0xbe, 0x04, 0xbf, 0xdc, 0xcd,
	0xfd, 0x95, 0xeb, 0x4b, 0xcb, 0x0b, 0x1b, 0x0b, 0xf0, 0x2b, 0x64, 0x5b, 0x42, 0x2d, 0xad, 0x2e,
	0xc1, 0xaf, 0x52, 0x0a, 0xc6, 0x4a, 0x34, 0xba, 0xf6, 0xf9, 0x35, 0x62, 0x6b, 0xe4, 0xde, 0x76,
	0xba, 0x92, 0xb6, 0x34, 0xfc, 0x3a, 0x39, 0xa6, 0x61, 0x15, 0xfc, 0x06, 0x51, 0xab, 0x30, 0xa1,
	0x8e, 0x83, 0x93, 0x76, 0x09, 0x7e, 0xf3, 0x16, 0x5c, 0x19, 0x7e, 0x8b, 0x92, 0xf8, 0xa0, 0x37,
	0x5c, 0x9b, 0xf9, 0x6d, 0xb2, 0x7d, 0x33, 0x8d, 0x85, 0x4a, 0x38, 0xfc, 0x8e, 0xe3, 0x5c, 0x57,
	0xf0, 0xbb, 0x24, 0x69, 0x20, 0x4d, 0x90, 0xae, 0x6e, 0xad, 0x51, 0x79, 0xfe, 0x3d, 0x57, 0xe0,
	0x03, 0x2b, 0x22, 0x69, 0xd6, 0x85, 0xe5, 0x6b, 0x9b, 0x9b, 0x15, 0xf8, 0x7d, 0x92, 0xbf, 0x1e,
	0x48, 0x45, 0xae, 0xf8, 0x03, 0xe2, 0xa0, 0x95, 0x86, 0x3f, 0xa4, 0xd5, 0xd3, 0x3c, 0x86, 0x3f,
	0xa2, 0x55, 0x14, 0x2b, 0xf8, 0x63, 0xc7, 0xb5, 0x16, 0xdd, 0x10, 0x81, 0xe5, 0x5b, 0x96, 0x6b,
	0xf8, 0x93, 0x83, 0x6e, 0x58, 0x5f, 0x8c, 0x6d, 0x6f, 0xde, 0x7c, 0x84, 0xdc, 0xc7, 0xa9, 0x1e,
	0xfc, 0x69, 0xc1, 0x3b, 0xc3, 0xbc, 0x98, 0x07, 0x5b, 0x22, 0x58, 0x4c, 0x13, 0xab, 0xd3, 0x28,
	0x12, 0xe1, 0xea, 0x0a, 0xfc, 0x19, 0xe5, 0x86, 0xdb, 0x78, 0x32, 0x09, 0x7a, 0xb7, 0xfe, 0x9c,
	0x9a, 0x1c, 0x6f, 0xcb, 0x40, 0x6e, 0x3a, 0xf5, 0xdd, 0xf8, 0xf9, 0x17, 0xa4, 0x37, 0xb7, 0x71,
	0x2d, 0x4d, 0x42, 0xf8, 0xcb, 0xae, 0xa3, 0x56, 0xae, 0x2f, 0x6d, 0x6e, 0xc1, 0x5f, 0x91, 0xa0,
	0x71, 0x1a, 0xf0, 0xec, 0x67, 0x0c, 0x25, 0xf8, 0xeb, 0xde, 0xe2, 0x58, 0xba, 0x7c, 0x73, 0x7d,
	0x61, 0x03, 0xfe, 0x86, 0x3c, 0x43, 0xd2, 0x29, 0x7c, 0x54, 0xfc, 0x6d, 0xb7, 0x39, 0x98, 0x4e,
	0x23, 0xf9, 0xa8, 0x2b, 0x5d, 0xed, 0xda, 0x76, 0x18, 0xc3, 0xc7, 0xe8, 0x26, 0x47, 0xb1, 0x1d,
	0xc6, 0x1c, 0xfe, 0x8e, 0x04, 0xd9, 0x9b, 0xbf, 0xbc, 0xc6, 0x95, 0x81, 0xbf, 0x27, 0xda, 0xdd,
	0x5d, 0x9e, 0x54, 0x2a, 0xf0, 0x0f, 0xb4, 0xe5, 0x80, 0x32, 0xfc, 0x63, 0x37, 0x50, 0x96, 0xaf,
	0x6d, 0xc1, 0x3f, 0xb9, 0x7e, 0x56, 0xaf, 0xec, 0xe2, 0x7b, 0x17, 0xfe, 0xd9, 0x95, 0x2a, 0xf4,
	0xd3, 0xbf, 0xb8, 0xa2, 0x27, 0x15, 0xfc, 0x2b, 0x71, 0xe3, 0x51, 0x6b, 0x79, 0xad, 0x02, 0xff,
	0x46, 0x14, 0x0d, 0x95, 0x26, 0xf0, 0xef, 0x64, 0xd4, 0x36, 0x19, 0xf5, 0x3f, 0xc8, 0xa8, 0x01,
	0x57, 0xbb, 0x5c, 0x2d, 0xa5, 0xb6, 0x54, 0xaa, 0xe8, 0xb4, 0x2e, 0x23, 0x01, 0xff, 0x49, 0xba,
	0xf4, 0x6c, 0x5c, 0x33, 0x06, 0xfe, 0xab, 0xe0, 0x9d, 0x65, 0xa7, 0x1c, 0xf2, 0xa6, 0xcd, 0x9f,
	0x1b, 0xae, 0x72, 0xfc, 0x37, 0x5d, 0x50, 0x93, 0xd6, 0xc0, 0xff, 0x14, 0xbc, 0xbb, 0xd9, 0x99,
	0x5b, 0x72, 0xcb, 0xaf, 0x57, 0x30, 0x9e, 0x5f, 0xdd, 0xe7, 0x98, 0x1c, 0x18, 0x47, 0xb2, 0xbd,
	0xd7, 0xf4, 0x61, 0x89, 0x68, 0xc7, 0xf4, 0x0b, 0x12, 0xc7, 0x7d, 0x43, 0x06, 0xf0, 0xda, 0x3e,
	0xca, 0xff, 0xcc, 0xf8, 0x73, 0x97, 0xe0, 0x75, 0xf8, 0x54, 0x1f, 0x4a, 0x6d, 0xb2, 0x19, 0xb6,
	0xe0, 0xf5, 0x1d, 0xc0, 0xb6, 0xe0, 0x0d, 0x7d, 0x34, 0x04, 0xd4, 0x6f, 0xd4, 0x25, 0x59, 0xe6,
	0x8d, 0x7d, 0xa8, 0x6c, 0xe3, 0xea, 0xd5, 0xf9, 0x12, 0xbc, 0xa9, 0xb3, 0x2e, 0xc3, 0x9b, 0x3b,
	0xeb, 0x59, 0x78, 0x4b, 0x1f, 0x45, 0x43, 0xd4, 0x5a, 0x46, 0xf3, 0xbc, 0x95, 0x2e, 0xcb, 0xa0,
	0xcd, 0xa4, 0x05, 0x6f, 0xeb, 0x43, 0x1b, 0x65, 0x88, 0xfc, 0x53, 0xcb, 0x93, 0x89, 0x84, 0xb7,
	0xf7, 0x6e, 0x64, 0x83, 0x3f, 0xa5, 0xc1, 0x3b, 0x72, 0x16, 0xd7, 0x33, 0x16, 0xef, 0xcc, 0x29,
	0xaf, 0x1f, 0x62, 0xf1, 0xae, 0x3e, 0x0c, 0x2b, 0xa7, 0xf0, 0x86, 0x0c, 0xb6, 0x31, 0xe8, 0xdf,
	0xdd, 0x77, 0x6d, 0xfe, 0x15, 0x97, 0x9f, 0xd3, 0x6f, 0x87, 0x1a, 0xe9, 0xc5, 0x83, 0x9f, 0x70,
	0x6b, 0x43, 0xb4, 0x31, 0xfb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xbc, 0x9f, 0xb2, 0x7c,
	0x24, 0x00, 0x00,
}
