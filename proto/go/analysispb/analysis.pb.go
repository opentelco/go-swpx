//
// File: analysis.proto
// Project: src
// File Created: Sunday, 14th February 2021 1:47:04 pm
// Author: Mathias Ehrlin (mathias.ehrlin@vx.se)
// -----
// Last Modified: Sunday, 14th February 2021 1:56:06 pm
// Modified By: Mathias Ehrlin (mathias.ehrlin@vx.se>)
// -----
// Copyright - 2021 VX Service Delivery AB
//
// Unauthorized copying of this file, via any medium is strictly prohibited
// Proprietary and confidential
// -----

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: analysis.proto

package analysispb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Analysis_Type int32

const (
	Analysis_TYPE_NOT_SET Analysis_Type = 0
	// analysis of the link state on the port
	Analysis_TYPE_LINK Analysis_Type = 1
	// analysis of the link crc error counter on the port
	// if the port has crc errors during the analysis
	Analysis_TYPE_LINK_CRC_ERROR Analysis_Type = 2
	// Analysis of the link error counter on the port
	// the number of packets that could not be transmitted because of errors
	Analysis_TYPE_LINK_ERROR Analysis_Type = 3
	// analysis of the transceiver diagnostics on the port
	// RX/TX power, temperature, voltage, bias current etc.
	// Analyze of the Interface.Transceiver.Stats
	Analysis_TYPE_TRANSCEIVER_DIAGNOSTICS Analysis_Type = 4
	// analysis of the traffic on the port
	// if the port has traffic during the analysis
	Analysis_TYPE_TRAFFIC Analysis_Type = 5
	// analysis of the mac address learned by mac learning
	// some devices will inhert the mac address from the dhcp snooping and vice versa
	Analysis_TYPE_MAC_ADDRESS Analysis_Type = 6
	// analysis of the dhcp snooping lease table
	Analysis_TYPE_DHCP_LEASE Analysis_Type = 7
)

// Enum value maps for Analysis_Type.
var (
	Analysis_Type_name = map[int32]string{
		0: "TYPE_NOT_SET",
		1: "TYPE_LINK",
		2: "TYPE_LINK_CRC_ERROR",
		3: "TYPE_LINK_ERROR",
		4: "TYPE_TRANSCEIVER_DIAGNOSTICS",
		5: "TYPE_TRAFFIC",
		6: "TYPE_MAC_ADDRESS",
		7: "TYPE_DHCP_LEASE",
	}
	Analysis_Type_value = map[string]int32{
		"TYPE_NOT_SET":                 0,
		"TYPE_LINK":                    1,
		"TYPE_LINK_CRC_ERROR":          2,
		"TYPE_LINK_ERROR":              3,
		"TYPE_TRANSCEIVER_DIAGNOSTICS": 4,
		"TYPE_TRAFFIC":                 5,
		"TYPE_MAC_ADDRESS":             6,
		"TYPE_DHCP_LEASE":              7,
	}
)

func (x Analysis_Type) Enum() *Analysis_Type {
	p := new(Analysis_Type)
	*p = x
	return p
}

func (x Analysis_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Analysis_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[0].Descriptor()
}

func (Analysis_Type) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[0]
}

func (x Analysis_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Analysis_Type.Descriptor instead.
func (Analysis_Type) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{1, 0}
}

type Analysis_Result int32

const (
	Analysis_RESULT_NOT_SET Analysis_Result = 0
	Analysis_RESULT_ERROR   Analysis_Result = 1
	Analysis_RESULT_WARNING Analysis_Result = 2
	Analysis_RESULT_OK      Analysis_Result = 3
)

// Enum value maps for Analysis_Result.
var (
	Analysis_Result_name = map[int32]string{
		0: "RESULT_NOT_SET",
		1: "RESULT_ERROR",
		2: "RESULT_WARNING",
		3: "RESULT_OK",
	}
	Analysis_Result_value = map[string]int32{
		"RESULT_NOT_SET": 0,
		"RESULT_ERROR":   1,
		"RESULT_WARNING": 2,
		"RESULT_OK":      3,
	}
)

func (x Analysis_Result) Enum() *Analysis_Result {
	p := new(Analysis_Result)
	*p = x
	return p
}

func (x Analysis_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Analysis_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_analysis_proto_enumTypes[1].Descriptor()
}

func (Analysis_Result) Type() protoreflect.EnumType {
	return &file_analysis_proto_enumTypes[1]
}

func (x Analysis_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Analysis_Result.Descriptor instead.
func (Analysis_Result) EnumDescriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{1, 1}
}

type Report struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analysis []*Analysis `protobuf:"bytes,1,rep,name=analysis,proto3" json:"analysis,omitempty" bson:"analysis"`
}

func (x *Report) Reset() {
	*x = Report{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Report) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Report) ProtoMessage() {}

func (x *Report) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Report.ProtoReflect.Descriptor instead.
func (*Report) Descriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *Report) GetAnalysis() []*Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type Analysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Analysis_Type `protobuf:"varint,1,opt,name=type,proto3,enum=analysis.Analysis_Type" json:"type,omitempty" bson:"type"`
	// the result of the analysis, if the analysis is ok, warning or error
	Result Analysis_Result `protobuf:"varint,2,opt,name=result,proto3,enum=analysis.Analysis_Result" json:"result,omitempty" bson:"result"`
	// the note is a short description of the analysis, e.g "link was down through out the analysis"
	Note string `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty" bson:"note"`
	// the value is the values that was analyzed
	Value []string `protobuf:"bytes,4,rep,name=value,proto3" json:"value,omitempty" bson:"value"`
	// threshold is the value that the value is compared to
	Threshold string `protobuf:"bytes,5,opt,name=threshold,proto3" json:"threshold,omitempty" bson:"threshold"`
}

func (x *Analysis) Reset() {
	*x = Analysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analysis) ProtoMessage() {}

func (x *Analysis) ProtoReflect() protoreflect.Message {
	mi := &file_analysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analysis.ProtoReflect.Descriptor instead.
func (*Analysis) Descriptor() ([]byte, []int) {
	return file_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *Analysis) GetType() Analysis_Type {
	if x != nil {
		return x.Type
	}
	return Analysis_TYPE_NOT_SET
}

func (x *Analysis) GetResult() Analysis_Result {
	if x != nil {
		return x.Result
	}
	return Analysis_RESULT_NOT_SET
}

func (x *Analysis) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Analysis) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Analysis) GetThreshold() string {
	if x != nil {
		return x.Threshold
	}
	return ""
}

var File_analysis_proto protoreflect.FileDescriptor

var file_analysis_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x38, 0x0a, 0x06, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x22, 0xbc, 0x03, 0x0a, 0x08, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x43, 0x52, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43,
	0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46,
	0x46, 0x49, 0x43, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x07,
	0x22, 0x51, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4f,
	0x4b, 0x10, 0x03, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x2e, 0x6c, 0x69, 0x65, 0x72, 0x6f,
	0x2e, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x2f, 0x67, 0x6f,
	0x2d, 0x73, 0x77, 0x70, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_analysis_proto_rawDescOnce sync.Once
	file_analysis_proto_rawDescData = file_analysis_proto_rawDesc
)

func file_analysis_proto_rawDescGZIP() []byte {
	file_analysis_proto_rawDescOnce.Do(func() {
		file_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_analysis_proto_rawDescData)
	})
	return file_analysis_proto_rawDescData
}

var file_analysis_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_analysis_proto_goTypes = []interface{}{
	(Analysis_Type)(0),   // 0: analysis.Analysis.Type
	(Analysis_Result)(0), // 1: analysis.Analysis.Result
	(*Report)(nil),       // 2: analysis.Report
	(*Analysis)(nil),     // 3: analysis.Analysis
}
var file_analysis_proto_depIdxs = []int32{
	3, // 0: analysis.Report.analysis:type_name -> analysis.Analysis
	0, // 1: analysis.Analysis.type:type_name -> analysis.Analysis.Type
	1, // 2: analysis.Analysis.result:type_name -> analysis.Analysis.Result
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_analysis_proto_init() }
func file_analysis_proto_init() {
	if File_analysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Report); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analysis_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_analysis_proto_goTypes,
		DependencyIndexes: file_analysis_proto_depIdxs,
		EnumInfos:         file_analysis_proto_enumTypes,
		MessageInfos:      file_analysis_proto_msgTypes,
	}.Build()
	File_analysis_proto = out.File
	file_analysis_proto_rawDesc = nil
	file_analysis_proto_goTypes = nil
	file_analysis_proto_depIdxs = nil
}
