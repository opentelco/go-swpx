// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: fleet.proto

package fleetpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetClient is the client API for Fleet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetClient interface {
	// *** Device ***
	// Get a device by its ID, this is used to get a specific device
	GetDeviceByID(ctx context.Context, in *GetDeviceByIDParameters, opts ...grpc.CallOption) (*Device, error)
	// CollectDevice collects information about the device from the network (with the help of the poller)
	// and returns the device with the updated information
	CollectDevice(ctx context.Context, in *CollectDeviceParameters, opts ...grpc.CallOption) (*Device, error)
	// Get a device by its hostname, managment ip or serial number etc (used to search for a device)
	ListDevices(ctx context.Context, in *ListDevicesParameters, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Create a device in the fleet
	CreateDevice(ctx context.Context, in *CreateDeviceParameters, opts ...grpc.CallOption) (*Device, error)
	// Update a device in the fleet (this is used to update the device with new information)
	UpdateDevice(ctx context.Context, in *UpdateDeviceParameters, opts ...grpc.CallOption) (*Device, error)
	// Delete a device from the fleet (mark the device as deleted)
	DeleteDevice(ctx context.Context, in *DeleteDeviceParameters, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *** Configuration ***
	// CollectConfig collects the running configuration from the device in the network (with the help of the poller) and
	// returns the config as a string
	CollectConfig(ctx context.Context, in *CollectConfigParameters, opts ...grpc.CallOption) (*DeviceConfiguration, error)
	// Get a device configuration by its ID, this is used to get a specific device configuration
	GetDeviceConfigurationByID(ctx context.Context, in *GetDeviceConfigurationByIDParameters, opts ...grpc.CallOption) (*DeviceConfiguration, error)
	// CompareDeviceConfiguration compares the configuration of a device with the configuration in the database and returns the changes
	// if no specific configuration is specified the latest configuration is used to compare with
	CompareDeviceConfiguration(ctx context.Context, in *CompareDeviceConfigurationParameters, opts ...grpc.CallOption) (*CompareDeviceConfigurationResponse, error)
	// ListDeviceConfigurations lists all configurations for a device
	ListDeviceConfigurations(ctx context.Context, in *ListDeviceConfigurationsParameters, opts ...grpc.CallOption) (*ListDeviceConfigurationsResponse, error)
	// Create a device configuration in the fleet (this is used to store the configuration of a device)
	CreateDeviceConfiguration(ctx context.Context, in *CreateDeviceConfigurationParameters, opts ...grpc.CallOption) (*DeviceConfiguration, error)
	// Delete a device configuration from the fleet (removes the configuration from the database)
	DeleteDeviceConfiguration(ctx context.Context, in *DeleteDeviceConfigurationParameters, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type fleetClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetClient(cc grpc.ClientConnInterface) FleetClient {
	return &fleetClient{cc}
}

func (c *fleetClient) GetDeviceByID(ctx context.Context, in *GetDeviceByIDParameters, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/GetDeviceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CollectDevice(ctx context.Context, in *CollectDeviceParameters, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/CollectDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListDevices(ctx context.Context, in *ListDevicesParameters, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateDevice(ctx context.Context, in *CreateDeviceParameters, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) UpdateDevice(ctx context.Context, in *UpdateDeviceParameters, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteDevice(ctx context.Context, in *DeleteDeviceParameters, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CollectConfig(ctx context.Context, in *CollectConfigParameters, opts ...grpc.CallOption) (*DeviceConfiguration, error) {
	out := new(DeviceConfiguration)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/CollectConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) GetDeviceConfigurationByID(ctx context.Context, in *GetDeviceConfigurationByIDParameters, opts ...grpc.CallOption) (*DeviceConfiguration, error) {
	out := new(DeviceConfiguration)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/GetDeviceConfigurationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CompareDeviceConfiguration(ctx context.Context, in *CompareDeviceConfigurationParameters, opts ...grpc.CallOption) (*CompareDeviceConfigurationResponse, error) {
	out := new(CompareDeviceConfigurationResponse)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/CompareDeviceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) ListDeviceConfigurations(ctx context.Context, in *ListDeviceConfigurationsParameters, opts ...grpc.CallOption) (*ListDeviceConfigurationsResponse, error) {
	out := new(ListDeviceConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/ListDeviceConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) CreateDeviceConfiguration(ctx context.Context, in *CreateDeviceConfigurationParameters, opts ...grpc.CallOption) (*DeviceConfiguration, error) {
	out := new(DeviceConfiguration)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/CreateDeviceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetClient) DeleteDeviceConfiguration(ctx context.Context, in *DeleteDeviceConfigurationParameters, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fleet.Fleet/DeleteDeviceConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServer is the server API for Fleet service.
// All implementations must embed UnimplementedFleetServer
// for forward compatibility
type FleetServer interface {
	// *** Device ***
	// Get a device by its ID, this is used to get a specific device
	GetDeviceByID(context.Context, *GetDeviceByIDParameters) (*Device, error)
	// CollectDevice collects information about the device from the network (with the help of the poller)
	// and returns the device with the updated information
	CollectDevice(context.Context, *CollectDeviceParameters) (*Device, error)
	// Get a device by its hostname, managment ip or serial number etc (used to search for a device)
	ListDevices(context.Context, *ListDevicesParameters) (*ListDevicesResponse, error)
	// Create a device in the fleet
	CreateDevice(context.Context, *CreateDeviceParameters) (*Device, error)
	// Update a device in the fleet (this is used to update the device with new information)
	UpdateDevice(context.Context, *UpdateDeviceParameters) (*Device, error)
	// Delete a device from the fleet (mark the device as deleted)
	DeleteDevice(context.Context, *DeleteDeviceParameters) (*emptypb.Empty, error)
	// *** Configuration ***
	// CollectConfig collects the running configuration from the device in the network (with the help of the poller) and
	// returns the config as a string
	CollectConfig(context.Context, *CollectConfigParameters) (*DeviceConfiguration, error)
	// Get a device configuration by its ID, this is used to get a specific device configuration
	GetDeviceConfigurationByID(context.Context, *GetDeviceConfigurationByIDParameters) (*DeviceConfiguration, error)
	// CompareDeviceConfiguration compares the configuration of a device with the configuration in the database and returns the changes
	// if no specific configuration is specified the latest configuration is used to compare with
	CompareDeviceConfiguration(context.Context, *CompareDeviceConfigurationParameters) (*CompareDeviceConfigurationResponse, error)
	// ListDeviceConfigurations lists all configurations for a device
	ListDeviceConfigurations(context.Context, *ListDeviceConfigurationsParameters) (*ListDeviceConfigurationsResponse, error)
	// Create a device configuration in the fleet (this is used to store the configuration of a device)
	CreateDeviceConfiguration(context.Context, *CreateDeviceConfigurationParameters) (*DeviceConfiguration, error)
	// Delete a device configuration from the fleet (removes the configuration from the database)
	DeleteDeviceConfiguration(context.Context, *DeleteDeviceConfigurationParameters) (*emptypb.Empty, error)
	mustEmbedUnimplementedFleetServer()
}

// UnimplementedFleetServer must be embedded to have forward compatible implementations.
type UnimplementedFleetServer struct {
}

func (UnimplementedFleetServer) GetDeviceByID(context.Context, *GetDeviceByIDParameters) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByID not implemented")
}
func (UnimplementedFleetServer) CollectDevice(context.Context, *CollectDeviceParameters) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectDevice not implemented")
}
func (UnimplementedFleetServer) ListDevices(context.Context, *ListDevicesParameters) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedFleetServer) CreateDevice(context.Context, *CreateDeviceParameters) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedFleetServer) UpdateDevice(context.Context, *UpdateDeviceParameters) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedFleetServer) DeleteDevice(context.Context, *DeleteDeviceParameters) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedFleetServer) CollectConfig(context.Context, *CollectConfigParameters) (*DeviceConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectConfig not implemented")
}
func (UnimplementedFleetServer) GetDeviceConfigurationByID(context.Context, *GetDeviceConfigurationByIDParameters) (*DeviceConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfigurationByID not implemented")
}
func (UnimplementedFleetServer) CompareDeviceConfiguration(context.Context, *CompareDeviceConfigurationParameters) (*CompareDeviceConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareDeviceConfiguration not implemented")
}
func (UnimplementedFleetServer) ListDeviceConfigurations(context.Context, *ListDeviceConfigurationsParameters) (*ListDeviceConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceConfigurations not implemented")
}
func (UnimplementedFleetServer) CreateDeviceConfiguration(context.Context, *CreateDeviceConfigurationParameters) (*DeviceConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceConfiguration not implemented")
}
func (UnimplementedFleetServer) DeleteDeviceConfiguration(context.Context, *DeleteDeviceConfigurationParameters) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceConfiguration not implemented")
}
func (UnimplementedFleetServer) mustEmbedUnimplementedFleetServer() {}

// UnsafeFleetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServer will
// result in compilation errors.
type UnsafeFleetServer interface {
	mustEmbedUnimplementedFleetServer()
}

func RegisterFleetServer(s grpc.ServiceRegistrar, srv FleetServer) {
	s.RegisterService(&Fleet_ServiceDesc, srv)
}

func _Fleet_GetDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByIDParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/GetDeviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDeviceByID(ctx, req.(*GetDeviceByIDParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CollectDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectDeviceParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CollectDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/CollectDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CollectDevice(ctx, req.(*CollectDeviceParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListDevices(ctx, req.(*ListDevicesParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateDevice(ctx, req.(*CreateDeviceParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).UpdateDevice(ctx, req.(*UpdateDeviceParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteDevice(ctx, req.(*DeleteDeviceParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CollectConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectConfigParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CollectConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/CollectConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CollectConfig(ctx, req.(*CollectConfigParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_GetDeviceConfigurationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigurationByIDParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).GetDeviceConfigurationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/GetDeviceConfigurationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).GetDeviceConfigurationByID(ctx, req.(*GetDeviceConfigurationByIDParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CompareDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareDeviceConfigurationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CompareDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/CompareDeviceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CompareDeviceConfiguration(ctx, req.(*CompareDeviceConfigurationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_ListDeviceConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceConfigurationsParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).ListDeviceConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/ListDeviceConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).ListDeviceConfigurations(ctx, req.(*ListDeviceConfigurationsParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_CreateDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceConfigurationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).CreateDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/CreateDeviceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).CreateDeviceConfiguration(ctx, req.(*CreateDeviceConfigurationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fleet_DeleteDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceConfigurationParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServer).DeleteDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.Fleet/DeleteDeviceConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServer).DeleteDeviceConfiguration(ctx, req.(*DeleteDeviceConfigurationParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// Fleet_ServiceDesc is the grpc.ServiceDesc for Fleet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fleet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.Fleet",
	HandlerType: (*FleetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceByID",
			Handler:    _Fleet_GetDeviceByID_Handler,
		},
		{
			MethodName: "CollectDevice",
			Handler:    _Fleet_CollectDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _Fleet_ListDevices_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _Fleet_CreateDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _Fleet_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _Fleet_DeleteDevice_Handler,
		},
		{
			MethodName: "CollectConfig",
			Handler:    _Fleet_CollectConfig_Handler,
		},
		{
			MethodName: "GetDeviceConfigurationByID",
			Handler:    _Fleet_GetDeviceConfigurationByID_Handler,
		},
		{
			MethodName: "CompareDeviceConfiguration",
			Handler:    _Fleet_CompareDeviceConfiguration_Handler,
		},
		{
			MethodName: "ListDeviceConfigurations",
			Handler:    _Fleet_ListDeviceConfigurations_Handler,
		},
		{
			MethodName: "CreateDeviceConfiguration",
			Handler:    _Fleet_CreateDeviceConfiguration_Handler,
		},
		{
			MethodName: "DeleteDeviceConfiguration",
			Handler:    _Fleet_DeleteDeviceConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleet.proto",
}
