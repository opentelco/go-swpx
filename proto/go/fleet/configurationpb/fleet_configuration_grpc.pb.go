// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: fleet_configuration.proto

package configurationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigurationServiceClient is the client API for ConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationServiceClient interface {
	// Get a device configuration by its ID, this is used to get a specific device configuration
	GetByID(ctx context.Context, in *GetByIDParameters, opts ...grpc.CallOption) (*Configuration, error)
	// Compare compares the configuration of a device with the configuration in the database and returns the changes
	// if no specific configuration is specified the latest configuration is used to compare with
	// changes are returned in unified format https://www.gnu.org/software/diffutils/manual/html_node/Unified-Format.html
	Compare(ctx context.Context, in *CompareParameters, opts ...grpc.CallOption) (*CompareResponse, error)
	// Diff creates a diff between two configurations (strings) and returns the changes
	// changes are returned in unified format https://www.gnu.org/software/diffutils/manual/html_node/Unified-Format.html
	Diff(ctx context.Context, in *DiffParameters, opts ...grpc.CallOption) (*DiffResponse, error)
	// List lists all configurations for a device
	List(ctx context.Context, in *ListParameters, opts ...grpc.CallOption) (*ListResponse, error)
	// Create a device configuration in the fleet (this is used to store the configuration of a device)
	Create(ctx context.Context, in *CreateParameters, opts ...grpc.CallOption) (*Configuration, error)
	// Delete a device configuration from the fleet (removes the configuration from the database)
	Delete(ctx context.Context, in *DeleteParameters, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationServiceClient(cc grpc.ClientConnInterface) ConfigurationServiceClient {
	return &configurationServiceClient{cc}
}

func (c *configurationServiceClient) GetByID(ctx context.Context, in *GetByIDParameters, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/fleet.configuration.ConfigurationService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) Compare(ctx context.Context, in *CompareParameters, opts ...grpc.CallOption) (*CompareResponse, error) {
	out := new(CompareResponse)
	err := c.cc.Invoke(ctx, "/fleet.configuration.ConfigurationService/Compare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) Diff(ctx context.Context, in *DiffParameters, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, "/fleet.configuration.ConfigurationService/Diff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) List(ctx context.Context, in *ListParameters, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/fleet.configuration.ConfigurationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) Create(ctx context.Context, in *CreateParameters, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/fleet.configuration.ConfigurationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationServiceClient) Delete(ctx context.Context, in *DeleteParameters, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/fleet.configuration.ConfigurationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServiceServer is the server API for ConfigurationService service.
// All implementations must embed UnimplementedConfigurationServiceServer
// for forward compatibility
type ConfigurationServiceServer interface {
	// Get a device configuration by its ID, this is used to get a specific device configuration
	GetByID(context.Context, *GetByIDParameters) (*Configuration, error)
	// Compare compares the configuration of a device with the configuration in the database and returns the changes
	// if no specific configuration is specified the latest configuration is used to compare with
	// changes are returned in unified format https://www.gnu.org/software/diffutils/manual/html_node/Unified-Format.html
	Compare(context.Context, *CompareParameters) (*CompareResponse, error)
	// Diff creates a diff between two configurations (strings) and returns the changes
	// changes are returned in unified format https://www.gnu.org/software/diffutils/manual/html_node/Unified-Format.html
	Diff(context.Context, *DiffParameters) (*DiffResponse, error)
	// List lists all configurations for a device
	List(context.Context, *ListParameters) (*ListResponse, error)
	// Create a device configuration in the fleet (this is used to store the configuration of a device)
	Create(context.Context, *CreateParameters) (*Configuration, error)
	// Delete a device configuration from the fleet (removes the configuration from the database)
	Delete(context.Context, *DeleteParameters) (*emptypb.Empty, error)
	mustEmbedUnimplementedConfigurationServiceServer()
}

// UnimplementedConfigurationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigurationServiceServer struct {
}

func (UnimplementedConfigurationServiceServer) GetByID(context.Context, *GetByIDParameters) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedConfigurationServiceServer) Compare(context.Context, *CompareParameters) (*CompareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compare not implemented")
}
func (UnimplementedConfigurationServiceServer) Diff(context.Context, *DiffParameters) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedConfigurationServiceServer) List(context.Context, *ListParameters) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedConfigurationServiceServer) Create(context.Context, *CreateParameters) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedConfigurationServiceServer) Delete(context.Context, *DeleteParameters) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfigurationServiceServer) mustEmbedUnimplementedConfigurationServiceServer() {}

// UnsafeConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServiceServer will
// result in compilation errors.
type UnsafeConfigurationServiceServer interface {
	mustEmbedUnimplementedConfigurationServiceServer()
}

func RegisterConfigurationServiceServer(s grpc.ServiceRegistrar, srv ConfigurationServiceServer) {
	s.RegisterService(&ConfigurationService_ServiceDesc, srv)
}

func _ConfigurationService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIDParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.configuration.ConfigurationService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).GetByID(ctx, req.(*GetByIDParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_Compare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).Compare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.configuration.ConfigurationService/Compare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).Compare(ctx, req.(*CompareParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.configuration.ConfigurationService/Diff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).Diff(ctx, req.(*DiffParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.configuration.ConfigurationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).List(ctx, req.(*ListParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.configuration.ConfigurationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).Create(ctx, req.(*CreateParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigurationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.configuration.ConfigurationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServiceServer).Delete(ctx, req.(*DeleteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigurationService_ServiceDesc is the grpc.ServiceDesc for ConfigurationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigurationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.configuration.ConfigurationService",
	HandlerType: (*ConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _ConfigurationService_GetByID_Handler,
		},
		{
			MethodName: "Compare",
			Handler:    _ConfigurationService_Compare_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _ConfigurationService_Diff_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ConfigurationService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ConfigurationService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfigurationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleet_configuration.proto",
}
