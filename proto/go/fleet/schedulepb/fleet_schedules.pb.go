//
// Copyright (c) 2023. Liero AB
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: fleet_schedules.proto

package schedulepb

import (
	commonpb "go.opentelco.io/go-swpx/proto/go/fleet/commonpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskQueue int32

const (
	TaskQueue_TASK_QUEUE_FLEET_SCHEDULES TaskQueue = 0
)

// Enum value maps for TaskQueue.
var (
	TaskQueue_name = map[int32]string{
		0: "TASK_QUEUE_FLEET_SCHEDULES",
	}
	TaskQueue_value = map[string]int32{
		"TASK_QUEUE_FLEET_SCHEDULES": 0,
	}
)

func (x TaskQueue) Enum() *TaskQueue {
	p := new(TaskQueue)
	*p = x
	return p
}

func (x TaskQueue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskQueue) Descriptor() protoreflect.EnumDescriptor {
	return file_fleet_schedules_proto_enumTypes[0].Descriptor()
}

func (TaskQueue) Type() protoreflect.EnumType {
	return &file_fleet_schedules_proto_enumTypes[0]
}

func (x TaskQueue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskQueue.Descriptor instead.
func (TaskQueue) EnumDescriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{0}
}

type Schedule_Type int32

const (
	Schedule_SCHEDULE_TYPE_NOT_SET Schedule_Type = 0
	Schedule_COLLECT_DEVICE        Schedule_Type = 1
	Schedule_COLLECT_CONFIG        Schedule_Type = 2
)

// Enum value maps for Schedule_Type.
var (
	Schedule_Type_name = map[int32]string{
		0: "SCHEDULE_TYPE_NOT_SET",
		1: "COLLECT_DEVICE",
		2: "COLLECT_CONFIG",
	}
	Schedule_Type_value = map[string]int32{
		"SCHEDULE_TYPE_NOT_SET": 0,
		"COLLECT_DEVICE":        1,
		"COLLECT_CONFIG":        2,
	}
)

func (x Schedule_Type) Enum() *Schedule_Type {
	p := new(Schedule_Type)
	*p = x
	return p
}

func (x Schedule_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schedule_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fleet_schedules_proto_enumTypes[1].Descriptor()
}

func (Schedule_Type) Type() protoreflect.EnumType {
	return &file_fleet_schedules_proto_enumTypes[1]
}

func (x Schedule_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schedule_Type.Descriptor instead.
func (Schedule_Type) EnumDescriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{0, 0}
}

type ListParameters_Filter int32

const (
	ListParameters_FILTER_NOT_SET  ListParameters_Filter = 0
	ListParameters_FILTER_ACTIVE   ListParameters_Filter = 1
	ListParameters_FILTER_INACTIVE ListParameters_Filter = 2
)

// Enum value maps for ListParameters_Filter.
var (
	ListParameters_Filter_name = map[int32]string{
		0: "FILTER_NOT_SET",
		1: "FILTER_ACTIVE",
		2: "FILTER_INACTIVE",
	}
	ListParameters_Filter_value = map[string]int32{
		"FILTER_NOT_SET":  0,
		"FILTER_ACTIVE":   1,
		"FILTER_INACTIVE": 2,
	}
)

func (x ListParameters_Filter) Enum() *ListParameters_Filter {
	p := new(ListParameters_Filter)
	*p = x
	return p
}

func (x ListParameters_Filter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListParameters_Filter) Descriptor() protoreflect.EnumDescriptor {
	return file_fleet_schedules_proto_enumTypes[2].Descriptor()
}

func (ListParameters_Filter) Type() protoreflect.EnumType {
	return &file_fleet_schedules_proto_enumTypes[2]
}

func (x ListParameters_Filter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListParameters_Filter.Descriptor instead.
func (ListParameters_Filter) EnumDescriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{2, 0}
}

type ListParameters_OrderBy int32

const (
	ListParameters_ORDER_BY_NOT_SET ListParameters_OrderBy = 0
	ListParameters_ORDER_BY_CREATED ListParameters_OrderBy = 1
	ListParameters_ORDER_BY_UPDATED ListParameters_OrderBy = 2
)

// Enum value maps for ListParameters_OrderBy.
var (
	ListParameters_OrderBy_name = map[int32]string{
		0: "ORDER_BY_NOT_SET",
		1: "ORDER_BY_CREATED",
		2: "ORDER_BY_UPDATED",
	}
	ListParameters_OrderBy_value = map[string]int32{
		"ORDER_BY_NOT_SET": 0,
		"ORDER_BY_CREATED": 1,
		"ORDER_BY_UPDATED": 2,
	}
)

func (x ListParameters_OrderBy) Enum() *ListParameters_OrderBy {
	p := new(ListParameters_OrderBy)
	*p = x
	return p
}

func (x ListParameters_OrderBy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListParameters_OrderBy) Descriptor() protoreflect.EnumDescriptor {
	return file_fleet_schedules_proto_enumTypes[3].Descriptor()
}

func (ListParameters_OrderBy) Type() protoreflect.EnumType {
	return &file_fleet_schedules_proto_enumTypes[3]
}

func (x ListParameters_OrderBy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListParameters_OrderBy.Descriptor instead.
func (ListParameters_OrderBy) EnumDescriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{2, 1}
}

type CreateParameters_Type int32

const (
	CreateParameters_SCHEDULE_TYPE_NOT_SET CreateParameters_Type = 0
	CreateParameters_COLLECT_DEVICE        CreateParameters_Type = 1
	CreateParameters_COLLECT_CONFIG        CreateParameters_Type = 2
)

// Enum value maps for CreateParameters_Type.
var (
	CreateParameters_Type_name = map[int32]string{
		0: "SCHEDULE_TYPE_NOT_SET",
		1: "COLLECT_DEVICE",
		2: "COLLECT_CONFIG",
	}
	CreateParameters_Type_value = map[string]int32{
		"SCHEDULE_TYPE_NOT_SET": 0,
		"COLLECT_DEVICE":        1,
		"COLLECT_CONFIG":        2,
	}
)

func (x CreateParameters_Type) Enum() *CreateParameters_Type {
	p := new(CreateParameters_Type)
	*p = x
	return p
}

func (x CreateParameters_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateParameters_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fleet_schedules_proto_enumTypes[4].Descriptor()
}

func (CreateParameters_Type) Type() protoreflect.EnumType {
	return &file_fleet_schedules_proto_enumTypes[4]
}

func (x CreateParameters_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateParameters_Type.Descriptor instead.
func (CreateParameters_Type) EnumDescriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{4, 0}
}

type UpdateParameters_Type int32

const (
	UpdateParameters_SCHEDULE_TYPE_NOT_SET UpdateParameters_Type = 0
	UpdateParameters_COLLECT_DEVICE        UpdateParameters_Type = 1
	UpdateParameters_COLLECT_CONFIG        UpdateParameters_Type = 2
)

// Enum value maps for UpdateParameters_Type.
var (
	UpdateParameters_Type_name = map[int32]string{
		0: "SCHEDULE_TYPE_NOT_SET",
		1: "COLLECT_DEVICE",
		2: "COLLECT_CONFIG",
	}
	UpdateParameters_Type_value = map[string]int32{
		"SCHEDULE_TYPE_NOT_SET": 0,
		"COLLECT_DEVICE":        1,
		"COLLECT_CONFIG":        2,
	}
)

func (x UpdateParameters_Type) Enum() *UpdateParameters_Type {
	p := new(UpdateParameters_Type)
	*p = x
	return p
}

func (x UpdateParameters_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateParameters_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fleet_schedules_proto_enumTypes[5].Descriptor()
}

func (UpdateParameters_Type) Type() protoreflect.EnumType {
	return &file_fleet_schedules_proto_enumTypes[5]
}

func (x UpdateParameters_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateParameters_Type.Descriptor instead.
func (UpdateParameters_Type) EnumDescriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{7, 0}
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the schedule
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	// name of the schedule
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	// description, what the schedule does etc e.g "Collect device data every 5 minutes"
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" bson:"description"`
	// the id of the device the schedule is for, if the id is nil the schedule is a template that can
	// be used to attach to a device
	DeviceId string `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" bson:"device_id"`
	// duration between each poll
	// minimum of 120 seconds (2 minutes)
	Interval *durationpb.Duration `protobuf:"bytes,5,opt,name=interval,proto3" json:"interval,omitempty" bson:"interval"`
	// the type of schedule
	Type Schedule_Type `protobuf:"varint,6,opt,name=type,proto3,enum=fleet.schdeule.Schedule_Type" json:"type,omitempty" bson:"type"`
	// the last time the schedule was run (if it has been run)
	LastRun *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_run,json=lastRun,proto3" json:"last_run,omitempty" bson:"last_run"`
	// if the schedule is active or not (if it should be run)
	// only applies to schedules that are attached to a device
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty" bson:"active"`
	// the number of times the schedule has failed to run
	// if the schedule has failed more than 3 times it will be disabled. To unlock
	// the schedule it needs to be manually enabled again and setting failed count to 0
	FailedCount int64 `protobuf:"varint,9,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty" bson:"failed_count"`
	// when the schedule was created
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at"`
	// when the schedule was last updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" bson:"updated_at"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{0}
}

func (x *Schedule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Schedule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Schedule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schedule) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *Schedule) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *Schedule) GetType() Schedule_Type {
	if x != nil {
		return x.Type
	}
	return Schedule_SCHEDULE_TYPE_NOT_SET
}

func (x *Schedule) GetLastRun() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRun
	}
	return nil
}

func (x *Schedule) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Schedule) GetFailedCount() int64 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *Schedule) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Schedule) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetByIDParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the schedule to get
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
}

func (x *GetByIDParameters) Reset() {
	*x = GetByIDParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIDParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIDParameters) ProtoMessage() {}

func (x *GetByIDParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIDParameters.ProtoReflect.Descriptor instead.
func (*GetByIDParameters) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{1}
}

func (x *GetByIDParameters) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the device to list schedules for
	DeviceId *string `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty" bson:"device_id"`
	// the type of schedule to list
	Type   *Schedule_Type          `protobuf:"varint,2,opt,name=type,proto3,enum=fleet.schdeule.Schedule_Type,oneof" json:"type,omitempty" bson:"type"`
	Filter []ListParameters_Filter `protobuf:"varint,3,rep,packed,name=filter,proto3,enum=fleet.schdeule.ListParameters_Filter" json:"filter,omitempty" bson:"filter"`
	// has schedule to be run in the next 10 secs, the device also needs to be in the active state
	// or it will not be returned (default false)
	HasFiringSchedule *bool                    `protobuf:"varint,4,opt,name=has_firing_schedule,json=hasFiringSchedule,proto3,oneof" json:"has_firing_schedule,omitempty" bson:"has_firing_schedule"`
	OrderBy           []ListParameters_OrderBy `protobuf:"varint,6,rep,packed,name=order_by,json=orderBy,proto3,enum=fleet.schdeule.ListParameters_OrderBy" json:"order_by,omitempty" bson:"order_by"`
	// order descending is the default
	OrderAsc *bool `protobuf:"varint,7,opt,name=order_asc,json=orderAsc,proto3,oneof" json:"order_asc,omitempty" bson:"order_asc"`
	// how many notifications to return (default 10)
	Limit *int64 `protobuf:"varint,8,opt,name=limit,proto3,oneof" json:"limit,omitempty" bson:"limit"`
	// offset to start from (default 0)
	Offset *int64 `protobuf:"varint,9,opt,name=offset,proto3,oneof" json:"offset,omitempty" bson:"offset"`
}

func (x *ListParameters) Reset() {
	*x = ListParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListParameters) ProtoMessage() {}

func (x *ListParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListParameters.ProtoReflect.Descriptor instead.
func (*ListParameters) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{2}
}

func (x *ListParameters) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *ListParameters) GetType() Schedule_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Schedule_SCHEDULE_TYPE_NOT_SET
}

func (x *ListParameters) GetFilter() []ListParameters_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListParameters) GetHasFiringSchedule() bool {
	if x != nil && x.HasFiringSchedule != nil {
		return *x.HasFiringSchedule
	}
	return false
}

func (x *ListParameters) GetOrderBy() []ListParameters_OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ListParameters) GetOrderAsc() bool {
	if x != nil && x.OrderAsc != nil {
		return *x.OrderAsc
	}
	return false
}

func (x *ListParameters) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListParameters) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules []*Schedule        `protobuf:"bytes,1,rep,name=schedules,proto3" json:"schedules,omitempty" bson:"schedules"`
	PageInfo  *commonpb.PageInfo `protobuf:"bytes,2,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty" bson:"page_info"`
}

func (x *ListResponse) Reset() {
	*x = ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResponse) ProtoMessage() {}

func (x *ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResponse.ProtoReflect.Descriptor instead.
func (*ListResponse) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{3}
}

func (x *ListResponse) GetSchedules() []*Schedule {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *ListResponse) GetPageInfo() *commonpb.PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type CreateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the schedule
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	// description, what the schedule does etc e.g "Collect device data every 5 minutes"
	Description *string `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty" bson:"description"`
	// duration between each poll
	// minimum of 120 seconds (2 minutes)
	Interval *durationpb.Duration `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty" bson:"interval"`
	// the type of schedule
	Type CreateParameters_Type `protobuf:"varint,4,opt,name=type,proto3,enum=fleet.schdeule.CreateParameters_Type" json:"type,omitempty" bson:"type"`
}

func (x *CreateParameters) Reset() {
	*x = CreateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateParameters) ProtoMessage() {}

func (x *CreateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateParameters.ProtoReflect.Descriptor instead.
func (*CreateParameters) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{4}
}

func (x *CreateParameters) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateParameters) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateParameters) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *CreateParameters) GetType() CreateParameters_Type {
	if x != nil {
		return x.Type
	}
	return CreateParameters_SCHEDULE_TYPE_NOT_SET
}

type AssignParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the schedule to assign
	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty" bson:"schedule_id"`
	// the id of the device to assign the schedule to
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty" bson:"device_id"`
	// if the schedule should be active or not, default is active
	AssignAsInactive bool `protobuf:"varint,3,opt,name=assign_as_inactive,json=assignAsInactive,proto3" json:"assign_as_inactive,omitempty" bson:"assign_as_inactive"`
}

func (x *AssignParameters) Reset() {
	*x = AssignParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignParameters) ProtoMessage() {}

func (x *AssignParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignParameters.ProtoReflect.Descriptor instead.
func (*AssignParameters) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{5}
}

func (x *AssignParameters) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *AssignParameters) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *AssignParameters) GetAssignAsInactive() bool {
	if x != nil {
		return x.AssignAsInactive
	}
	return false
}

type DeleteParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the schedule to delete
	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty" bson:"schedule_id"`
}

func (x *DeleteParameters) Reset() {
	*x = DeleteParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteParameters) ProtoMessage() {}

func (x *DeleteParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteParameters.ProtoReflect.Descriptor instead.
func (*DeleteParameters) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteParameters) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

type UpdateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of the schedule to update
	ScheduleId string `protobuf:"bytes,1,opt,name=schedule_id,json=scheduleId,proto3" json:"schedule_id,omitempty" bson:"schedule_id"`
	// name of the schedule
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty" bson:"name"`
	// description, what the schedule does etc e.g "Collect device data every 5 minutes"
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty" bson:"description"`
	// duration between each poll
	// minimum of 120 seconds (2 minutes)
	Interval *durationpb.Duration `protobuf:"bytes,4,opt,name=interval,proto3,oneof" json:"interval,omitempty" bson:"interval"`
	// the type of schedule
	Type *UpdateParameters_Type `protobuf:"varint,5,opt,name=type,proto3,enum=fleet.schdeule.UpdateParameters_Type,oneof" json:"type,omitempty" bson:"type"`
	// if the schedule should be active or not
	Active *bool `protobuf:"varint,6,opt,name=active,proto3,oneof" json:"active,omitempty" bson:"active"`
}

func (x *UpdateParameters) Reset() {
	*x = UpdateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fleet_schedules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateParameters) ProtoMessage() {}

func (x *UpdateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_fleet_schedules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateParameters.ProtoReflect.Descriptor instead.
func (*UpdateParameters) Descriptor() ([]byte, []int) {
	return file_fleet_schedules_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateParameters) GetScheduleId() string {
	if x != nil {
		return x.ScheduleId
	}
	return ""
}

func (x *UpdateParameters) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateParameters) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateParameters) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *UpdateParameters) GetType() UpdateParameters_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return UpdateParameters_SCHEDULE_TYPE_NOT_SET
}

func (x *UpdateParameters) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

var File_fleet_schedules_proto protoreflect.FileDescriptor

var file_fleet_schedules_proto_rawDesc = []byte{
	0x0a, 0x15, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x1a, 0x12, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x04, 0x0a, 0x08, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x49, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49,
	0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe0, 0x04, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74,
	0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x66,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x11, 0x68, 0x61, 0x73, 0x46, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12,
	0x20, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x63, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x22, 0x44, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x22,
	0x4b, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x42, 0x59, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7b,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75,
	0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x02, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c,
	0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x41, 0x73,
	0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x91, 0x03,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x04, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x22, 0x49, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x2a, 0x2b, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x46, 0x4c, 0x45,
	0x45, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x53, 0x10, 0x00, 0x32, 0xbf,
	0x03, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x21, 0x2e, 0x66, 0x6c,
	0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x18,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1e, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x1c, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65,
	0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x18,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68,
	0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x18, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73,
	0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x20, 0x2e, 0x66,
	0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x18,
	0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68, 0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x2e, 0x73, 0x63, 0x68,
	0x64, 0x65, 0x75, 0x6c, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x2e, 0x6c, 0x69, 0x65, 0x72, 0x6f, 0x2e, 0x73, 0x65,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x77,
	0x70, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6c, 0x65, 0x65,
	0x74, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fleet_schedules_proto_rawDescOnce sync.Once
	file_fleet_schedules_proto_rawDescData = file_fleet_schedules_proto_rawDesc
)

func file_fleet_schedules_proto_rawDescGZIP() []byte {
	file_fleet_schedules_proto_rawDescOnce.Do(func() {
		file_fleet_schedules_proto_rawDescData = protoimpl.X.CompressGZIP(file_fleet_schedules_proto_rawDescData)
	})
	return file_fleet_schedules_proto_rawDescData
}

var file_fleet_schedules_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_fleet_schedules_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fleet_schedules_proto_goTypes = []interface{}{
	(TaskQueue)(0),                // 0: fleet.schdeule.TaskQueue
	(Schedule_Type)(0),            // 1: fleet.schdeule.Schedule.Type
	(ListParameters_Filter)(0),    // 2: fleet.schdeule.ListParameters.Filter
	(ListParameters_OrderBy)(0),   // 3: fleet.schdeule.ListParameters.OrderBy
	(CreateParameters_Type)(0),    // 4: fleet.schdeule.CreateParameters.Type
	(UpdateParameters_Type)(0),    // 5: fleet.schdeule.UpdateParameters.Type
	(*Schedule)(nil),              // 6: fleet.schdeule.Schedule
	(*GetByIDParameters)(nil),     // 7: fleet.schdeule.GetByIDParameters
	(*ListParameters)(nil),        // 8: fleet.schdeule.ListParameters
	(*ListResponse)(nil),          // 9: fleet.schdeule.ListResponse
	(*CreateParameters)(nil),      // 10: fleet.schdeule.CreateParameters
	(*AssignParameters)(nil),      // 11: fleet.schdeule.AssignParameters
	(*DeleteParameters)(nil),      // 12: fleet.schdeule.DeleteParameters
	(*UpdateParameters)(nil),      // 13: fleet.schdeule.UpdateParameters
	(*durationpb.Duration)(nil),   // 14: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*commonpb.PageInfo)(nil),     // 16: fleet.common.PageInfo
	(*emptypb.Empty)(nil),         // 17: google.protobuf.Empty
}
var file_fleet_schedules_proto_depIdxs = []int32{
	14, // 0: fleet.schdeule.Schedule.interval:type_name -> google.protobuf.Duration
	1,  // 1: fleet.schdeule.Schedule.type:type_name -> fleet.schdeule.Schedule.Type
	15, // 2: fleet.schdeule.Schedule.last_run:type_name -> google.protobuf.Timestamp
	15, // 3: fleet.schdeule.Schedule.created_at:type_name -> google.protobuf.Timestamp
	15, // 4: fleet.schdeule.Schedule.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 5: fleet.schdeule.ListParameters.type:type_name -> fleet.schdeule.Schedule.Type
	2,  // 6: fleet.schdeule.ListParameters.filter:type_name -> fleet.schdeule.ListParameters.Filter
	3,  // 7: fleet.schdeule.ListParameters.order_by:type_name -> fleet.schdeule.ListParameters.OrderBy
	6,  // 8: fleet.schdeule.ListResponse.schedules:type_name -> fleet.schdeule.Schedule
	16, // 9: fleet.schdeule.ListResponse.page_info:type_name -> fleet.common.PageInfo
	14, // 10: fleet.schdeule.CreateParameters.interval:type_name -> google.protobuf.Duration
	4,  // 11: fleet.schdeule.CreateParameters.type:type_name -> fleet.schdeule.CreateParameters.Type
	14, // 12: fleet.schdeule.UpdateParameters.interval:type_name -> google.protobuf.Duration
	5,  // 13: fleet.schdeule.UpdateParameters.type:type_name -> fleet.schdeule.UpdateParameters.Type
	7,  // 14: fleet.schdeule.DeviceService.GetByID:input_type -> fleet.schdeule.GetByIDParameters
	8,  // 15: fleet.schdeule.DeviceService.List:input_type -> fleet.schdeule.ListParameters
	10, // 16: fleet.schdeule.DeviceService.Create:input_type -> fleet.schdeule.CreateParameters
	13, // 17: fleet.schdeule.DeviceService.Update:input_type -> fleet.schdeule.UpdateParameters
	11, // 18: fleet.schdeule.DeviceService.Assign:input_type -> fleet.schdeule.AssignParameters
	12, // 19: fleet.schdeule.DeviceService.Delete:input_type -> fleet.schdeule.DeleteParameters
	6,  // 20: fleet.schdeule.DeviceService.GetByID:output_type -> fleet.schdeule.Schedule
	9,  // 21: fleet.schdeule.DeviceService.List:output_type -> fleet.schdeule.ListResponse
	6,  // 22: fleet.schdeule.DeviceService.Create:output_type -> fleet.schdeule.Schedule
	6,  // 23: fleet.schdeule.DeviceService.Update:output_type -> fleet.schdeule.Schedule
	6,  // 24: fleet.schdeule.DeviceService.Assign:output_type -> fleet.schdeule.Schedule
	17, // 25: fleet.schdeule.DeviceService.Delete:output_type -> google.protobuf.Empty
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_fleet_schedules_proto_init() }
func file_fleet_schedules_proto_init() {
	if File_fleet_schedules_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fleet_schedules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIDParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fleet_schedules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fleet_schedules_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_fleet_schedules_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_fleet_schedules_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fleet_schedules_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fleet_schedules_proto_goTypes,
		DependencyIndexes: file_fleet_schedules_proto_depIdxs,
		EnumInfos:         file_fleet_schedules_proto_enumTypes,
		MessageInfos:      file_fleet_schedules_proto_msgTypes,
	}.Build()
	File_fleet_schedules_proto = out.File
	file_fleet_schedules_proto_rawDesc = nil
	file_fleet_schedules_proto_goTypes = nil
	file_fleet_schedules_proto_depIdxs = nil
}
