//
// Copyright (c) 2023. Liero AB
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: network_element.proto

package networkelementpb

import (
	analysispb "git.liero.se/opentelco/go-swpx/proto/go/analysispb"
	trafficpolicypb "git.liero.se/opentelco/go-swpx/proto/go/trafficpolicypb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModuleType int32

const (
	ModuleType_POWER     ModuleType = 0
	ModuleType_FAN       ModuleType = 1
	ModuleType_INTERFACE ModuleType = 2
)

// Enum value maps for ModuleType.
var (
	ModuleType_name = map[int32]string{
		0: "POWER",
		1: "FAN",
		2: "INTERFACE",
	}
	ModuleType_value = map[string]int32{
		"POWER":     0,
		"FAN":       1,
		"INTERFACE": 2,
	}
)

func (x ModuleType) Enum() *ModuleType {
	p := new(ModuleType)
	*p = x
	return p
}

func (x ModuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_element_proto_enumTypes[0].Descriptor()
}

func (ModuleType) Type() protoreflect.EnumType {
	return &file_network_element_proto_enumTypes[0]
}

func (x ModuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModuleType.Descriptor instead.
func (ModuleType) EnumDescriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{0}
}

type InterfaceStatus int32

const (
	InterfaceStatus_unset          InterfaceStatus = 0
	InterfaceStatus_up             InterfaceStatus = 1
	InterfaceStatus_down           InterfaceStatus = 2
	InterfaceStatus_testing        InterfaceStatus = 3
	InterfaceStatus_unknown        InterfaceStatus = 4
	InterfaceStatus_dorman         InterfaceStatus = 5
	InterfaceStatus_notPresent     InterfaceStatus = 6
	InterfaceStatus_lowerLayerDown InterfaceStatus = 7
)

// Enum value maps for InterfaceStatus.
var (
	InterfaceStatus_name = map[int32]string{
		0: "unset",
		1: "up",
		2: "down",
		3: "testing",
		4: "unknown",
		5: "dorman",
		6: "notPresent",
		7: "lowerLayerDown",
	}
	InterfaceStatus_value = map[string]int32{
		"unset":          0,
		"up":             1,
		"down":           2,
		"testing":        3,
		"unknown":        4,
		"dorman":         5,
		"notPresent":     6,
		"lowerLayerDown": 7,
	}
)

func (x InterfaceStatus) Enum() *InterfaceStatus {
	p := new(InterfaceStatus)
	*p = x
	return p
}

func (x InterfaceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_network_element_proto_enumTypes[1].Descriptor()
}

func (InterfaceStatus) Type() protoreflect.EnumType {
	return &file_network_element_proto_enumTypes[1]
}

func (x InterfaceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceStatus.Descriptor instead.
func (InterfaceStatus) EnumDescriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{1}
}

type InterfaceType int32

const (
	InterfaceType_unknown_interface_type        InterfaceType = 0
	InterfaceType_other                         InterfaceType = 1
	InterfaceType_regular1822                   InterfaceType = 2
	InterfaceType_hdh1822                       InterfaceType = 3
	InterfaceType_ddnX25                        InterfaceType = 4
	InterfaceType_rfc877x25                     InterfaceType = 5
	InterfaceType_ethernetCsmacd                InterfaceType = 6
	InterfaceType_iso88023Csmacd                InterfaceType = 7
	InterfaceType_iso88024TokenBus              InterfaceType = 8
	InterfaceType_iso88025TokenRing             InterfaceType = 9
	InterfaceType_iso88026Man                   InterfaceType = 10
	InterfaceType_starLan                       InterfaceType = 11
	InterfaceType_proteon10Mbit                 InterfaceType = 12
	InterfaceType_proteon80Mbit                 InterfaceType = 13
	InterfaceType_hyperchannel                  InterfaceType = 14
	InterfaceType_fddi                          InterfaceType = 15
	InterfaceType_lapb                          InterfaceType = 16
	InterfaceType_sdlc                          InterfaceType = 17
	InterfaceType_ds1                           InterfaceType = 18
	InterfaceType_e1                            InterfaceType = 19
	InterfaceType_basicISDN                     InterfaceType = 20
	InterfaceType_primaryISDN                   InterfaceType = 21
	InterfaceType_propPointToPointSerial        InterfaceType = 22
	InterfaceType_ppp                           InterfaceType = 23
	InterfaceType_softwareLoopback              InterfaceType = 24
	InterfaceType_eon                           InterfaceType = 25
	InterfaceType_ethernet3Mbit                 InterfaceType = 26
	InterfaceType_nsip                          InterfaceType = 27
	InterfaceType_slip                          InterfaceType = 28
	InterfaceType_ultra                         InterfaceType = 29
	InterfaceType_ds3                           InterfaceType = 30
	InterfaceType_sip                           InterfaceType = 31
	InterfaceType_frameRelay                    InterfaceType = 32
	InterfaceType_rs232                         InterfaceType = 33
	InterfaceType_para                          InterfaceType = 34
	InterfaceType_arcnet                        InterfaceType = 35
	InterfaceType_arcnetPlus                    InterfaceType = 36
	InterfaceType_atm                           InterfaceType = 37
	InterfaceType_miox25                        InterfaceType = 38
	InterfaceType_sonet                         InterfaceType = 39
	InterfaceType_x25ple                        InterfaceType = 40
	InterfaceType_iso88022llc                   InterfaceType = 41
	InterfaceType_localTalk                     InterfaceType = 42
	InterfaceType_smdsDxi                       InterfaceType = 43
	InterfaceType_frameRelayService             InterfaceType = 44
	InterfaceType_v35                           InterfaceType = 45
	InterfaceType_hssi                          InterfaceType = 46
	InterfaceType_hippi                         InterfaceType = 47
	InterfaceType_modem                         InterfaceType = 48
	InterfaceType_aal5                          InterfaceType = 49
	InterfaceType_sonetPath                     InterfaceType = 50
	InterfaceType_sonetVT                       InterfaceType = 51
	InterfaceType_smdsIcip                      InterfaceType = 52
	InterfaceType_propVirtual                   InterfaceType = 53
	InterfaceType_propMultiplexor               InterfaceType = 54
	InterfaceType_ieee80212                     InterfaceType = 55
	InterfaceType_fibreChannel                  InterfaceType = 56
	InterfaceType_hippiInterface                InterfaceType = 57
	InterfaceType_frameRelayInterconnect        InterfaceType = 58
	InterfaceType_aflane8023                    InterfaceType = 59
	InterfaceType_aflane8025                    InterfaceType = 60
	InterfaceType_cctEmul                       InterfaceType = 61
	InterfaceType_fastEther                     InterfaceType = 62
	InterfaceType_isdn                          InterfaceType = 63
	InterfaceType_v11                           InterfaceType = 64
	InterfaceType_v36                           InterfaceType = 65
	InterfaceType_g703at64k                     InterfaceType = 66
	InterfaceType_g703at2mb                     InterfaceType = 67
	InterfaceType_qllc                          InterfaceType = 68
	InterfaceType_fastEtherFX                   InterfaceType = 69
	InterfaceType_channel                       InterfaceType = 70
	InterfaceType_ieee80211                     InterfaceType = 71
	InterfaceType_ibm370parChan                 InterfaceType = 72
	InterfaceType_escon                         InterfaceType = 73
	InterfaceType_dlsw                          InterfaceType = 74
	InterfaceType_isdns                         InterfaceType = 75
	InterfaceType_isdnu                         InterfaceType = 76
	InterfaceType_lapd                          InterfaceType = 77
	InterfaceType_ipSwitch                      InterfaceType = 78
	InterfaceType_rsrb                          InterfaceType = 79
	InterfaceType_atmLogical                    InterfaceType = 80
	InterfaceType_ds0                           InterfaceType = 81
	InterfaceType_ds0Bundle                     InterfaceType = 82
	InterfaceType_bsc                           InterfaceType = 83
	InterfaceType_async                         InterfaceType = 84
	InterfaceType_cnr                           InterfaceType = 85
	InterfaceType_iso88025Dtr                   InterfaceType = 86
	InterfaceType_eplrs                         InterfaceType = 87
	InterfaceType_arap                          InterfaceType = 88
	InterfaceType_propCnls                      InterfaceType = 89
	InterfaceType_hostPad                       InterfaceType = 90
	InterfaceType_termPad                       InterfaceType = 91
	InterfaceType_frameRelayMPI                 InterfaceType = 92
	InterfaceType_x213                          InterfaceType = 93
	InterfaceType_adsl                          InterfaceType = 94
	InterfaceType_radsl                         InterfaceType = 95
	InterfaceType_sdsl                          InterfaceType = 96
	InterfaceType_vdsl                          InterfaceType = 97
	InterfaceType_iso88025CRFPInt               InterfaceType = 98
	InterfaceType_myrinet                       InterfaceType = 99
	InterfaceType_voiceEM                       InterfaceType = 100
	InterfaceType_voiceFXO                      InterfaceType = 101
	InterfaceType_voiceFXS                      InterfaceType = 102
	InterfaceType_voiceEncap                    InterfaceType = 103
	InterfaceType_voiceOverIp                   InterfaceType = 104
	InterfaceType_atmDxi                        InterfaceType = 105
	InterfaceType_atmFuni                       InterfaceType = 106
	InterfaceType_atmIma                        InterfaceType = 107
	InterfaceType_pppMultilinkBundle            InterfaceType = 108
	InterfaceType_ipOverCdlc                    InterfaceType = 109
	InterfaceType_ipOverClaw                    InterfaceType = 110
	InterfaceType_stackToStack                  InterfaceType = 111
	InterfaceType_virtualIpAddress              InterfaceType = 112
	InterfaceType_mpc                           InterfaceType = 113
	InterfaceType_ipOverAtm                     InterfaceType = 114
	InterfaceType_iso88025Fiber                 InterfaceType = 115
	InterfaceType_tdlc                          InterfaceType = 116
	InterfaceType_gigabitEthernet               InterfaceType = 117
	InterfaceType_hdlc                          InterfaceType = 118
	InterfaceType_lapf                          InterfaceType = 119
	InterfaceType_v37                           InterfaceType = 120
	InterfaceType_x25mlp                        InterfaceType = 121
	InterfaceType_x25huntGroup                  InterfaceType = 122
	InterfaceType_transpHdlc                    InterfaceType = 123
	InterfaceType_interleave                    InterfaceType = 124
	InterfaceType_fast                          InterfaceType = 125
	InterfaceType_ip                            InterfaceType = 126
	InterfaceType_docsCableMaclayer             InterfaceType = 127
	InterfaceType_docsCableDownstream           InterfaceType = 128
	InterfaceType_docsCableUpstream             InterfaceType = 129
	InterfaceType_a12MppSwitch                  InterfaceType = 130
	InterfaceType_tunnel                        InterfaceType = 131
	InterfaceType_coffee                        InterfaceType = 132
	InterfaceType_ces                           InterfaceType = 133
	InterfaceType_atmSubInterface               InterfaceType = 134
	InterfaceType_l2vlan                        InterfaceType = 135
	InterfaceType_l3ipvlan                      InterfaceType = 136
	InterfaceType_l3ipxvlan                     InterfaceType = 137
	InterfaceType_digitalPowerline              InterfaceType = 138
	InterfaceType_mediaMailOverIp               InterfaceType = 139
	InterfaceType_dtm                           InterfaceType = 140
	InterfaceType_dcn                           InterfaceType = 141
	InterfaceType_ipForward                     InterfaceType = 142
	InterfaceType_msdsl                         InterfaceType = 143
	InterfaceType_ieee1394                      InterfaceType = 144
	InterfaceType_if_gsn                        InterfaceType = 145
	InterfaceType_dvbRccMacLayer                InterfaceType = 146
	InterfaceType_dvbRccDownstream              InterfaceType = 147
	InterfaceType_dvbRccUpstream                InterfaceType = 148
	InterfaceType_atmVirtual                    InterfaceType = 149
	InterfaceType_mplsTunnel                    InterfaceType = 150
	InterfaceType_srp                           InterfaceType = 151
	InterfaceType_voiceOverAtm                  InterfaceType = 152
	InterfaceType_voiceOverFrameRelay           InterfaceType = 153
	InterfaceType_idsl                          InterfaceType = 154
	InterfaceType_compositeLink                 InterfaceType = 155
	InterfaceType_ss7SigLink                    InterfaceType = 156
	InterfaceType_propWirelessP2P               InterfaceType = 157
	InterfaceType_frForward                     InterfaceType = 158
	InterfaceType_rfc1483                       InterfaceType = 159
	InterfaceType_usb                           InterfaceType = 160
	InterfaceType_ieee8023adLag                 InterfaceType = 161
	InterfaceType_bgppolicyaccounting           InterfaceType = 162
	InterfaceType_frf16MfrBundle                InterfaceType = 163
	InterfaceType_h323Gatekeeper                InterfaceType = 164
	InterfaceType_h323Proxy                     InterfaceType = 165
	InterfaceType_mpls                          InterfaceType = 166
	InterfaceType_mfSigLink                     InterfaceType = 167
	InterfaceType_hdsl2                         InterfaceType = 168
	InterfaceType_shdsl                         InterfaceType = 169
	InterfaceType_ds1FDL                        InterfaceType = 170
	InterfaceType_pos                           InterfaceType = 171
	InterfaceType_dvbAsiIn                      InterfaceType = 172
	InterfaceType_dvbAsiOut                     InterfaceType = 173
	InterfaceType_plc                           InterfaceType = 174
	InterfaceType_nfas                          InterfaceType = 175
	InterfaceType_tr008                         InterfaceType = 176
	InterfaceType_gr303RDT                      InterfaceType = 177
	InterfaceType_gr303IDT                      InterfaceType = 178
	InterfaceType_isup                          InterfaceType = 179
	InterfaceType_propDocsWirelessMaclayer      InterfaceType = 180
	InterfaceType_propDocsWirelessDownstream    InterfaceType = 181
	InterfaceType_propDocsWirelessUpstream      InterfaceType = 182
	InterfaceType_hiperlan2                     InterfaceType = 183
	InterfaceType_propBWAp2Mp                   InterfaceType = 184
	InterfaceType_sonetOverheadChannel          InterfaceType = 185
	InterfaceType_digitalWrapperOverheadChannel InterfaceType = 186
	InterfaceType_aal2                          InterfaceType = 187
	InterfaceType_radioMAC                      InterfaceType = 188
	InterfaceType_atmRadio                      InterfaceType = 189
	InterfaceType_imt                           InterfaceType = 190
	InterfaceType_mvl                           InterfaceType = 191
	InterfaceType_reachDSL                      InterfaceType = 192
	InterfaceType_frDlciEndPt                   InterfaceType = 193
	InterfaceType_atmVciEndPt                   InterfaceType = 194
	InterfaceType_opticalChannel                InterfaceType = 195
	InterfaceType_opticalTransport              InterfaceType = 196
	InterfaceType_propAtm                       InterfaceType = 197
	InterfaceType_voiceOverCable                InterfaceType = 198
	InterfaceType_infiniband                    InterfaceType = 199
	InterfaceType_teLink                        InterfaceType = 200
	InterfaceType_q2931                         InterfaceType = 201
	InterfaceType_virtualTg                     InterfaceType = 202
	InterfaceType_sipTg                         InterfaceType = 203
	InterfaceType_sipSig                        InterfaceType = 204
	InterfaceType_docsCableUpstreamChannel      InterfaceType = 205
	InterfaceType_econet                        InterfaceType = 206
	InterfaceType_pon155                        InterfaceType = 207
	InterfaceType_pon622                        InterfaceType = 208
	InterfaceType_bridge                        InterfaceType = 209
	InterfaceType_linegroup                     InterfaceType = 210
	InterfaceType_voiceEMFGD                    InterfaceType = 211
	InterfaceType_voiceFGDEANA                  InterfaceType = 212
	InterfaceType_voiceDID                      InterfaceType = 213
	InterfaceType_mpegTransport                 InterfaceType = 214
	InterfaceType_sixToFour                     InterfaceType = 215
	InterfaceType_gtp                           InterfaceType = 216
	InterfaceType_pdnEtherLoop1                 InterfaceType = 217
	InterfaceType_pdnEtherLoop2                 InterfaceType = 218
	InterfaceType_opticalChannelGroup           InterfaceType = 219
	InterfaceType_homepna                       InterfaceType = 220
	InterfaceType_gfp                           InterfaceType = 221
	InterfaceType_ciscoISLvlan                  InterfaceType = 222
	InterfaceType_actelisMetaLOOP               InterfaceType = 223
	InterfaceType_fcipLink                      InterfaceType = 224
	InterfaceType_rpr                           InterfaceType = 225
	InterfaceType_qam                           InterfaceType = 226
	InterfaceType_lmp                           InterfaceType = 227
	InterfaceType_cblVectaStar                  InterfaceType = 228
	InterfaceType_docsCableMCmtsDownstream      InterfaceType = 229
	InterfaceType_adsl2                         InterfaceType = 230
	InterfaceType_macSecControlledIF            InterfaceType = 231
	InterfaceType_macSecUncontrolledIF          InterfaceType = 232
	InterfaceType_aviciOpticalEther             InterfaceType = 233
	InterfaceType_atmbond                       InterfaceType = 234
	InterfaceType_voiceFGDOS                    InterfaceType = 235
	InterfaceType_mocaVersion1                  InterfaceType = 236
	InterfaceType_ieee80216WMAN                 InterfaceType = 237
	InterfaceType_adsl2plus                     InterfaceType = 238
	InterfaceType_dvbRcsMacLayer                InterfaceType = 239
	InterfaceType_dvbTdm                        InterfaceType = 240
	InterfaceType_dvbRcsTdma                    InterfaceType = 241
	InterfaceType_x86Laps                       InterfaceType = 242
	InterfaceType_wwanPP                        InterfaceType = 243
	InterfaceType_wwanPP2                       InterfaceType = 244
	InterfaceType_voiceEBS                      InterfaceType = 245
	InterfaceType_ifPwType                      InterfaceType = 246
	InterfaceType_ilan                          InterfaceType = 247
	InterfaceType_pip                           InterfaceType = 248
	InterfaceType_aluELP                        InterfaceType = 249
	InterfaceType_gpon                          InterfaceType = 250
	InterfaceType_vdsl2                         InterfaceType = 251
	InterfaceType_capwapDot11Profile            InterfaceType = 252
	InterfaceType_capwapDot11Bss                InterfaceType = 253
	InterfaceType_capwapWtpVirtualRadio         InterfaceType = 254
	InterfaceType_bits                          InterfaceType = 255
	InterfaceType_docsCableUpstreamRfPort       InterfaceType = 256
	InterfaceType_cableDownstreamRfPort         InterfaceType = 257
	InterfaceType_vmwareVirtualNic              InterfaceType = 258
	InterfaceType_ieee802154                    InterfaceType = 259
	InterfaceType_otnOdu                        InterfaceType = 260
	InterfaceType_otnOtu                        InterfaceType = 261
	InterfaceType_ifVfiType                     InterfaceType = 262
	InterfaceType_g9981                         InterfaceType = 263
	InterfaceType_g9982                         InterfaceType = 264
	InterfaceType_g9983                         InterfaceType = 265
	InterfaceType_aluEpon                       InterfaceType = 266
	InterfaceType_aluEponOnu                    InterfaceType = 267
	InterfaceType_aluEponPhysicalUni            InterfaceType = 268
	InterfaceType_aluEponLogicalLink            InterfaceType = 269
	InterfaceType_aluGponOnu                    InterfaceType = 270
	InterfaceType_aluGponPhysicalUni            InterfaceType = 271
	InterfaceType_vmwareNicTeam                 InterfaceType = 272
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0:   "unknown_interface_type",
		1:   "other",
		2:   "regular1822",
		3:   "hdh1822",
		4:   "ddnX25",
		5:   "rfc877x25",
		6:   "ethernetCsmacd",
		7:   "iso88023Csmacd",
		8:   "iso88024TokenBus",
		9:   "iso88025TokenRing",
		10:  "iso88026Man",
		11:  "starLan",
		12:  "proteon10Mbit",
		13:  "proteon80Mbit",
		14:  "hyperchannel",
		15:  "fddi",
		16:  "lapb",
		17:  "sdlc",
		18:  "ds1",
		19:  "e1",
		20:  "basicISDN",
		21:  "primaryISDN",
		22:  "propPointToPointSerial",
		23:  "ppp",
		24:  "softwareLoopback",
		25:  "eon",
		26:  "ethernet3Mbit",
		27:  "nsip",
		28:  "slip",
		29:  "ultra",
		30:  "ds3",
		31:  "sip",
		32:  "frameRelay",
		33:  "rs232",
		34:  "para",
		35:  "arcnet",
		36:  "arcnetPlus",
		37:  "atm",
		38:  "miox25",
		39:  "sonet",
		40:  "x25ple",
		41:  "iso88022llc",
		42:  "localTalk",
		43:  "smdsDxi",
		44:  "frameRelayService",
		45:  "v35",
		46:  "hssi",
		47:  "hippi",
		48:  "modem",
		49:  "aal5",
		50:  "sonetPath",
		51:  "sonetVT",
		52:  "smdsIcip",
		53:  "propVirtual",
		54:  "propMultiplexor",
		55:  "ieee80212",
		56:  "fibreChannel",
		57:  "hippiInterface",
		58:  "frameRelayInterconnect",
		59:  "aflane8023",
		60:  "aflane8025",
		61:  "cctEmul",
		62:  "fastEther",
		63:  "isdn",
		64:  "v11",
		65:  "v36",
		66:  "g703at64k",
		67:  "g703at2mb",
		68:  "qllc",
		69:  "fastEtherFX",
		70:  "channel",
		71:  "ieee80211",
		72:  "ibm370parChan",
		73:  "escon",
		74:  "dlsw",
		75:  "isdns",
		76:  "isdnu",
		77:  "lapd",
		78:  "ipSwitch",
		79:  "rsrb",
		80:  "atmLogical",
		81:  "ds0",
		82:  "ds0Bundle",
		83:  "bsc",
		84:  "async",
		85:  "cnr",
		86:  "iso88025Dtr",
		87:  "eplrs",
		88:  "arap",
		89:  "propCnls",
		90:  "hostPad",
		91:  "termPad",
		92:  "frameRelayMPI",
		93:  "x213",
		94:  "adsl",
		95:  "radsl",
		96:  "sdsl",
		97:  "vdsl",
		98:  "iso88025CRFPInt",
		99:  "myrinet",
		100: "voiceEM",
		101: "voiceFXO",
		102: "voiceFXS",
		103: "voiceEncap",
		104: "voiceOverIp",
		105: "atmDxi",
		106: "atmFuni",
		107: "atmIma",
		108: "pppMultilinkBundle",
		109: "ipOverCdlc",
		110: "ipOverClaw",
		111: "stackToStack",
		112: "virtualIpAddress",
		113: "mpc",
		114: "ipOverAtm",
		115: "iso88025Fiber",
		116: "tdlc",
		117: "gigabitEthernet",
		118: "hdlc",
		119: "lapf",
		120: "v37",
		121: "x25mlp",
		122: "x25huntGroup",
		123: "transpHdlc",
		124: "interleave",
		125: "fast",
		126: "ip",
		127: "docsCableMaclayer",
		128: "docsCableDownstream",
		129: "docsCableUpstream",
		130: "a12MppSwitch",
		131: "tunnel",
		132: "coffee",
		133: "ces",
		134: "atmSubInterface",
		135: "l2vlan",
		136: "l3ipvlan",
		137: "l3ipxvlan",
		138: "digitalPowerline",
		139: "mediaMailOverIp",
		140: "dtm",
		141: "dcn",
		142: "ipForward",
		143: "msdsl",
		144: "ieee1394",
		145: "if_gsn",
		146: "dvbRccMacLayer",
		147: "dvbRccDownstream",
		148: "dvbRccUpstream",
		149: "atmVirtual",
		150: "mplsTunnel",
		151: "srp",
		152: "voiceOverAtm",
		153: "voiceOverFrameRelay",
		154: "idsl",
		155: "compositeLink",
		156: "ss7SigLink",
		157: "propWirelessP2P",
		158: "frForward",
		159: "rfc1483",
		160: "usb",
		161: "ieee8023adLag",
		162: "bgppolicyaccounting",
		163: "frf16MfrBundle",
		164: "h323Gatekeeper",
		165: "h323Proxy",
		166: "mpls",
		167: "mfSigLink",
		168: "hdsl2",
		169: "shdsl",
		170: "ds1FDL",
		171: "pos",
		172: "dvbAsiIn",
		173: "dvbAsiOut",
		174: "plc",
		175: "nfas",
		176: "tr008",
		177: "gr303RDT",
		178: "gr303IDT",
		179: "isup",
		180: "propDocsWirelessMaclayer",
		181: "propDocsWirelessDownstream",
		182: "propDocsWirelessUpstream",
		183: "hiperlan2",
		184: "propBWAp2Mp",
		185: "sonetOverheadChannel",
		186: "digitalWrapperOverheadChannel",
		187: "aal2",
		188: "radioMAC",
		189: "atmRadio",
		190: "imt",
		191: "mvl",
		192: "reachDSL",
		193: "frDlciEndPt",
		194: "atmVciEndPt",
		195: "opticalChannel",
		196: "opticalTransport",
		197: "propAtm",
		198: "voiceOverCable",
		199: "infiniband",
		200: "teLink",
		201: "q2931",
		202: "virtualTg",
		203: "sipTg",
		204: "sipSig",
		205: "docsCableUpstreamChannel",
		206: "econet",
		207: "pon155",
		208: "pon622",
		209: "bridge",
		210: "linegroup",
		211: "voiceEMFGD",
		212: "voiceFGDEANA",
		213: "voiceDID",
		214: "mpegTransport",
		215: "sixToFour",
		216: "gtp",
		217: "pdnEtherLoop1",
		218: "pdnEtherLoop2",
		219: "opticalChannelGroup",
		220: "homepna",
		221: "gfp",
		222: "ciscoISLvlan",
		223: "actelisMetaLOOP",
		224: "fcipLink",
		225: "rpr",
		226: "qam",
		227: "lmp",
		228: "cblVectaStar",
		229: "docsCableMCmtsDownstream",
		230: "adsl2",
		231: "macSecControlledIF",
		232: "macSecUncontrolledIF",
		233: "aviciOpticalEther",
		234: "atmbond",
		235: "voiceFGDOS",
		236: "mocaVersion1",
		237: "ieee80216WMAN",
		238: "adsl2plus",
		239: "dvbRcsMacLayer",
		240: "dvbTdm",
		241: "dvbRcsTdma",
		242: "x86Laps",
		243: "wwanPP",
		244: "wwanPP2",
		245: "voiceEBS",
		246: "ifPwType",
		247: "ilan",
		248: "pip",
		249: "aluELP",
		250: "gpon",
		251: "vdsl2",
		252: "capwapDot11Profile",
		253: "capwapDot11Bss",
		254: "capwapWtpVirtualRadio",
		255: "bits",
		256: "docsCableUpstreamRfPort",
		257: "cableDownstreamRfPort",
		258: "vmwareVirtualNic",
		259: "ieee802154",
		260: "otnOdu",
		261: "otnOtu",
		262: "ifVfiType",
		263: "g9981",
		264: "g9982",
		265: "g9983",
		266: "aluEpon",
		267: "aluEponOnu",
		268: "aluEponPhysicalUni",
		269: "aluEponLogicalLink",
		270: "aluGponOnu",
		271: "aluGponPhysicalUni",
		272: "vmwareNicTeam",
	}
	InterfaceType_value = map[string]int32{
		"unknown_interface_type":        0,
		"other":                         1,
		"regular1822":                   2,
		"hdh1822":                       3,
		"ddnX25":                        4,
		"rfc877x25":                     5,
		"ethernetCsmacd":                6,
		"iso88023Csmacd":                7,
		"iso88024TokenBus":              8,
		"iso88025TokenRing":             9,
		"iso88026Man":                   10,
		"starLan":                       11,
		"proteon10Mbit":                 12,
		"proteon80Mbit":                 13,
		"hyperchannel":                  14,
		"fddi":                          15,
		"lapb":                          16,
		"sdlc":                          17,
		"ds1":                           18,
		"e1":                            19,
		"basicISDN":                     20,
		"primaryISDN":                   21,
		"propPointToPointSerial":        22,
		"ppp":                           23,
		"softwareLoopback":              24,
		"eon":                           25,
		"ethernet3Mbit":                 26,
		"nsip":                          27,
		"slip":                          28,
		"ultra":                         29,
		"ds3":                           30,
		"sip":                           31,
		"frameRelay":                    32,
		"rs232":                         33,
		"para":                          34,
		"arcnet":                        35,
		"arcnetPlus":                    36,
		"atm":                           37,
		"miox25":                        38,
		"sonet":                         39,
		"x25ple":                        40,
		"iso88022llc":                   41,
		"localTalk":                     42,
		"smdsDxi":                       43,
		"frameRelayService":             44,
		"v35":                           45,
		"hssi":                          46,
		"hippi":                         47,
		"modem":                         48,
		"aal5":                          49,
		"sonetPath":                     50,
		"sonetVT":                       51,
		"smdsIcip":                      52,
		"propVirtual":                   53,
		"propMultiplexor":               54,
		"ieee80212":                     55,
		"fibreChannel":                  56,
		"hippiInterface":                57,
		"frameRelayInterconnect":        58,
		"aflane8023":                    59,
		"aflane8025":                    60,
		"cctEmul":                       61,
		"fastEther":                     62,
		"isdn":                          63,
		"v11":                           64,
		"v36":                           65,
		"g703at64k":                     66,
		"g703at2mb":                     67,
		"qllc":                          68,
		"fastEtherFX":                   69,
		"channel":                       70,
		"ieee80211":                     71,
		"ibm370parChan":                 72,
		"escon":                         73,
		"dlsw":                          74,
		"isdns":                         75,
		"isdnu":                         76,
		"lapd":                          77,
		"ipSwitch":                      78,
		"rsrb":                          79,
		"atmLogical":                    80,
		"ds0":                           81,
		"ds0Bundle":                     82,
		"bsc":                           83,
		"async":                         84,
		"cnr":                           85,
		"iso88025Dtr":                   86,
		"eplrs":                         87,
		"arap":                          88,
		"propCnls":                      89,
		"hostPad":                       90,
		"termPad":                       91,
		"frameRelayMPI":                 92,
		"x213":                          93,
		"adsl":                          94,
		"radsl":                         95,
		"sdsl":                          96,
		"vdsl":                          97,
		"iso88025CRFPInt":               98,
		"myrinet":                       99,
		"voiceEM":                       100,
		"voiceFXO":                      101,
		"voiceFXS":                      102,
		"voiceEncap":                    103,
		"voiceOverIp":                   104,
		"atmDxi":                        105,
		"atmFuni":                       106,
		"atmIma":                        107,
		"pppMultilinkBundle":            108,
		"ipOverCdlc":                    109,
		"ipOverClaw":                    110,
		"stackToStack":                  111,
		"virtualIpAddress":              112,
		"mpc":                           113,
		"ipOverAtm":                     114,
		"iso88025Fiber":                 115,
		"tdlc":                          116,
		"gigabitEthernet":               117,
		"hdlc":                          118,
		"lapf":                          119,
		"v37":                           120,
		"x25mlp":                        121,
		"x25huntGroup":                  122,
		"transpHdlc":                    123,
		"interleave":                    124,
		"fast":                          125,
		"ip":                            126,
		"docsCableMaclayer":             127,
		"docsCableDownstream":           128,
		"docsCableUpstream":             129,
		"a12MppSwitch":                  130,
		"tunnel":                        131,
		"coffee":                        132,
		"ces":                           133,
		"atmSubInterface":               134,
		"l2vlan":                        135,
		"l3ipvlan":                      136,
		"l3ipxvlan":                     137,
		"digitalPowerline":              138,
		"mediaMailOverIp":               139,
		"dtm":                           140,
		"dcn":                           141,
		"ipForward":                     142,
		"msdsl":                         143,
		"ieee1394":                      144,
		"if_gsn":                        145,
		"dvbRccMacLayer":                146,
		"dvbRccDownstream":              147,
		"dvbRccUpstream":                148,
		"atmVirtual":                    149,
		"mplsTunnel":                    150,
		"srp":                           151,
		"voiceOverAtm":                  152,
		"voiceOverFrameRelay":           153,
		"idsl":                          154,
		"compositeLink":                 155,
		"ss7SigLink":                    156,
		"propWirelessP2P":               157,
		"frForward":                     158,
		"rfc1483":                       159,
		"usb":                           160,
		"ieee8023adLag":                 161,
		"bgppolicyaccounting":           162,
		"frf16MfrBundle":                163,
		"h323Gatekeeper":                164,
		"h323Proxy":                     165,
		"mpls":                          166,
		"mfSigLink":                     167,
		"hdsl2":                         168,
		"shdsl":                         169,
		"ds1FDL":                        170,
		"pos":                           171,
		"dvbAsiIn":                      172,
		"dvbAsiOut":                     173,
		"plc":                           174,
		"nfas":                          175,
		"tr008":                         176,
		"gr303RDT":                      177,
		"gr303IDT":                      178,
		"isup":                          179,
		"propDocsWirelessMaclayer":      180,
		"propDocsWirelessDownstream":    181,
		"propDocsWirelessUpstream":      182,
		"hiperlan2":                     183,
		"propBWAp2Mp":                   184,
		"sonetOverheadChannel":          185,
		"digitalWrapperOverheadChannel": 186,
		"aal2":                          187,
		"radioMAC":                      188,
		"atmRadio":                      189,
		"imt":                           190,
		"mvl":                           191,
		"reachDSL":                      192,
		"frDlciEndPt":                   193,
		"atmVciEndPt":                   194,
		"opticalChannel":                195,
		"opticalTransport":              196,
		"propAtm":                       197,
		"voiceOverCable":                198,
		"infiniband":                    199,
		"teLink":                        200,
		"q2931":                         201,
		"virtualTg":                     202,
		"sipTg":                         203,
		"sipSig":                        204,
		"docsCableUpstreamChannel":      205,
		"econet":                        206,
		"pon155":                        207,
		"pon622":                        208,
		"bridge":                        209,
		"linegroup":                     210,
		"voiceEMFGD":                    211,
		"voiceFGDEANA":                  212,
		"voiceDID":                      213,
		"mpegTransport":                 214,
		"sixToFour":                     215,
		"gtp":                           216,
		"pdnEtherLoop1":                 217,
		"pdnEtherLoop2":                 218,
		"opticalChannelGroup":           219,
		"homepna":                       220,
		"gfp":                           221,
		"ciscoISLvlan":                  222,
		"actelisMetaLOOP":               223,
		"fcipLink":                      224,
		"rpr":                           225,
		"qam":                           226,
		"lmp":                           227,
		"cblVectaStar":                  228,
		"docsCableMCmtsDownstream":      229,
		"adsl2":                         230,
		"macSecControlledIF":            231,
		"macSecUncontrolledIF":          232,
		"aviciOpticalEther":             233,
		"atmbond":                       234,
		"voiceFGDOS":                    235,
		"mocaVersion1":                  236,
		"ieee80216WMAN":                 237,
		"adsl2plus":                     238,
		"dvbRcsMacLayer":                239,
		"dvbTdm":                        240,
		"dvbRcsTdma":                    241,
		"x86Laps":                       242,
		"wwanPP":                        243,
		"wwanPP2":                       244,
		"voiceEBS":                      245,
		"ifPwType":                      246,
		"ilan":                          247,
		"pip":                           248,
		"aluELP":                        249,
		"gpon":                          250,
		"vdsl2":                         251,
		"capwapDot11Profile":            252,
		"capwapDot11Bss":                253,
		"capwapWtpVirtualRadio":         254,
		"bits":                          255,
		"docsCableUpstreamRfPort":       256,
		"cableDownstreamRfPort":         257,
		"vmwareVirtualNic":              258,
		"ieee802154":                    259,
		"otnOdu":                        260,
		"otnOtu":                        261,
		"ifVfiType":                     262,
		"g9981":                         263,
		"g9982":                         264,
		"g9983":                         265,
		"aluEpon":                       266,
		"aluEponOnu":                    267,
		"aluEponPhysicalUni":            268,
		"aluEponLogicalLink":            269,
		"aluGponOnu":                    270,
		"aluGponPhysicalUni":            271,
		"vmwareNicTeam":                 272,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_element_proto_enumTypes[2].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_network_element_proto_enumTypes[2]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InterfaceType.Descriptor instead.
func (InterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{2}
}

type TransientError_Level int32

const (
	TransientError_INFO  TransientError_Level = 0
	TransientError_WARN  TransientError_Level = 1
	TransientError_FATAL TransientError_Level = 2
)

// Enum value maps for TransientError_Level.
var (
	TransientError_Level_name = map[int32]string{
		0: "INFO",
		1: "WARN",
		2: "FATAL",
	}
	TransientError_Level_value = map[string]int32{
		"INFO":  0,
		"WARN":  1,
		"FATAL": 2,
	}
)

func (x TransientError_Level) Enum() *TransientError_Level {
	p := new(TransientError_Level)
	*p = x
	return p
}

func (x TransientError_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransientError_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_network_element_proto_enumTypes[3].Descriptor()
}

func (TransientError_Level) Type() protoreflect.EnumType {
	return &file_network_element_proto_enumTypes[3]
}

func (x TransientError_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransientError_Level.Descriptor instead.
func (TransientError_Level) EnumDescriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{2, 0}
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname             string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty" bson:"hostname"`
	Version              string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" bson:"version"`
	SoftwareVersion      string                 `protobuf:"bytes,3,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty" bson:"software_version"`
	SnmpObjectId         string                 `protobuf:"bytes,4,opt,name=snmp_object_id,json=snmpObjectId,proto3" json:"snmp_object_id,omitempty" bson:"snmp_object_id"`
	InterfaceIndex       int32                  `protobuf:"varint,5,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty" bson:"interface_index"`
	Virtual              bool                   `protobuf:"varint,6,opt,name=virtual,proto3" json:"virtual,omitempty" bson:"virtual"`
	Uptime               string                 `protobuf:"bytes,7,opt,name=uptime,proto3" json:"uptime,omitempty" bson:"uptime"`
	Contact              string                 `protobuf:"bytes,8,opt,name=contact,proto3" json:"contact,omitempty" bson:"contact"`
	Sysname              string                 `protobuf:"bytes,9,opt,name=sysname,proto3" json:"sysname,omitempty" bson:"sysname"`
	Location             string                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty" bson:"location"`
	BridgeMacAddress     string                 `protobuf:"bytes,11,opt,name=bridge_mac_address,json=bridgeMacAddress,proto3" json:"bridge_mac_address,omitempty" bson:"bridge_mac_address"`
	Interfaces           []*Interface           `protobuf:"bytes,12,rep,name=interfaces,proto3" json:"interfaces,omitempty" bson:"interfaces"`
	AggregatedInterfaces []*AggregatedInterface `protobuf:"bytes,13,rep,name=aggregated_interfaces,json=aggregatedInterfaces,proto3" json:"aggregated_interfaces,omitempty" bson:"aggregated_interfaces"`
	Modules              []*Module              `protobuf:"bytes,14,rep,name=modules,proto3" json:"modules,omitempty" bson:"modules"`
	Driver               string                 `protobuf:"bytes,15,opt,name=driver,proto3" json:"driver,omitempty" bson:"driver"`
	TransientErrors      *TransientErrors       `protobuf:"bytes,16,opt,name=transient_errors,json=transientErrors,proto3" json:"transient_errors,omitempty" bson:"transient_errors"` // bool virtual = 16;
	LastChanged          string                 `protobuf:"bytes,17,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty" bson:"last_changed"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{0}
}

func (x *Element) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Element) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Element) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *Element) GetSnmpObjectId() string {
	if x != nil {
		return x.SnmpObjectId
	}
	return ""
}

func (x *Element) GetInterfaceIndex() int32 {
	if x != nil {
		return x.InterfaceIndex
	}
	return 0
}

func (x *Element) GetVirtual() bool {
	if x != nil {
		return x.Virtual
	}
	return false
}

func (x *Element) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *Element) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Element) GetSysname() string {
	if x != nil {
		return x.Sysname
	}
	return ""
}

func (x *Element) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Element) GetBridgeMacAddress() string {
	if x != nil {
		return x.BridgeMacAddress
	}
	return ""
}

func (x *Element) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Element) GetAggregatedInterfaces() []*AggregatedInterface {
	if x != nil {
		return x.AggregatedInterfaces
	}
	return nil
}

func (x *Element) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Element) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *Element) GetTransientErrors() *TransientErrors {
	if x != nil {
		return x.TransientErrors
	}
	return nil
}

func (x *Element) GetLastChanged() string {
	if x != nil {
		return x.LastChanged
	}
	return ""
}

type TransientErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*TransientError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty" bson:"errors"`
}

func (x *TransientErrors) Reset() {
	*x = TransientErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransientErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransientErrors) ProtoMessage() {}

func (x *TransientErrors) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransientErrors.ProtoReflect.Descriptor instead.
func (*TransientErrors) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{1}
}

func (x *TransientErrors) GetErrors() []*TransientError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type TransientError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" bson:"code"`
	Message string               `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" bson:"message"`
	Cause   string               `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty" bson:"cause"`
	Level   TransientError_Level `protobuf:"varint,4,opt,name=level,proto3,enum=networkelement.TransientError_Level" json:"level,omitempty" bson:"level"`
}

func (x *TransientError) Reset() {
	*x = TransientError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransientError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransientError) ProtoMessage() {}

func (x *TransientError) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransientError.ProtoReflect.Descriptor instead.
func (*TransientError) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{2}
}

func (x *TransientError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TransientError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransientError) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *TransientError) GetLevel() TransientError_Level {
	if x != nil {
		return x.Level
	}
	return TransientError_INFO
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id"`
	Slot         int32      `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty" bson:"slot"`
	Name         string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" bson:"name"`               // short version of description
	Description  string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:"description"` // vendor or manufacturer description
	Type         ModuleType `protobuf:"varint,5,opt,name=type,proto3,enum=networkelement.ModuleType" json:"type,omitempty" bson:"type"`
	SerialNumber string     `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" bson:"serial_number"`
	BoardType    string     `protobuf:"bytes,7,opt,name=board_type,json=boardType,proto3" json:"board_type,omitempty" bson:"board_type"`
	Bom          string     `protobuf:"bytes,8,opt,name=bom,proto3" json:"bom,omitempty" bson:"bom"`
	CleiCode     string     `protobuf:"bytes,9,opt,name=clei_code,json=cleiCode,proto3" json:"clei_code,omitempty" bson:"clei_code"`
	IssueNumber  string     `protobuf:"bytes,10,opt,name=issue_number,json=issueNumber,proto3" json:"issue_number,omitempty" bson:"issue_number"`
	MacAddress   string     `protobuf:"bytes,11,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty" bson:"mac_address"`
	Item         string     `protobuf:"bytes,12,opt,name=item,proto3" json:"item,omitempty" bson:"item"`
	Manufactured string     `protobuf:"bytes,13,opt,name=manufactured,proto3" json:"manufactured,omitempty" bson:"manufactured"`
	VendorName   string     `protobuf:"bytes,14,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty" bson:"vendor_name"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{3}
}

func (x *Module) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Module) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Module) GetType() ModuleType {
	if x != nil {
		return x.Type
	}
	return ModuleType_POWER
}

func (x *Module) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Module) GetBoardType() string {
	if x != nil {
		return x.BoardType
	}
	return ""
}

func (x *Module) GetBom() string {
	if x != nil {
		return x.Bom
	}
	return ""
}

func (x *Module) GetCleiCode() string {
	if x != nil {
		return x.CleiCode
	}
	return ""
}

func (x *Module) GetIssueNumber() string {
	if x != nil {
		return x.IssueNumber
	}
	return ""
}

func (x *Module) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Module) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *Module) GetManufactured() string {
	if x != nil {
		return x.Manufactured
	}
	return ""
}

func (x *Module) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

type InterfaceStatisticsInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets   int64 `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty" bson:"packets"`
	Bytes     int64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty" bson:"bytes"`
	Unicast   int64 `protobuf:"varint,3,opt,name=unicast,proto3" json:"unicast,omitempty" bson:"unicast"`
	Broadcast int64 `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty" bson:"broadcast"`
	Multicast int64 `protobuf:"varint,5,opt,name=multicast,proto3" json:"multicast,omitempty" bson:"multicast"`
	Pauses    int64 `protobuf:"varint,6,opt,name=pauses,proto3" json:"pauses,omitempty" bson:"pauses"`
	Errors    int64 `protobuf:"varint,7,opt,name=errors,proto3" json:"errors,omitempty" bson:"errors"`
	CrcErrors int64 `protobuf:"varint,8,opt,name=crc_errors,json=crcErrors,proto3" json:"crc_errors,omitempty" bson:"crc_errors"`
}

func (x *InterfaceStatisticsInput) Reset() {
	*x = InterfaceStatisticsInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStatisticsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStatisticsInput) ProtoMessage() {}

func (x *InterfaceStatisticsInput) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStatisticsInput.ProtoReflect.Descriptor instead.
func (*InterfaceStatisticsInput) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{4}
}

func (x *InterfaceStatisticsInput) GetPackets() int64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetUnicast() int64 {
	if x != nil {
		return x.Unicast
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetBroadcast() int64 {
	if x != nil {
		return x.Broadcast
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetMulticast() int64 {
	if x != nil {
		return x.Multicast
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetPauses() int64 {
	if x != nil {
		return x.Pauses
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetErrors() int64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

func (x *InterfaceStatisticsInput) GetCrcErrors() int64 {
	if x != nil {
		return x.CrcErrors
	}
	return 0
}

type InterfaceStatisticsOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets   int64 `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty" bson:"packets"`
	Bytes     int64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty" bson:"bytes"`
	Unicast   int64 `protobuf:"varint,3,opt,name=unicast,proto3" json:"unicast,omitempty" bson:"unicast"`
	Broadcast int64 `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty" bson:"broadcast"`
	Multicast int64 `protobuf:"varint,5,opt,name=multicast,proto3" json:"multicast,omitempty" bson:"multicast"`
	Pauses    int64 `protobuf:"varint,6,opt,name=pauses,proto3" json:"pauses,omitempty" bson:"pauses"`
	Errors    int64 `protobuf:"varint,7,opt,name=errors,proto3" json:"errors,omitempty" bson:"errors"`
}

func (x *InterfaceStatisticsOutput) Reset() {
	*x = InterfaceStatisticsOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStatisticsOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStatisticsOutput) ProtoMessage() {}

func (x *InterfaceStatisticsOutput) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStatisticsOutput.ProtoReflect.Descriptor instead.
func (*InterfaceStatisticsOutput) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{5}
}

func (x *InterfaceStatisticsOutput) GetPackets() int64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *InterfaceStatisticsOutput) GetBytes() int64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *InterfaceStatisticsOutput) GetUnicast() int64 {
	if x != nil {
		return x.Unicast
	}
	return 0
}

func (x *InterfaceStatisticsOutput) GetBroadcast() int64 {
	if x != nil {
		return x.Broadcast
	}
	return 0
}

func (x *InterfaceStatisticsOutput) GetMulticast() int64 {
	if x != nil {
		return x.Multicast
	}
	return 0
}

func (x *InterfaceStatisticsOutput) GetPauses() int64 {
	if x != nil {
		return x.Pauses
	}
	return 0
}

func (x *InterfaceStatisticsOutput) GetErrors() int64 {
	if x != nil {
		return x.Errors
	}
	return 0
}

type InterfaceStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *InterfaceStatisticsInput  `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty" bson:"input"`
	Output *InterfaceStatisticsOutput `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty" bson:"output"`
	Resets int64                      `protobuf:"varint,3,opt,name=resets,proto3" json:"resets,omitempty" bson:"resets"`
	// Analysis of interface statistics
	Analysis []*analysispb.Analysis `protobuf:"bytes,4,rep,name=analysis,proto3" json:"analysis,omitempty" bson:"analysis"`
}

func (x *InterfaceStatistics) Reset() {
	*x = InterfaceStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceStatistics) ProtoMessage() {}

func (x *InterfaceStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceStatistics.ProtoReflect.Descriptor instead.
func (*InterfaceStatistics) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{6}
}

func (x *InterfaceStatistics) GetInput() *InterfaceStatisticsInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *InterfaceStatistics) GetOutput() *InterfaceStatisticsOutput {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *InterfaceStatistics) GetResets() int64 {
	if x != nil {
		return x.Resets
	}
	return 0
}

func (x *InterfaceStatistics) GetAnalysis() []*analysispb.Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregatedId            string                                   `protobuf:"bytes,1,opt,name=aggregated_id,json=aggregatedId,proto3" json:"aggregated_id,omitempty" bson:"aggregated_id"`
	Index                   int64                                    `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty" bson:"index"`            // snmp index
	Alias                   string                                   `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty" bson:"alias"`             // Vendor specific alias of interface. GigabitEthernt ...
	Description             string                                   `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:"description"` // configured description
	Hwaddress               string                                   `protobuf:"bytes,5,opt,name=hwaddress,proto3" json:"hwaddress,omitempty" bson:"hwaddress"`
	Type                    InterfaceType                            `protobuf:"varint,6,opt,name=type,proto3,enum=networkelement.InterfaceType" json:"type,omitempty" bson:"type"`
	AdminStatus             InterfaceStatus                          `protobuf:"varint,7,opt,name=admin_status,json=adminStatus,proto3,enum=networkelement.InterfaceStatus" json:"admin_status,omitempty" bson:"admin_status"`                   // the desired state of the interface
	OperationalStatus       InterfaceStatus                          `protobuf:"varint,8,opt,name=operational_status,json=operationalStatus,proto3,enum=networkelement.InterfaceStatus" json:"operational_status,omitempty" bson:"operational_status"` // the current state of the interface
	LastChanged             *timestamppb.Timestamp                   `protobuf:"bytes,9,opt,name=last_changed,json=lastChanged,proto3" json:"last_changed,omitempty" bson:"last_changed"`
	Speed                   int64                                    `protobuf:"varint,11,opt,name=speed,proto3" json:"speed,omitempty" bson:"speed"`
	Duplex                  string                                   `protobuf:"bytes,12,opt,name=duplex,proto3" json:"duplex,omitempty" bson:"duplex"`
	Mtu                     int64                                    `protobuf:"varint,13,opt,name=mtu,proto3" json:"mtu,omitempty" bson:"mtu"`
	Stats                   *InterfaceStatistics                     `protobuf:"bytes,14,opt,name=stats,proto3" json:"stats,omitempty" bson:"stats"`
	Transceiver             *Transceiver                             `protobuf:"bytes,15,opt,name=transceiver,proto3" json:"transceiver,omitempty" bson:"transceiver"`
	Neighbor                *Neighbor                                `protobuf:"bytes,16,opt,name=neighbor,proto3" json:"neighbor,omitempty" bson:"neighbor"`
	MacAddressTable         []*MACEntry                              `protobuf:"bytes,17,rep,name=mac_address_table,json=macAddressTable,proto3" json:"mac_address_table,omitempty" bson:"mac_address_table"`
	DhcpTable               []*DHCPEntry                             `protobuf:"bytes,18,rep,name=dhcp_table,json=dhcpTable,proto3" json:"dhcp_table,omitempty" bson:"dhcp_table"`
	Config                  string                                   `protobuf:"bytes,19,opt,name=config,proto3" json:"config,omitempty" bson:"config"` // text blob of current config
	InterfaceStatus         int64                                    `protobuf:"varint,20,opt,name=interface_status,json=interfaceStatus,proto3" json:"interface_status,omitempty" bson:"interface_status"`
	ConfiguredTrafficPolicy *trafficpolicypb.ConfiguredTrafficPolicy `protobuf:"bytes,21,opt,name=configuredTrafficPolicy,proto3" json:"configuredTrafficPolicy,omitempty" bson:"configuredTrafficPolicy"`
	Qos                     *trafficpolicypb.QOS                     `protobuf:"bytes,22,opt,name=qos,proto3" json:"qos,omitempty" bson:"qos"`
	// provider can fill this in based on collected data
	ConnectedSdd *Element `protobuf:"bytes,23,opt,name=connected_sdd,json=connectedSdd,proto3" json:"connected_sdd,omitempty" bson:"connected_sdd"` // connected service demarcation device
	// Analysis of interface health
	Analysis []*analysispb.Analysis `protobuf:"bytes,24,rep,name=analysis,proto3" json:"analysis,omitempty" bson:"analysis"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{7}
}

func (x *Interface) GetAggregatedId() string {
	if x != nil {
		return x.AggregatedId
	}
	return ""
}

func (x *Interface) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Interface) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Interface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Interface) GetHwaddress() string {
	if x != nil {
		return x.Hwaddress
	}
	return ""
}

func (x *Interface) GetType() InterfaceType {
	if x != nil {
		return x.Type
	}
	return InterfaceType_unknown_interface_type
}

func (x *Interface) GetAdminStatus() InterfaceStatus {
	if x != nil {
		return x.AdminStatus
	}
	return InterfaceStatus_unset
}

func (x *Interface) GetOperationalStatus() InterfaceStatus {
	if x != nil {
		return x.OperationalStatus
	}
	return InterfaceStatus_unset
}

func (x *Interface) GetLastChanged() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChanged
	}
	return nil
}

func (x *Interface) GetSpeed() int64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Interface) GetDuplex() string {
	if x != nil {
		return x.Duplex
	}
	return ""
}

func (x *Interface) GetMtu() int64 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Interface) GetStats() *InterfaceStatistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Interface) GetTransceiver() *Transceiver {
	if x != nil {
		return x.Transceiver
	}
	return nil
}

func (x *Interface) GetNeighbor() *Neighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *Interface) GetMacAddressTable() []*MACEntry {
	if x != nil {
		return x.MacAddressTable
	}
	return nil
}

func (x *Interface) GetDhcpTable() []*DHCPEntry {
	if x != nil {
		return x.DhcpTable
	}
	return nil
}

func (x *Interface) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *Interface) GetInterfaceStatus() int64 {
	if x != nil {
		return x.InterfaceStatus
	}
	return 0
}

func (x *Interface) GetConfiguredTrafficPolicy() *trafficpolicypb.ConfiguredTrafficPolicy {
	if x != nil {
		return x.ConfiguredTrafficPolicy
	}
	return nil
}

func (x *Interface) GetQos() *trafficpolicypb.QOS {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *Interface) GetConnectedSdd() *Element {
	if x != nil {
		return x.ConnectedSdd
	}
	return nil
}

func (x *Interface) GetAnalysis() []*analysispb.Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type AggregatedInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority   int64        `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" bson:"priority"`
	Mode       string       `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty" bson:"mode"`
	Type       string       `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	OperKey    string       `protobuf:"bytes,4,opt,name=oper_key,json=operKey,proto3" json:"oper_key,omitempty" bson:"oper_key"`
	Status     string       `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" bson:"status"`
	Timestamp  string       `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
	Interfaces []*Interface `protobuf:"bytes,7,rep,name=interfaces,proto3" json:"interfaces,omitempty" bson:"interfaces"`
}

func (x *AggregatedInterface) Reset() {
	*x = AggregatedInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedInterface) ProtoMessage() {}

func (x *AggregatedInterface) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedInterface.ProtoReflect.Descriptor instead.
func (*AggregatedInterface) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{8}
}

func (x *AggregatedInterface) GetPriority() int64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *AggregatedInterface) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AggregatedInterface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AggregatedInterface) GetOperKey() string {
	if x != nil {
		return x.OperKey
	}
	return ""
}

func (x *AggregatedInterface) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AggregatedInterface) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *AggregatedInterface) GetInterfaces() []*Interface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

type Transceivers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transceivers []*Transceiver `protobuf:"bytes,1,rep,name=transceivers,proto3" json:"transceivers,omitempty" bson:"transceivers"`
}

func (x *Transceivers) Reset() {
	*x = Transceivers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transceivers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transceivers) ProtoMessage() {}

func (x *Transceivers) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transceivers.ProtoReflect.Descriptor instead.
func (*Transceivers) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{9}
}

func (x *Transceivers) GetTransceivers() []*Transceiver {
	if x != nil {
		return x.Transceivers
	}
	return nil
}

type Transceiver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhysicalPortIndex int64                    `protobuf:"varint,1,opt,name=physical_port_index,json=physicalPortIndex,proto3" json:"physical_port_index,omitempty" bson:"physical_port_index"`
	ConnectorType     string                   `protobuf:"bytes,2,opt,name=connector_type,json=connectorType,proto3" json:"connector_type,omitempty" bson:"connector_type"`
	Ddm               bool                     `protobuf:"varint,3,opt,name=ddm,proto3" json:"ddm,omitempty" bson:"ddm"`
	Vendor            string                   `protobuf:"bytes,4,opt,name=vendor,proto3" json:"vendor,omitempty" bson:"vendor"`
	Type              string                   `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty" bson:"type"`
	TransferDistance  string                   `protobuf:"bytes,6,opt,name=transfer_distance,json=transferDistance,proto3" json:"transfer_distance,omitempty" bson:"transfer_distance"`
	Wavelength        string                   `protobuf:"bytes,7,opt,name=wavelength,proto3" json:"wavelength,omitempty" bson:"wavelength"`
	SerialNumber      string                   `protobuf:"bytes,8,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty" bson:"serial_number"`
	PartNumber        string                   `protobuf:"bytes,9,opt,name=part_number,json=partNumber,proto3" json:"part_number,omitempty" bson:"part_number"`
	ManufacturingDate string                   `protobuf:"bytes,10,opt,name=manufacturing_date,json=manufacturingDate,proto3" json:"manufacturing_date,omitempty" bson:"manufacturing_date"`
	Stats             []*TransceiverStatistics `protobuf:"bytes,11,rep,name=stats,proto3" json:"stats,omitempty" bson:"stats"`
	Analysis          []*analysispb.Analysis   `protobuf:"bytes,12,rep,name=analysis,proto3" json:"analysis,omitempty" bson:"analysis"`
}

func (x *Transceiver) Reset() {
	*x = Transceiver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transceiver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transceiver) ProtoMessage() {}

func (x *Transceiver) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transceiver.ProtoReflect.Descriptor instead.
func (*Transceiver) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{10}
}

func (x *Transceiver) GetPhysicalPortIndex() int64 {
	if x != nil {
		return x.PhysicalPortIndex
	}
	return 0
}

func (x *Transceiver) GetConnectorType() string {
	if x != nil {
		return x.ConnectorType
	}
	return ""
}

func (x *Transceiver) GetDdm() bool {
	if x != nil {
		return x.Ddm
	}
	return false
}

func (x *Transceiver) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Transceiver) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Transceiver) GetTransferDistance() string {
	if x != nil {
		return x.TransferDistance
	}
	return ""
}

func (x *Transceiver) GetWavelength() string {
	if x != nil {
		return x.Wavelength
	}
	return ""
}

func (x *Transceiver) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Transceiver) GetPartNumber() string {
	if x != nil {
		return x.PartNumber
	}
	return ""
}

func (x *Transceiver) GetManufacturingDate() string {
	if x != nil {
		return x.ManufacturingDate
	}
	return ""
}

func (x *Transceiver) GetStats() []*TransceiverStatistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Transceiver) GetAnalysis() []*analysispb.Analysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type TransceiverStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current   float64 `protobuf:"fixed64,1,opt,name=current,proto3" json:"current,omitempty" bson:"current"` // should be returned in mA
	Rx        float64 `protobuf:"fixed64,2,opt,name=rx,proto3" json:"rx,omitempty" bson:"rx"`           // should be returned in dBm
	Tx        float64 `protobuf:"fixed64,3,opt,name=tx,proto3" json:"tx,omitempty" bson:"tx"`           // should be returned in dBm
	Temp      float64 `protobuf:"fixed64,4,opt,name=temp,proto3" json:"temp,omitempty" bson:"temp"`       // in celsius
	Voltage   float64 `protobuf:"fixed64,5,opt,name=voltage,proto3" json:"voltage,omitempty" bson:"voltage"` // should be returned in V
	Timestamp string  `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
}

func (x *TransceiverStatistics) Reset() {
	*x = TransceiverStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransceiverStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransceiverStatistics) ProtoMessage() {}

func (x *TransceiverStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransceiverStatistics.ProtoReflect.Descriptor instead.
func (*TransceiverStatistics) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{11}
}

func (x *TransceiverStatistics) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TransceiverStatistics) GetRx() float64 {
	if x != nil {
		return x.Rx
	}
	return 0
}

func (x *TransceiverStatistics) GetTx() float64 {
	if x != nil {
		return x.Tx
	}
	return 0
}

func (x *TransceiverStatistics) GetTemp() float64 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *TransceiverStatistics) GetVoltage() float64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *TransceiverStatistics) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Neighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectInterfaceType       string `protobuf:"bytes,1,opt,name=connect_interface_type,json=connectInterfaceType,proto3" json:"connect_interface_type,omitempty" bson:"connect_interface_type"`
	RemoteInterface            string `protobuf:"bytes,2,opt,name=remote_interface,json=remoteInterface,proto3" json:"remote_interface,omitempty" bson:"remote_interface"`
	RemoteHostname             string `protobuf:"bytes,3,opt,name=remote_hostname,json=remoteHostname,proto3" json:"remote_hostname,omitempty" bson:"remote_hostname"`
	RemoteMgmtIpAddress        string `protobuf:"bytes,4,opt,name=remote_mgmt_ip_address,json=remoteMgmtIpAddress,proto3" json:"remote_mgmt_ip_address,omitempty" bson:"remote_mgmt_ip_address"`
	RemoteInterfaceDescription string `protobuf:"bytes,5,opt,name=remote_interface_description,json=remoteInterfaceDescription,proto3" json:"remote_interface_description,omitempty" bson:"remote_interface_description"`
	ChassisId                  string `protobuf:"bytes,6,opt,name=chassis_id,json=chassisId,proto3" json:"chassis_id,omitempty" bson:"chassis_id"`
	Pvid                       string `protobuf:"bytes,7,opt,name=pvid,proto3" json:"pvid,omitempty" bson:"pvid"`
	Lagg                       bool   `protobuf:"varint,8,opt,name=lagg,proto3" json:"lagg,omitempty" bson:"lagg"`
	Timestamp                  string `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
}

func (x *Neighbor) Reset() {
	*x = Neighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighbor) ProtoMessage() {}

func (x *Neighbor) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighbor.ProtoReflect.Descriptor instead.
func (*Neighbor) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{12}
}

func (x *Neighbor) GetConnectInterfaceType() string {
	if x != nil {
		return x.ConnectInterfaceType
	}
	return ""
}

func (x *Neighbor) GetRemoteInterface() string {
	if x != nil {
		return x.RemoteInterface
	}
	return ""
}

func (x *Neighbor) GetRemoteHostname() string {
	if x != nil {
		return x.RemoteHostname
	}
	return ""
}

func (x *Neighbor) GetRemoteMgmtIpAddress() string {
	if x != nil {
		return x.RemoteMgmtIpAddress
	}
	return ""
}

func (x *Neighbor) GetRemoteInterfaceDescription() string {
	if x != nil {
		return x.RemoteInterfaceDescription
	}
	return ""
}

func (x *Neighbor) GetChassisId() string {
	if x != nil {
		return x.ChassisId
	}
	return ""
}

func (x *Neighbor) GetPvid() string {
	if x != nil {
		return x.Pvid
	}
	return ""
}

func (x *Neighbor) GetLagg() bool {
	if x != nil {
		return x.Lagg
	}
	return false
}

func (x *Neighbor) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type MACEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HardwareAddress string `protobuf:"bytes,1,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty" bson:"hardware_address"`
	Vlan            int64  `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty" bson:"vlan"`
	Vendor          string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" bson:"vendor"`
	Timestamp       string `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
}

func (x *MACEntry) Reset() {
	*x = MACEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MACEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MACEntry) ProtoMessage() {}

func (x *MACEntry) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MACEntry.ProtoReflect.Descriptor instead.
func (*MACEntry) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{13}
}

func (x *MACEntry) GetHardwareAddress() string {
	if x != nil {
		return x.HardwareAddress
	}
	return ""
}

func (x *MACEntry) GetVlan() int64 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *MACEntry) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *MACEntry) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type DHCPEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress       string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty" bson:"ip_address"`
	HardwareAddress string `protobuf:"bytes,2,opt,name=hardware_address,json=hardwareAddress,proto3" json:"hardware_address,omitempty" bson:"hardware_address"`
	Vendor          string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty" bson:"vendor"`
	Vlan            int64  `protobuf:"varint,4,opt,name=vlan,proto3" json:"vlan,omitempty" bson:"vlan"`
	Timestamp       string `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
}

func (x *DHCPEntry) Reset() {
	*x = DHCPEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHCPEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHCPEntry) ProtoMessage() {}

func (x *DHCPEntry) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHCPEntry.ProtoReflect.Descriptor instead.
func (*DHCPEntry) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{14}
}

func (x *DHCPEntry) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *DHCPEntry) GetHardwareAddress() string {
	if x != nil {
		return x.HardwareAddress
	}
	return ""
}

func (x *DHCPEntry) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *DHCPEntry) GetVlan() int64 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *DHCPEntry) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type InterfaceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp string `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty" bson:"timestamp"`
}

func (x *InterfaceMetrics) Reset() {
	*x = InterfaceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterfaceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterfaceMetrics) ProtoMessage() {}

func (x *InterfaceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterfaceMetrics.ProtoReflect.Descriptor instead.
func (*InterfaceMetrics) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{15}
}

func (x *InterfaceMetrics) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type PhysicalPortInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name"`
	Oid   string `protobuf:"bytes,2,opt,name=oid,proto3" json:"oid,omitempty" bson:"oid"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" bson:"value"`
}

func (x *PhysicalPortInformation) Reset() {
	*x = PhysicalPortInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_element_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhysicalPortInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhysicalPortInformation) ProtoMessage() {}

func (x *PhysicalPortInformation) ProtoReflect() protoreflect.Message {
	mi := &file_network_element_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhysicalPortInformation.ProtoReflect.Descriptor instead.
func (*PhysicalPortInformation) Descriptor() ([]byte, []int) {
	return file_network_element_proto_rawDescGZIP(), []int{16}
}

func (x *PhysicalPortInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PhysicalPortInformation) GetOid() string {
	if x != nil {
		return x.Oid
	}
	return ""
}

func (x *PhysicalPortInformation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_network_element_proto protoreflect.FileDescriptor

var file_network_element_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb7,
	0x05, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x6e, 0x6d, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x6d, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x73, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x15, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x14, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e,
	0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x26, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52,
	0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x22, 0xa2,
	0x03, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x6f, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x65,
	0x69, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x65, 0x69, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xef, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72,
	0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x63, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x75,
	0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x41, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xcd, 0x08, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x77, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x68, 0x77, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42,
	0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65,
	0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x74,
	0x75, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x44, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x41,
	0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x48, 0x43,
	0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x68, 0x63, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x17,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x25, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x51, 0x4f, 0x53, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x3c,
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x64, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x64, 0x64, 0x12, 0x2e, 0x0a, 0x08,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xe5, 0x01, 0x0a,
	0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x22, 0xd1, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x64, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64, 0x64, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x76, 0x65, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x76,
	0x65, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x72, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x72, 0x78, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x74, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf0, 0x02, 0x0a, 0x08, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x73, 0x73,
	0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x73, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x76, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x67, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x67, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x7f, 0x0a, 0x08,
	0x4d, 0x41, 0x43, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9f, 0x01,
	0x0a, 0x09, 0x44, 0x48, 0x43, 0x50, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x76, 0x6c, 0x61,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x30, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x55, 0x0a, 0x17, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x2f, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x02, 0x2a, 0x78, 0x0a, 0x0f, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x75, 0x70, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0x07, 0x2a, 0xcf, 0x21, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x31, 0x38, 0x32, 0x32, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x68, 0x64, 0x68, 0x31, 0x38, 0x32, 0x32, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x64,
	0x6e, 0x58, 0x32, 0x35, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x72, 0x66, 0x63, 0x38, 0x37, 0x37,
	0x78, 0x32, 0x35, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x73, 0x6f,
	0x38, 0x38, 0x30, 0x32, 0x33, 0x43, 0x73, 0x6d, 0x61, 0x63, 0x64, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x34, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x75,
	0x73, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x73,
	0x6f, 0x38, 0x38, 0x30, 0x32, 0x36, 0x4d, 0x61, 0x6e, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x4c, 0x61, 0x6e, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x6f, 0x6e, 0x31, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x6f, 0x6e, 0x38, 0x30, 0x4d, 0x62, 0x69, 0x74, 0x10, 0x0d, 0x12, 0x10,
	0x0a, 0x0c, 0x68, 0x79, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x0e,
	0x12, 0x08, 0x0a, 0x04, 0x66, 0x64, 0x64, 0x69, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61,
	0x70, 0x62, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x73, 0x64, 0x6c, 0x63, 0x10, 0x11, 0x12, 0x07,
	0x0a, 0x03, 0x64, 0x73, 0x31, 0x10, 0x12, 0x12, 0x06, 0x0a, 0x02, 0x65, 0x31, 0x10, 0x13, 0x12,
	0x0d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x53, 0x44, 0x4e, 0x10, 0x14, 0x12, 0x0f,
	0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x53, 0x44, 0x4e, 0x10, 0x15, 0x12,
	0x1a, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x6f, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x70,
	0x70, 0x70, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x6f,
	0x6e, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x33,
	0x4d, 0x62, 0x69, 0x74, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x73, 0x69, 0x70, 0x10, 0x1b,
	0x12, 0x08, 0x0a, 0x04, 0x73, 0x6c, 0x69, 0x70, 0x10, 0x1c, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x6c,
	0x74, 0x72, 0x61, 0x10, 0x1d, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x73, 0x33, 0x10, 0x1e, 0x12, 0x07,
	0x0a, 0x03, 0x73, 0x69, 0x70, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x20, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x73, 0x32, 0x33, 0x32,
	0x10, 0x21, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x61, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06,
	0x61, 0x72, 0x63, 0x6e, 0x65, 0x74, 0x10, 0x23, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x6e,
	0x65, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x24, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x74, 0x6d, 0x10,
	0x25, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x6f, 0x78, 0x32, 0x35, 0x10, 0x26, 0x12, 0x09, 0x0a,
	0x05, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x78, 0x32, 0x35, 0x70,
	0x6c, 0x65, 0x10, 0x28, 0x12, 0x0f, 0x0a, 0x0b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x32,
	0x6c, 0x6c, 0x63, 0x10, 0x29, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x61,
	0x6c, 0x6b, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x6d, 0x64, 0x73, 0x44, 0x78, 0x69, 0x10,
	0x2b, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x76, 0x33, 0x35, 0x10,
	0x2d, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x73, 0x73, 0x69, 0x10, 0x2e, 0x12, 0x09, 0x0a, 0x05, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x10, 0x2f, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6d, 0x10,
	0x30, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x61, 0x6c, 0x35, 0x10, 0x31, 0x12, 0x0d, 0x0a, 0x09, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x10, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x6f,
	0x6e, 0x65, 0x74, 0x56, 0x54, 0x10, 0x33, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x6d, 0x64, 0x73, 0x49,
	0x63, 0x69, 0x70, 0x10, 0x34, 0x12, 0x0f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x10, 0x35, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x6f, 0x72, 0x10, 0x36, 0x12, 0x0d, 0x0a, 0x09, 0x69,
	0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x32, 0x10, 0x37, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x69,
	0x62, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x38, 0x12, 0x12, 0x0a, 0x0e,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x39,
	0x12, 0x1a, 0x0a, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x3a, 0x12, 0x0e, 0x0a, 0x0a,
	0x61, 0x66, 0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x33, 0x10, 0x3b, 0x12, 0x0e, 0x0a, 0x0a,
	0x61, 0x66, 0x6c, 0x61, 0x6e, 0x65, 0x38, 0x30, 0x32, 0x35, 0x10, 0x3c, 0x12, 0x0b, 0x0a, 0x07,
	0x63, 0x63, 0x74, 0x45, 0x6d, 0x75, 0x6c, 0x10, 0x3d, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x61, 0x73,
	0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x10, 0x3e, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x73, 0x64, 0x6e,
	0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x76, 0x31, 0x31, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x76,
	0x33, 0x36, 0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x36, 0x34,
	0x6b, 0x10, 0x42, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x37, 0x30, 0x33, 0x61, 0x74, 0x32, 0x6d, 0x62,
	0x10, 0x43, 0x12, 0x08, 0x0a, 0x04, 0x71, 0x6c, 0x6c, 0x63, 0x10, 0x44, 0x12, 0x0f, 0x0a, 0x0b,
	0x66, 0x61, 0x73, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x46, 0x58, 0x10, 0x45, 0x12, 0x0b, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x46, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x65,
	0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x31, 0x10, 0x47, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x62, 0x6d,
	0x33, 0x37, 0x30, 0x70, 0x61, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x10, 0x48, 0x12, 0x09, 0x0a, 0x05,
	0x65, 0x73, 0x63, 0x6f, 0x6e, 0x10, 0x49, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x6c, 0x73, 0x77, 0x10,
	0x4a, 0x12, 0x09, 0x0a, 0x05, 0x69, 0x73, 0x64, 0x6e, 0x73, 0x10, 0x4b, 0x12, 0x09, 0x0a, 0x05,
	0x69, 0x73, 0x64, 0x6e, 0x75, 0x10, 0x4c, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x70, 0x64, 0x10,
	0x4d, 0x12, 0x0c, 0x0a, 0x08, 0x69, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0x4e, 0x12,
	0x08, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x62, 0x10, 0x4f, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x74, 0x6d,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x73, 0x30,
	0x10, 0x51, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x73, 0x30, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x10,
	0x52, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x73, 0x63, 0x10, 0x53, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x73,
	0x79, 0x6e, 0x63, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x6e, 0x72, 0x10, 0x55, 0x12, 0x0f,
	0x0a, 0x0b, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x44, 0x74, 0x72, 0x10, 0x56, 0x12,
	0x09, 0x0a, 0x05, 0x65, 0x70, 0x6c, 0x72, 0x73, 0x10, 0x57, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x72,
	0x61, 0x70, 0x10, 0x58, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x43, 0x6e, 0x6c, 0x73,
	0x10, 0x59, 0x12, 0x0b, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x64, 0x10, 0x5a, 0x12,
	0x0b, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x50, 0x61, 0x64, 0x10, 0x5b, 0x12, 0x11, 0x0a, 0x0d,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x50, 0x49, 0x10, 0x5c, 0x12,
	0x08, 0x0a, 0x04, 0x78, 0x32, 0x31, 0x33, 0x10, 0x5d, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x64, 0x73,
	0x6c, 0x10, 0x5e, 0x12, 0x09, 0x0a, 0x05, 0x72, 0x61, 0x64, 0x73, 0x6c, 0x10, 0x5f, 0x12, 0x08,
	0x0a, 0x04, 0x73, 0x64, 0x73, 0x6c, 0x10, 0x60, 0x12, 0x08, 0x0a, 0x04, 0x76, 0x64, 0x73, 0x6c,
	0x10, 0x61, 0x12, 0x13, 0x0a, 0x0f, 0x69, 0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x43, 0x52,
	0x46, 0x50, 0x49, 0x6e, 0x74, 0x10, 0x62, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x79, 0x72, 0x69, 0x6e,
	0x65, 0x74, 0x10, 0x63, 0x12, 0x0b, 0x0a, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x10,
	0x64, 0x12, 0x0c, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x4f, 0x10, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x58, 0x53, 0x10, 0x66, 0x12, 0x0e, 0x0a,
	0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x10, 0x67, 0x12, 0x0f, 0x0a,
	0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x10, 0x68, 0x12, 0x0a,
	0x0a, 0x06, 0x61, 0x74, 0x6d, 0x44, 0x78, 0x69, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x61, 0x74,
	0x6d, 0x46, 0x75, 0x6e, 0x69, 0x10, 0x6a, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x74, 0x6d, 0x49, 0x6d,
	0x61, 0x10, 0x6b, 0x12, 0x16, 0x0a, 0x12, 0x70, 0x70, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c,
	0x69, 0x6e, 0x6b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x69,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x64, 0x6c, 0x63, 0x10, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x69,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x77, 0x10, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x10, 0x6f, 0x12, 0x14, 0x0a,
	0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x70, 0x63, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09,
	0x69, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x41, 0x74, 0x6d, 0x10, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x69,
	0x73, 0x6f, 0x38, 0x38, 0x30, 0x32, 0x35, 0x46, 0x69, 0x62, 0x65, 0x72, 0x10, 0x73, 0x12, 0x08,
	0x0a, 0x04, 0x74, 0x64, 0x6c, 0x63, 0x10, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x67, 0x69, 0x67, 0x61,
	0x62, 0x69, 0x74, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x10, 0x75, 0x12, 0x08, 0x0a,
	0x04, 0x68, 0x64, 0x6c, 0x63, 0x10, 0x76, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x61, 0x70, 0x66, 0x10,
	0x77, 0x12, 0x07, 0x0a, 0x03, 0x76, 0x33, 0x37, 0x10, 0x78, 0x12, 0x0a, 0x0a, 0x06, 0x78, 0x32,
	0x35, 0x6d, 0x6c, 0x70, 0x10, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x78, 0x32, 0x35, 0x68, 0x75, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x7a, 0x12, 0x0e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x48, 0x64, 0x6c, 0x63, 0x10, 0x7b, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x10, 0x7c, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x61, 0x73, 0x74,
	0x10, 0x7d, 0x12, 0x06, 0x0a, 0x02, 0x69, 0x70, 0x10, 0x7e, 0x12, 0x15, 0x0a, 0x11, 0x64, 0x6f,
	0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x10,
	0x7f, 0x12, 0x18, 0x0a, 0x13, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x80, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x64,
	0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x10, 0x81, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x61, 0x31, 0x32, 0x4d, 0x70, 0x70, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x10, 0x82, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x10, 0x83, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x10, 0x84, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x63, 0x65, 0x73, 0x10, 0x85, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x61, 0x74,
	0x6d, 0x53, 0x75, 0x62, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x10, 0x86, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x6c, 0x32, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x87, 0x01, 0x12, 0x0d, 0x0a,
	0x08, 0x6c, 0x33, 0x69, 0x70, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x88, 0x01, 0x12, 0x0e, 0x0a, 0x09,
	0x6c, 0x33, 0x69, 0x70, 0x78, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0x89, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0x8a, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x61, 0x69, 0x6c,
	0x4f, 0x76, 0x65, 0x72, 0x49, 0x70, 0x10, 0x8b, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x64, 0x74, 0x6d,
	0x10, 0x8c, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x64, 0x63, 0x6e, 0x10, 0x8d, 0x01, 0x12, 0x0e, 0x0a,
	0x09, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x8e, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x6d, 0x73, 0x64, 0x73, 0x6c, 0x10, 0x8f, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x69, 0x65, 0x65,
	0x65, 0x31, 0x33, 0x39, 0x34, 0x10, 0x90, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x69, 0x66, 0x5f, 0x67,
	0x73, 0x6e, 0x10, 0x91, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x4d,
	0x61, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0x92, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x64, 0x76,
	0x62, 0x52, 0x63, 0x63, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0x93,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x63, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x10, 0x94, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x74, 0x6d, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x10, 0x95, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x96, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x73, 0x72, 0x70, 0x10,
	0x97, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x41,
	0x74, 0x6d, 0x10, 0x98, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x99, 0x01, 0x12,
	0x09, 0x0a, 0x04, 0x69, 0x64, 0x73, 0x6c, 0x10, 0x9a, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x9b, 0x01, 0x12, 0x0f,
	0x0a, 0x0a, 0x73, 0x73, 0x37, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x9c, 0x01, 0x12,
	0x14, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x50,
	0x32, 0x50, 0x10, 0x9d, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x66, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x10, 0x9e, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x72, 0x66, 0x63, 0x31, 0x34, 0x38, 0x33,
	0x10, 0x9f, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x75, 0x73, 0x62, 0x10, 0xa0, 0x01, 0x12, 0x12, 0x0a,
	0x0d, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x33, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x10, 0xa1,
	0x01, 0x12, 0x18, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x10, 0xa2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x66,
	0x72, 0x66, 0x31, 0x36, 0x4d, 0x66, 0x72, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x10, 0xa3, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x68, 0x33, 0x32, 0x33, 0x47, 0x61, 0x74, 0x65, 0x6b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x10, 0xa4, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x68, 0x33, 0x32, 0x33, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x10, 0xa5, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x6d, 0x70, 0x6c, 0x73, 0x10, 0xa6, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x6d, 0x66, 0x53, 0x69, 0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xa7, 0x01,
	0x12, 0x0a, 0x0a, 0x05, 0x68, 0x64, 0x73, 0x6c, 0x32, 0x10, 0xa8, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x73, 0x68, 0x64, 0x73, 0x6c, 0x10, 0xa9, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x64, 0x73, 0x31, 0x46,
	0x44, 0x4c, 0x10, 0xaa, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x10, 0xab, 0x01, 0x12,
	0x0d, 0x0a, 0x08, 0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x49, 0x6e, 0x10, 0xac, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x64, 0x76, 0x62, 0x41, 0x73, 0x69, 0x4f, 0x75, 0x74, 0x10, 0xad, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x70, 0x6c, 0x63, 0x10, 0xae, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x6e, 0x66, 0x61, 0x73,
	0x10, 0xaf, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x74, 0x72, 0x30, 0x30, 0x38, 0x10, 0xb0, 0x01, 0x12,
	0x0d, 0x0a, 0x08, 0x67, 0x72, 0x33, 0x30, 0x33, 0x52, 0x44, 0x54, 0x10, 0xb1, 0x01, 0x12, 0x0d,
	0x0a, 0x08, 0x67, 0x72, 0x33, 0x30, 0x33, 0x49, 0x44, 0x54, 0x10, 0xb2, 0x01, 0x12, 0x09, 0x0a,
	0x04, 0x69, 0x73, 0x75, 0x70, 0x10, 0xb3, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70,
	0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x63, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x10, 0xb4, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x70, 0x44,
	0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xb5, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70,
	0x44, 0x6f, 0x63, 0x73, 0x57, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x10, 0xb6, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x68, 0x69, 0x70, 0x65, 0x72,
	0x6c, 0x61, 0x6e, 0x32, 0x10, 0xb7, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x42,
	0x57, 0x41, 0x70, 0x32, 0x4d, 0x70, 0x10, 0xb8, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x73, 0x6f, 0x6e,
	0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x10, 0xb9, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xba, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x61, 0x61, 0x6c, 0x32,
	0x10, 0xbb, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x41, 0x43, 0x10,
	0xbc, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x61, 0x74, 0x6d, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10, 0xbd,
	0x01, 0x12, 0x08, 0x0a, 0x03, 0x69, 0x6d, 0x74, 0x10, 0xbe, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x6d,
	0x76, 0x6c, 0x10, 0xbf, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63, 0x68, 0x44, 0x53,
	0x4c, 0x10, 0xc0, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x66, 0x72, 0x44, 0x6c, 0x63, 0x69, 0x45, 0x6e,
	0x64, 0x50, 0x74, 0x10, 0xc1, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x61, 0x74, 0x6d, 0x56, 0x63, 0x69,
	0x45, 0x6e, 0x64, 0x50, 0x74, 0x10, 0xc2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xc3, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0xc4, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x70, 0x41, 0x74, 0x6d, 0x10,
	0xc5, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x43,
	0x61, 0x62, 0x6c, 0x65, 0x10, 0xc6, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x62, 0x61, 0x6e, 0x64, 0x10, 0xc7, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x74, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x10, 0xc8, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x71, 0x32, 0x39, 0x33, 0x31, 0x10, 0xc9,
	0x01, 0x12, 0x0e, 0x0a, 0x09, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x67, 0x10, 0xca,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x73, 0x69, 0x70, 0x54, 0x67, 0x10, 0xcb, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x73, 0x69, 0x70, 0x53, 0x69, 0x67, 0x10, 0xcc, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x64, 0x6f,
	0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0xcd, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x65, 0x63, 0x6f,
	0x6e, 0x65, 0x74, 0x10, 0xce, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x70, 0x6f, 0x6e, 0x31, 0x35, 0x35,
	0x10, 0xcf, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x70, 0x6f, 0x6e, 0x36, 0x32, 0x32, 0x10, 0xd0, 0x01,
	0x12, 0x0b, 0x0a, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0xd1, 0x01, 0x12, 0x0e, 0x0a,
	0x09, 0x6c, 0x69, 0x6e, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xd2, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x45, 0x4d, 0x46, 0x47, 0x44, 0x10, 0xd3, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46, 0x47, 0x44, 0x45, 0x41, 0x4e, 0x41, 0x10, 0xd4,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x44, 0x49, 0x44, 0x10, 0xd5, 0x01,
	0x12, 0x12, 0x0a, 0x0d, 0x6d, 0x70, 0x65, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0xd6, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x73, 0x69, 0x78, 0x54, 0x6f, 0x46, 0x6f, 0x75,
	0x72, 0x10, 0xd7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x67, 0x74, 0x70, 0x10, 0xd8, 0x01, 0x12, 0x12,
	0x0a, 0x0d, 0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x31, 0x10,
	0xd9, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x70, 0x64, 0x6e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x6f,
	0x6f, 0x70, 0x32, 0x10, 0xda, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0xdb, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x6e, 0x61, 0x10, 0xdc, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x67, 0x66, 0x70, 0x10, 0xdd, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x49, 0x53, 0x4c, 0x76, 0x6c, 0x61, 0x6e, 0x10, 0xde, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0xdf,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x66, 0x63, 0x69, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0xe0, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x72, 0x70, 0x72, 0x10, 0xe1, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x71, 0x61,
	0x6d, 0x10, 0xe2, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x6c, 0x6d, 0x70, 0x10, 0xe3, 0x01, 0x12, 0x11,
	0x0a, 0x0c, 0x63, 0x62, 0x6c, 0x56, 0x65, 0x63, 0x74, 0x61, 0x53, 0x74, 0x61, 0x72, 0x10, 0xe4,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x43,
	0x6d, 0x74, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x10, 0xe5, 0x01,
	0x12, 0x0a, 0x0a, 0x05, 0x61, 0x64, 0x73, 0x6c, 0x32, 0x10, 0xe6, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x49, 0x46, 0x10, 0xe7, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x53, 0x65, 0x63, 0x55,
	0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x49, 0x46, 0x10, 0xe8, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x61, 0x76, 0x69, 0x63, 0x69, 0x4f, 0x70, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x10, 0xe9, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x61, 0x74, 0x6d, 0x62,
	0x6f, 0x6e, 0x64, 0x10, 0xea, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x46,
	0x47, 0x44, 0x4f, 0x53, 0x10, 0xeb, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x6d, 0x6f, 0x63, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x10, 0xec, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x69, 0x65,
	0x65, 0x65, 0x38, 0x30, 0x32, 0x31, 0x36, 0x57, 0x4d, 0x41, 0x4e, 0x10, 0xed, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x61, 0x64, 0x73, 0x6c, 0x32, 0x70, 0x6c, 0x75, 0x73, 0x10, 0xee, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x4d, 0x61, 0x63, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x10, 0xef, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x64, 0x76, 0x62, 0x54, 0x64, 0x6d, 0x10, 0xf0, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x64, 0x76, 0x62, 0x52, 0x63, 0x73, 0x54, 0x64, 0x6d, 0x61, 0x10, 0xf1,
	0x01, 0x12, 0x0c, 0x0a, 0x07, 0x78, 0x38, 0x36, 0x4c, 0x61, 0x70, 0x73, 0x10, 0xf2, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x10, 0xf3, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x77, 0x77, 0x61, 0x6e, 0x50, 0x50, 0x32, 0x10, 0xf4, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x45, 0x42, 0x53, 0x10, 0xf5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x69, 0x66, 0x50,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf6, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x69, 0x6c, 0x61, 0x6e,
	0x10, 0xf7, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x70, 0x69, 0x70, 0x10, 0xf8, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x61, 0x6c, 0x75, 0x45, 0x4c, 0x50, 0x10, 0xf9, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x67, 0x70,
	0x6f, 0x6e, 0x10, 0xfa, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x76, 0x64, 0x73, 0x6c, 0x32, 0x10, 0xfb,
	0x01, 0x12, 0x17, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x44, 0x6f, 0x74, 0x31, 0x31,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0xfc, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x63, 0x61,
	0x70, 0x77, 0x61, 0x70, 0x44, 0x6f, 0x74, 0x31, 0x31, 0x42, 0x73, 0x73, 0x10, 0xfd, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x57, 0x74, 0x70, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10, 0xfe, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x62,
	0x69, 0x74, 0x73, 0x10, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x64, 0x6f, 0x63, 0x73, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72,
	0x74, 0x10, 0x80, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x6f, 0x77,
	0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x10, 0x81, 0x02,
	0x12, 0x15, 0x0a, 0x10, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4e, 0x69, 0x63, 0x10, 0x82, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x69, 0x65, 0x65, 0x65, 0x38,
	0x30, 0x32, 0x31, 0x35, 0x34, 0x10, 0x83, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x6f, 0x74, 0x6e, 0x4f,
	0x64, 0x75, 0x10, 0x84, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x6f, 0x74, 0x6e, 0x4f, 0x74, 0x75, 0x10,
	0x85, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x69, 0x66, 0x56, 0x66, 0x69, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x86, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x67, 0x39, 0x39, 0x38, 0x31, 0x10, 0x87, 0x02, 0x12, 0x0a,
	0x0a, 0x05, 0x67, 0x39, 0x39, 0x38, 0x32, 0x10, 0x88, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x67, 0x39,
	0x39, 0x38, 0x33, 0x10, 0x89, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f,
	0x6e, 0x10, 0x8a, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4f,
	0x6e, 0x75, 0x10, 0x8b, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x10, 0x8c, 0x02, 0x12, 0x17,
	0x0a, 0x12, 0x61, 0x6c, 0x75, 0x45, 0x70, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x8d, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x61, 0x6c, 0x75, 0x47, 0x70,
	0x6f, 0x6e, 0x4f, 0x6e, 0x75, 0x10, 0x8e, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x61, 0x6c, 0x75, 0x47,
	0x70, 0x6f, 0x6e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x10, 0x8f,
	0x02, 0x12, 0x12, 0x0a, 0x0d, 0x76, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x69, 0x63, 0x54, 0x65,
	0x61, 0x6d, 0x10, 0x90, 0x02, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x2e, 0x6c, 0x69, 0x65,
	0x72, 0x6f, 0x2e, 0x73, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x63, 0x6f, 0x2f,
	0x67, 0x6f, 0x2d, 0x73, 0x77, 0x70, 0x78, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_element_proto_rawDescOnce sync.Once
	file_network_element_proto_rawDescData = file_network_element_proto_rawDesc
)

func file_network_element_proto_rawDescGZIP() []byte {
	file_network_element_proto_rawDescOnce.Do(func() {
		file_network_element_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_element_proto_rawDescData)
	})
	return file_network_element_proto_rawDescData
}

var file_network_element_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_network_element_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_network_element_proto_goTypes = []interface{}{
	(ModuleType)(0),                                 // 0: networkelement.ModuleType
	(InterfaceStatus)(0),                            // 1: networkelement.InterfaceStatus
	(InterfaceType)(0),                              // 2: networkelement.InterfaceType
	(TransientError_Level)(0),                       // 3: networkelement.TransientError.Level
	(*Element)(nil),                                 // 4: networkelement.Element
	(*TransientErrors)(nil),                         // 5: networkelement.TransientErrors
	(*TransientError)(nil),                          // 6: networkelement.TransientError
	(*Module)(nil),                                  // 7: networkelement.Module
	(*InterfaceStatisticsInput)(nil),                // 8: networkelement.InterfaceStatisticsInput
	(*InterfaceStatisticsOutput)(nil),               // 9: networkelement.InterfaceStatisticsOutput
	(*InterfaceStatistics)(nil),                     // 10: networkelement.InterfaceStatistics
	(*Interface)(nil),                               // 11: networkelement.Interface
	(*AggregatedInterface)(nil),                     // 12: networkelement.AggregatedInterface
	(*Transceivers)(nil),                            // 13: networkelement.Transceivers
	(*Transceiver)(nil),                             // 14: networkelement.Transceiver
	(*TransceiverStatistics)(nil),                   // 15: networkelement.TransceiverStatistics
	(*Neighbor)(nil),                                // 16: networkelement.Neighbor
	(*MACEntry)(nil),                                // 17: networkelement.MACEntry
	(*DHCPEntry)(nil),                               // 18: networkelement.DHCPEntry
	(*InterfaceMetrics)(nil),                        // 19: networkelement.InterfaceMetrics
	(*PhysicalPortInformation)(nil),                 // 20: networkelement.PhysicalPortInformation
	(*analysispb.Analysis)(nil),                     // 21: analysis.Analysis
	(*timestamppb.Timestamp)(nil),                   // 22: google.protobuf.Timestamp
	(*trafficpolicypb.ConfiguredTrafficPolicy)(nil), // 23: traffic_policy.ConfiguredTrafficPolicy
	(*trafficpolicypb.QOS)(nil),                     // 24: traffic_policy.QOS
}
var file_network_element_proto_depIdxs = []int32{
	11, // 0: networkelement.Element.interfaces:type_name -> networkelement.Interface
	12, // 1: networkelement.Element.aggregated_interfaces:type_name -> networkelement.AggregatedInterface
	7,  // 2: networkelement.Element.modules:type_name -> networkelement.Module
	5,  // 3: networkelement.Element.transient_errors:type_name -> networkelement.TransientErrors
	6,  // 4: networkelement.TransientErrors.errors:type_name -> networkelement.TransientError
	3,  // 5: networkelement.TransientError.level:type_name -> networkelement.TransientError.Level
	0,  // 6: networkelement.Module.type:type_name -> networkelement.ModuleType
	8,  // 7: networkelement.InterfaceStatistics.input:type_name -> networkelement.InterfaceStatisticsInput
	9,  // 8: networkelement.InterfaceStatistics.output:type_name -> networkelement.InterfaceStatisticsOutput
	21, // 9: networkelement.InterfaceStatistics.analysis:type_name -> analysis.Analysis
	2,  // 10: networkelement.Interface.type:type_name -> networkelement.InterfaceType
	1,  // 11: networkelement.Interface.admin_status:type_name -> networkelement.InterfaceStatus
	1,  // 12: networkelement.Interface.operational_status:type_name -> networkelement.InterfaceStatus
	22, // 13: networkelement.Interface.last_changed:type_name -> google.protobuf.Timestamp
	10, // 14: networkelement.Interface.stats:type_name -> networkelement.InterfaceStatistics
	14, // 15: networkelement.Interface.transceiver:type_name -> networkelement.Transceiver
	16, // 16: networkelement.Interface.neighbor:type_name -> networkelement.Neighbor
	17, // 17: networkelement.Interface.mac_address_table:type_name -> networkelement.MACEntry
	18, // 18: networkelement.Interface.dhcp_table:type_name -> networkelement.DHCPEntry
	23, // 19: networkelement.Interface.configuredTrafficPolicy:type_name -> traffic_policy.ConfiguredTrafficPolicy
	24, // 20: networkelement.Interface.qos:type_name -> traffic_policy.QOS
	4,  // 21: networkelement.Interface.connected_sdd:type_name -> networkelement.Element
	21, // 22: networkelement.Interface.analysis:type_name -> analysis.Analysis
	11, // 23: networkelement.AggregatedInterface.interfaces:type_name -> networkelement.Interface
	14, // 24: networkelement.Transceivers.transceivers:type_name -> networkelement.Transceiver
	15, // 25: networkelement.Transceiver.stats:type_name -> networkelement.TransceiverStatistics
	21, // 26: networkelement.Transceiver.analysis:type_name -> analysis.Analysis
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_network_element_proto_init() }
func file_network_element_proto_init() {
	if File_network_element_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_element_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransientErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransientError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStatisticsInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStatisticsOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transceivers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transceiver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransceiverStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MACEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHCPEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterfaceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_element_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhysicalPortInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_element_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_network_element_proto_goTypes,
		DependencyIndexes: file_network_element_proto_depIdxs,
		EnumInfos:         file_network_element_proto_enumTypes,
		MessageInfos:      file_network_element_proto_msgTypes,
	}.Build()
	File_network_element_proto = out.File
	file_network_element_proto_rawDesc = nil
	file_network_element_proto_goTypes = nil
	file_network_element_proto_depIdxs = nil
}
