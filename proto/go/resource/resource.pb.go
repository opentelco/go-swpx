// Code generated by protoc-gen-go. DO NOT EDIT.
// source: git.liero.se/opentelco/go-swpx/proto/src/resource.proto

package resource

import (
	context "context"
	fmt "fmt"
	networkelement "git.liero.se/opentelco/go-swpx/proto/go/networkelement"
	provider "git.liero.se/opentelco/go-swpx/proto/go/provider"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type VersionResponse struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{1}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type Status struct {
	Error                bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Code                 int32    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Type                 string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{2}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// used in resource request
type NetworkElement struct {
	Hostname             string                  `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string                  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Interface            string                  `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`
	InterfaceIndex       int64                   `protobuf:"varint,4,opt,name=interface_index,json=interfaceIndex,proto3" json:"interface_index,omitempty"`
	PhysicalIndex        int64                   `protobuf:"varint,5,opt,name=physical_index,json=physicalIndex,proto3" json:"physical_index,omitempty"`
	Conf                 *provider.Configuration `protobuf:"bytes,6,opt,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *NetworkElement) Reset()         { *m = NetworkElement{} }
func (m *NetworkElement) String() string { return proto.CompactTextString(m) }
func (*NetworkElement) ProtoMessage()    {}
func (*NetworkElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{3}
}

func (m *NetworkElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkElement.Unmarshal(m, b)
}
func (m *NetworkElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkElement.Marshal(b, m, deterministic)
}
func (m *NetworkElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkElement.Merge(m, src)
}
func (m *NetworkElement) XXX_Size() int {
	return xxx_messageInfo_NetworkElement.Size(m)
}
func (m *NetworkElement) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkElement.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkElement proto.InternalMessageInfo

func (m *NetworkElement) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NetworkElement) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *NetworkElement) GetInterface() string {
	if m != nil {
		return m.Interface
	}
	return ""
}

func (m *NetworkElement) GetInterfaceIndex() int64 {
	if m != nil {
		return m.InterfaceIndex
	}
	return 0
}

func (m *NetworkElement) GetPhysicalIndex() int64 {
	if m != nil {
		return m.PhysicalIndex
	}
	return 0
}

func (m *NetworkElement) GetConf() *provider.Configuration {
	if m != nil {
		return m.Conf
	}
	return nil
}

type NetworkElementInterface struct {
	Index                int64    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Alias                string   `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkElementInterface) Reset()         { *m = NetworkElementInterface{} }
func (m *NetworkElementInterface) String() string { return proto.CompactTextString(m) }
func (*NetworkElementInterface) ProtoMessage()    {}
func (*NetworkElementInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{4}
}

func (m *NetworkElementInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkElementInterface.Unmarshal(m, b)
}
func (m *NetworkElementInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkElementInterface.Marshal(b, m, deterministic)
}
func (m *NetworkElementInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkElementInterface.Merge(m, src)
}
func (m *NetworkElementInterface) XXX_Size() int {
	return xxx_messageInfo_NetworkElementInterface.Size(m)
}
func (m *NetworkElementInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkElementInterface.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkElementInterface proto.InternalMessageInfo

func (m *NetworkElementInterface) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NetworkElementInterface) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NetworkElementInterface) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

// map port to entire interface for faster retrieval
type NetworkElementInterfaces struct {
	Interfaces           map[string]*NetworkElementInterface `protobuf:"bytes,1,rep,name=interfaces,proto3" json:"interfaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *NetworkElementInterfaces) Reset()         { *m = NetworkElementInterfaces{} }
func (m *NetworkElementInterfaces) String() string { return proto.CompactTextString(m) }
func (*NetworkElementInterfaces) ProtoMessage()    {}
func (*NetworkElementInterfaces) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{5}
}

func (m *NetworkElementInterfaces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkElementInterfaces.Unmarshal(m, b)
}
func (m *NetworkElementInterfaces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkElementInterfaces.Marshal(b, m, deterministic)
}
func (m *NetworkElementInterfaces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkElementInterfaces.Merge(m, src)
}
func (m *NetworkElementInterfaces) XXX_Size() int {
	return xxx_messageInfo_NetworkElementInterfaces.Size(m)
}
func (m *NetworkElementInterfaces) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkElementInterfaces.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkElementInterfaces proto.InternalMessageInfo

func (m *NetworkElementInterfaces) GetInterfaces() map[string]*NetworkElementInterface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

type Transceivers struct {
	Transceivers         map[int32]*networkelement.Transceiver `protobuf:"bytes,1,rep,name=transceivers,proto3" json:"transceivers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *Transceivers) Reset()         { *m = Transceivers{} }
func (m *Transceivers) String() string { return proto.CompactTextString(m) }
func (*Transceivers) ProtoMessage()    {}
func (*Transceivers) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{6}
}

func (m *Transceivers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transceivers.Unmarshal(m, b)
}
func (m *Transceivers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transceivers.Marshal(b, m, deterministic)
}
func (m *Transceivers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transceivers.Merge(m, src)
}
func (m *Transceivers) XXX_Size() int {
	return xxx_messageInfo_Transceivers.Size(m)
}
func (m *Transceivers) XXX_DiscardUnknown() {
	xxx_messageInfo_Transceivers.DiscardUnknown(m)
}

var xxx_messageInfo_Transceivers proto.InternalMessageInfo

func (m *Transceivers) GetTransceivers() map[int32]*networkelement.Transceiver {
	if m != nil {
		return m.Transceivers
	}
	return nil
}

type NetworkElementWrapper struct {
	Element              *NetworkElement           `protobuf:"bytes,1,opt,name=element,proto3" json:"element,omitempty"`
	NumInterfaces        int32                     `protobuf:"varint,2,opt,name=num_interfaces,json=numInterfaces,proto3" json:"num_interfaces,omitempty"`
	FullElement          *networkelement.Element   `protobuf:"bytes,3,opt,name=full_element,json=fullElement,proto3" json:"full_element,omitempty"`
	PhysInterfaces       *NetworkElementInterfaces `protobuf:"bytes,4,opt,name=phys_interfaces,json=physInterfaces,proto3" json:"phys_interfaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *NetworkElementWrapper) Reset()         { *m = NetworkElementWrapper{} }
func (m *NetworkElementWrapper) String() string { return proto.CompactTextString(m) }
func (*NetworkElementWrapper) ProtoMessage()    {}
func (*NetworkElementWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ff568e5765ad370, []int{7}
}

func (m *NetworkElementWrapper) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkElementWrapper.Unmarshal(m, b)
}
func (m *NetworkElementWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkElementWrapper.Marshal(b, m, deterministic)
}
func (m *NetworkElementWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkElementWrapper.Merge(m, src)
}
func (m *NetworkElementWrapper) XXX_Size() int {
	return xxx_messageInfo_NetworkElementWrapper.Size(m)
}
func (m *NetworkElementWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkElementWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkElementWrapper proto.InternalMessageInfo

func (m *NetworkElementWrapper) GetElement() *NetworkElement {
	if m != nil {
		return m.Element
	}
	return nil
}

func (m *NetworkElementWrapper) GetNumInterfaces() int32 {
	if m != nil {
		return m.NumInterfaces
	}
	return 0
}

func (m *NetworkElementWrapper) GetFullElement() *networkelement.Element {
	if m != nil {
		return m.FullElement
	}
	return nil
}

func (m *NetworkElementWrapper) GetPhysInterfaces() *NetworkElementInterfaces {
	if m != nil {
		return m.PhysInterfaces
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "resource.Empty")
	proto.RegisterType((*VersionResponse)(nil), "resource.VersionResponse")
	proto.RegisterType((*Status)(nil), "resource.Status")
	proto.RegisterType((*NetworkElement)(nil), "resource.NetworkElement")
	proto.RegisterType((*NetworkElementInterface)(nil), "resource.NetworkElementInterface")
	proto.RegisterType((*NetworkElementInterfaces)(nil), "resource.NetworkElementInterfaces")
	proto.RegisterMapType((map[string]*NetworkElementInterface)(nil), "resource.NetworkElementInterfaces.InterfacesEntry")
	proto.RegisterType((*Transceivers)(nil), "resource.Transceivers")
	proto.RegisterMapType((map[int32]*networkelement.Transceiver)(nil), "resource.Transceivers.TransceiversEntry")
	proto.RegisterType((*NetworkElementWrapper)(nil), "resource.NetworkElementWrapper")
}

func init() {
	proto.RegisterFile("git.liero.se/opentelco/go-swpx/proto/src/resource.proto", fileDescriptor_8ff568e5765ad370)
}

var fileDescriptor_8ff568e5765ad370 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x4f, 0xe3, 0x46,
	0x14, 0x95, 0xf3, 0x41, 0xc2, 0x4d, 0x48, 0xca, 0x08, 0x8a, 0x09, 0x48, 0x4d, 0x2d, 0x55, 0x8d,
	0x84, 0xea, 0xb4, 0xee, 0x03, 0x15, 0xea, 0x0b, 0xad, 0x22, 0x84, 0x0a, 0x15, 0x75, 0x51, 0x5b,
	0x55, 0x2b, 0x81, 0x71, 0x6e, 0x8c, 0x85, 0x33, 0x63, 0xcd, 0x8c, 0x81, 0xfc, 0xaa, 0x7d, 0xdf,
	0x5f, 0xb1, 0x6f, 0xfb, 0x63, 0xf6, 0x65, 0xe5, 0x19, 0xdb, 0x71, 0x58, 0x79, 0x41, 0xda, 0x7d,
	0x9b, 0x73, 0x7d, 0xe7, 0x9c, 0x39, 0x33, 0xf7, 0x5e, 0xc3, 0x61, 0x10, 0x4a, 0x3b, 0x0a, 0x91,
	0x33, 0x5b, 0xe0, 0x98, 0xc5, 0x48, 0x25, 0x46, 0x3e, 0x1b, 0x07, 0xec, 0x07, 0xf1, 0x10, 0x3f,
	0x8e, 0x63, 0xce, 0x24, 0x1b, 0x0b, 0xee, 0x8f, 0x39, 0x0a, 0x96, 0x70, 0x1f, 0x6d, 0x15, 0x22,
	0xed, 0x1c, 0x0f, 0xb6, 0x29, 0xca, 0x07, 0xc6, 0xef, 0xae, 0x30, 0xc2, 0x39, 0x52, 0xa9, 0x13,
	0x06, 0x7b, 0x01, 0x63, 0x41, 0x84, 0x9a, 0xe1, 0x26, 0x99, 0x8d, 0x71, 0x1e, 0xcb, 0x45, 0xf6,
	0xb1, 0x17, 0x73, 0x76, 0x1f, 0x4e, 0x91, 0x6b, 0x6c, 0xb5, 0xa0, 0x39, 0x49, 0x3f, 0x5b, 0x07,
	0xd0, 0xff, 0x07, 0xb9, 0x08, 0x19, 0x75, 0x51, 0xc4, 0x8c, 0x0a, 0x24, 0x26, 0xb4, 0xee, 0x75,
	0xc8, 0x34, 0x86, 0xc6, 0x68, 0xdd, 0xcd, 0xa1, 0x75, 0x0d, 0x6b, 0x7f, 0x4b, 0x4f, 0x26, 0x82,
	0x6c, 0x41, 0x13, 0x39, 0x67, 0x5c, 0x65, 0xb4, 0x5d, 0x0d, 0x08, 0x81, 0x86, 0xcf, 0xa6, 0x68,
	0xd6, 0x86, 0xc6, 0xa8, 0xe9, 0xaa, 0x75, 0x1a, 0x93, 0x8b, 0x18, 0xcd, 0xba, 0xa2, 0x52, 0xeb,
	0x54, 0x61, 0x8e, 0x42, 0x78, 0x01, 0x9a, 0x0d, 0xad, 0x90, 0x41, 0xeb, 0x9d, 0x01, 0xbd, 0x3f,
	0xb5, 0xbd, 0x89, 0x76, 0x47, 0x06, 0xd0, 0xbe, 0x65, 0x42, 0x52, 0x6f, 0x8e, 0xd9, 0x79, 0x0a,
	0x4c, 0x7a, 0x50, 0x0b, 0x63, 0x25, 0xb7, 0xee, 0xd6, 0xc2, 0x98, 0xec, 0xc3, 0x7a, 0x48, 0x25,
	0xf2, 0x99, 0xe7, 0xe7, 0x8a, 0xcb, 0x00, 0xf9, 0x1e, 0xfa, 0x05, 0xb8, 0x0a, 0xe9, 0x14, 0x1f,
	0x95, 0x7c, 0xdd, 0xed, 0x15, 0xe1, 0xd3, 0x34, 0x4a, 0xbe, 0x83, 0x5e, 0x7c, 0xbb, 0x10, 0xa1,
	0xef, 0x45, 0x59, 0x5e, 0x53, 0xe5, 0x6d, 0xe4, 0x51, 0x9d, 0x76, 0x90, 0xda, 0xa5, 0x33, 0x73,
	0x6d, 0x68, 0x8c, 0x3a, 0xce, 0x8e, 0x5d, 0xdc, 0xf1, 0xef, 0x8c, 0xce, 0xc2, 0x20, 0xe1, 0x9e,
	0x4c, 0xef, 0x55, 0x25, 0x59, 0x01, 0xec, 0xac, 0x1a, 0x3b, 0x2d, 0xce, 0xb5, 0x05, 0x4d, 0xad,
	0x62, 0x28, 0x15, 0x0d, 0xc8, 0x10, 0x3a, 0x53, 0x14, 0x3e, 0x0f, 0xe3, 0x94, 0x25, 0x33, 0x59,
	0x0e, 0xa5, 0xfb, 0xbc, 0x28, 0xf4, 0x44, 0xe6, 0x54, 0x03, 0xeb, 0xad, 0x01, 0x66, 0x85, 0x92,
	0x20, 0x2e, 0x40, 0xe1, 0x55, 0x98, 0xc6, 0xb0, 0x3e, 0xea, 0x38, 0x8e, 0x5d, 0x94, 0x5a, 0xd5,
	0x3e, 0x7b, 0xb9, 0x9c, 0x50, 0xc9, 0x17, 0x6e, 0x89, 0x65, 0x70, 0x0d, 0xfd, 0x27, 0x9f, 0xc9,
	0x57, 0x50, 0xbf, 0xc3, 0x45, 0xf6, 0x5c, 0xe9, 0x92, 0x1c, 0x42, 0xf3, 0xde, 0x8b, 0x12, 0x5d,
	0x1b, 0x1d, 0xe7, 0xdb, 0x67, 0x35, 0x5d, 0x9d, 0x7f, 0x54, 0xfb, 0xc5, 0xb0, 0xde, 0x18, 0xd0,
	0xbd, 0xe4, 0x1e, 0x15, 0x3e, 0x86, 0x69, 0x2d, 0x92, 0x33, 0xe8, 0xca, 0x12, 0xce, 0x8c, 0x8c,
	0x96, 0xa4, 0xe5, 0xec, 0x15, 0xa0, 0x8f, 0xbf, 0xb2, 0x7b, 0xf0, 0x0a, 0x36, 0x3f, 0x4a, 0x29,
	0x5b, 0x68, 0x6a, 0x0b, 0x3f, 0xad, 0x5a, 0xd8, 0xb3, 0xb3, 0x3e, 0xcc, 0xdb, 0xb0, 0xc4, 0x51,
	0x3e, 0xfc, 0x7b, 0x03, 0xb6, 0x57, 0x3d, 0xfe, 0xcb, 0xbd, 0x38, 0x46, 0x4e, 0x1c, 0x68, 0x65,
	0x7b, 0x95, 0x4c, 0xc7, 0x31, 0xab, 0x6e, 0xc5, 0xcd, 0x13, 0xd3, 0xd2, 0xa4, 0xc9, 0xfc, 0xaa,
	0xf4, 0x88, 0xba, 0xd9, 0x36, 0x68, 0x32, 0x2f, 0xbd, 0xf3, 0x11, 0x74, 0x67, 0x49, 0x14, 0xe5,
	0x23, 0x42, 0x55, 0x48, 0x5a, 0xa2, 0x4f, 0x8e, 0x9c, 0xd3, 0x77, 0xd2, 0xe4, 0xbc, 0xe1, 0xfe,
	0x80, 0x7e, 0x5a, 0xe7, 0x65, 0x8d, 0x86, 0xda, 0x6e, 0x3d, 0x5f, 0x28, 0xae, 0x6a, 0x9c, 0x25,
	0x76, 0x5e, 0x37, 0xa0, 0xed, 0x66, 0xbb, 0xc8, 0xaf, 0xd0, 0xca, 0x86, 0x0d, 0xf9, 0xda, 0xd6,
	0xe3, 0xca, 0xce, 0xc7, 0x95, 0xad, 0xe6, 0xd1, 0x60, 0x77, 0xa9, 0xf1, 0x74, 0x2e, 0x9d, 0x83,
	0x79, 0x89, 0xfe, 0x2d, 0x4d, 0x1b, 0xf0, 0x82, 0x71, 0x79, 0x4a, 0x67, 0x8c, 0xcf, 0x55, 0x8f,
	0x91, 0xca, 0x9b, 0x1b, 0x54, 0x79, 0x26, 0x27, 0x40, 0x8e, 0xa3, 0x2f, 0x41, 0x74, 0x06, 0xdd,
	0x73, 0x2f, 0x5e, 0xb6, 0x73, 0x35, 0xc5, 0x0b, 0x2e, 0x90, 0xfc, 0x05, 0x9b, 0xe7, 0x5e, 0x3c,
	0xa1, 0x32, 0x94, 0x8b, 0x8b, 0x6c, 0xdc, 0x7c, 0x26, 0xa5, 0x0b, 0xbb, 0x27, 0x28, 0x4b, 0xe5,
	0xf9, 0x32, 0xc3, 0x9f, 0x2a, 0x70, 0xf2, 0x1f, 0xec, 0x9f, 0xa0, 0x3c, 0x8e, 0xa2, 0x0a, 0xda,
	0x6f, 0xaa, 0x68, 0xb3, 0xe2, 0xaf, 0xbc, 0xce, 0xdf, 0x9c, 0xff, 0x7f, 0x7c, 0xd1, 0x3f, 0x32,
	0x60, 0xc5, 0x2f, 0xf2, 0x66, 0x4d, 0x85, 0x7e, 0xfe, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x2e,
	0x00, 0xff, 0x5e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ResourceClient is the client API for Resource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResourceClient interface {
	// Get the version of the network element
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	// Get technical information about a port
	TechnicalPortInformation(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*networkelement.Element, error)
	// Get technical information about all ports TODO: rename
	AllPortInformation(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*networkelement.Element, error)
	// Map the interfaces with ifIndex and description
	MapInterface(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*NetworkElementInterfaces, error)
	// Map the interace description and the environemnt index
	MapEntityPhysical(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*NetworkElementInterfaces, error)
	// Get transceiver information about a interface
	GetTransceiverInformation(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*networkelement.Transceiver, error)
	// Get transceiver information about all interfaces
	GetAllTransceiverInformation(ctx context.Context, in *NetworkElementWrapper, opts ...grpc.CallOption) (*networkelement.Element, error)
}

type resourceClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceClient(cc grpc.ClientConnInterface) ResourceClient {
	return &resourceClient{cc}
}

func (c *resourceClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/resource.Resource/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) TechnicalPortInformation(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*networkelement.Element, error) {
	out := new(networkelement.Element)
	err := c.cc.Invoke(ctx, "/resource.Resource/TechnicalPortInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) AllPortInformation(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*networkelement.Element, error) {
	out := new(networkelement.Element)
	err := c.cc.Invoke(ctx, "/resource.Resource/AllPortInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MapInterface(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*NetworkElementInterfaces, error) {
	out := new(NetworkElementInterfaces)
	err := c.cc.Invoke(ctx, "/resource.Resource/MapInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) MapEntityPhysical(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*NetworkElementInterfaces, error) {
	out := new(NetworkElementInterfaces)
	err := c.cc.Invoke(ctx, "/resource.Resource/MapEntityPhysical", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetTransceiverInformation(ctx context.Context, in *NetworkElement, opts ...grpc.CallOption) (*networkelement.Transceiver, error) {
	out := new(networkelement.Transceiver)
	err := c.cc.Invoke(ctx, "/resource.Resource/GetTransceiverInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceClient) GetAllTransceiverInformation(ctx context.Context, in *NetworkElementWrapper, opts ...grpc.CallOption) (*networkelement.Element, error) {
	out := new(networkelement.Element)
	err := c.cc.Invoke(ctx, "/resource.Resource/GetAllTransceiverInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceServer is the server API for Resource service.
type ResourceServer interface {
	// Get the version of the network element
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	// Get technical information about a port
	TechnicalPortInformation(context.Context, *NetworkElement) (*networkelement.Element, error)
	// Get technical information about all ports TODO: rename
	AllPortInformation(context.Context, *NetworkElement) (*networkelement.Element, error)
	// Map the interfaces with ifIndex and description
	MapInterface(context.Context, *NetworkElement) (*NetworkElementInterfaces, error)
	// Map the interace description and the environemnt index
	MapEntityPhysical(context.Context, *NetworkElement) (*NetworkElementInterfaces, error)
	// Get transceiver information about a interface
	GetTransceiverInformation(context.Context, *NetworkElement) (*networkelement.Transceiver, error)
	// Get transceiver information about all interfaces
	GetAllTransceiverInformation(context.Context, *NetworkElementWrapper) (*networkelement.Element, error)
}

// UnimplementedResourceServer can be embedded to have forward compatible implementations.
type UnimplementedResourceServer struct {
}

func (*UnimplementedResourceServer) Version(ctx context.Context, req *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedResourceServer) TechnicalPortInformation(ctx context.Context, req *NetworkElement) (*networkelement.Element, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TechnicalPortInformation not implemented")
}
func (*UnimplementedResourceServer) AllPortInformation(ctx context.Context, req *NetworkElement) (*networkelement.Element, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPortInformation not implemented")
}
func (*UnimplementedResourceServer) MapInterface(ctx context.Context, req *NetworkElement) (*NetworkElementInterfaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapInterface not implemented")
}
func (*UnimplementedResourceServer) MapEntityPhysical(ctx context.Context, req *NetworkElement) (*NetworkElementInterfaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapEntityPhysical not implemented")
}
func (*UnimplementedResourceServer) GetTransceiverInformation(ctx context.Context, req *NetworkElement) (*networkelement.Transceiver, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransceiverInformation not implemented")
}
func (*UnimplementedResourceServer) GetAllTransceiverInformation(ctx context.Context, req *NetworkElementWrapper) (*networkelement.Element, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransceiverInformation not implemented")
}

func RegisterResourceServer(s *grpc.Server, srv ResourceServer) {
	s.RegisterService(&_Resource_serviceDesc, srv)
}

func _Resource_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_TechnicalPortInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).TechnicalPortInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/TechnicalPortInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).TechnicalPortInformation(ctx, req.(*NetworkElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_AllPortInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).AllPortInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/AllPortInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).AllPortInformation(ctx, req.(*NetworkElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MapInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MapInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/MapInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MapInterface(ctx, req.(*NetworkElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_MapEntityPhysical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).MapEntityPhysical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/MapEntityPhysical",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).MapEntityPhysical(ctx, req.(*NetworkElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetTransceiverInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkElement)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetTransceiverInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/GetTransceiverInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetTransceiverInformation(ctx, req.(*NetworkElement))
	}
	return interceptor(ctx, in, info, handler)
}

func _Resource_GetAllTransceiverInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkElementWrapper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceServer).GetAllTransceiverInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/resource.Resource/GetAllTransceiverInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceServer).GetAllTransceiverInformation(ctx, req.(*NetworkElementWrapper))
	}
	return interceptor(ctx, in, info, handler)
}

var _Resource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resource.Resource",
	HandlerType: (*ResourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Resource_Version_Handler,
		},
		{
			MethodName: "TechnicalPortInformation",
			Handler:    _Resource_TechnicalPortInformation_Handler,
		},
		{
			MethodName: "AllPortInformation",
			Handler:    _Resource_AllPortInformation_Handler,
		},
		{
			MethodName: "MapInterface",
			Handler:    _Resource_MapInterface_Handler,
		},
		{
			MethodName: "MapEntityPhysical",
			Handler:    _Resource_MapEntityPhysical_Handler,
		},
		{
			MethodName: "GetTransceiverInformation",
			Handler:    _Resource_GetTransceiverInformation_Handler,
		},
		{
			MethodName: "GetAllTransceiverInformation",
			Handler:    _Resource_GetAllTransceiverInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git.liero.se/opentelco/go-swpx/proto/src/resource.proto",
}
