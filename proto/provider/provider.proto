/*
 * Copyright (c) 2020. Liero AB
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software
 * is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

syntax = "proto3";

option go_package = "git.liero.se/opentelco/go-swpx/proto/provider";

package provider;
import "dnc/dnc.proto";


message Empty{}

// Name() (string, error)
// Version() (string, error)

// Match(string) (bool, error)
// Lookup(string) (DNCRequest, error)
// Weight() (int, error)

message NameResponse {
  string name = 1;
}

message VersionResponse {
  string version = 1;
}


message MatchRequest {
  string origin_id = 1;
}

message MatchResponse {
  bool match = 1;
}


message WeightResponse {
  int64 weight = 1;
}


message configConnection {
  configTelnet telnet = 1;
  configSSH ssh = 2;
}

message configTelnet {
  string User = 1;
  string Password = 2;
  int32 Port = 3;
  string ScreenLength = 4;
  string ScreenLengthCommand = 5;
  string RegexPrompt = 6;
  string Errors = 7;
  uint64 TTL = 8;
  uint64 ReadDeadLine = 9;
  uint64 WriteDeadLine = 10;
}
message configSSH {
  string User = 1;
  string Password = 2;
  int32 Port = 3;
  string ScreenLength = 4;
  string ScreenLengthCommand = 5;
  string RegexPrompt = 6;
  string Errors = 7;
  uint64 TTL = 8;
  uint64 ReadDeadLine = 9;
  uint64 WriteDeadLine = 10;
  string SSHKeyPath = 11;
}

message configSNMP {
  string  Community = 1;
  uint32 Version = 2;
  uint32 Port = 3;
  uint64 Timeout = 4;
  int32 Retries = 5;
  int32 MaxIterations = 6;
  int32 MaxRepetitions = 7;
  int32 NonRepeaters = 8;
  bool DynamicRepetitions = 9;
}

message Configuration{
  configSNMP    SNMP = 1;
  configConnection  Connection = 2;
}


service Provider {
  rpc Name(Empty) returns (NameResponse);
  rpc Version(Empty) returns (VersionResponse);

  rpc Match(MatchRequest) returns (MatchResponse);
  rpc Lookup(dnc.LookupRequest) returns (dnc.LookupResponse);
  rpc Weight(Empty) returns (WeightResponse);

  rpc GetConfiguration(Empty) returns (Configuration);

}
