// Code generated by protoc-gen-go. DO NOT EDIT.
// source: git.liero.se/opentelco/go-dnc/proto/dispatcher.proto

package dispatcher

import (
	context "context"
	fmt "fmt"
	transport "git.liero.se/opentelco/go-dnc/models/protobuf/transport"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PingReply struct {
	Latency              float64  `protobuf:"fixed64,1,opt,name=latency,proto3" json:"latency,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_947c1aa7d8cbc8ea, []int{0}
}

func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetLatency() float64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *PingReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type PingRequest struct {
	CallerId             string   `protobuf:"bytes,1,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	Priority             string   `protobuf:"bytes,2,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_947c1aa7d8cbc8ea, []int{1}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetCallerId() string {
	if m != nil {
		return m.CallerId
	}
	return ""
}

func (m *PingRequest) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func init() {
	proto.RegisterType((*PingReply)(nil), "dnc.dispatcher.PingReply")
	proto.RegisterType((*PingRequest)(nil), "dnc.dispatcher.PingRequest")
}

func init() {
	proto.RegisterFile("git.liero.se/opentelco/go-dnc/proto/dispatcher.proto", fileDescriptor_947c1aa7d8cbc8ea)
}

var fileDescriptor_947c1aa7d8cbc8ea = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x3d, 0x4b, 0x04, 0x31,
	0x10, 0x86, 0x5d, 0x15, 0xbd, 0x1d, 0xc1, 0x22, 0x85, 0x9c, 0x7b, 0xcd, 0xb1, 0xd5, 0x35, 0x66,
	0xc1, 0x53, 0x10, 0x1b, 0x45, 0x44, 0xb0, 0x10, 0x8e, 0x2d, 0x6d, 0x24, 0x97, 0x8c, 0x6b, 0x20,
	0x97, 0xc4, 0x64, 0xb6, 0xd8, 0x1f, 0xe0, 0xff, 0x96, 0xdb, 0x78, 0x1f, 0x82, 0x8a, 0xe5, 0xfb,
	0x4c, 0x78, 0x92, 0x77, 0x02, 0x17, 0x8d, 0x26, 0x6e, 0x34, 0x06, 0xc7, 0x23, 0x56, 0xce, 0xa3,
	0x25, 0x34, 0xd2, 0x55, 0x8d, 0x3b, 0x53, 0x56, 0x56, 0x3e, 0x38, 0x72, 0x95, 0xd2, 0xd1, 0x0b,
	0x92, 0x6f, 0x18, 0x78, 0x0f, 0xd8, 0xb1, 0xb2, 0x92, 0x6f, 0x68, 0x31, 0xfd, 0x8f, 0x85, 0x82,
	0xb0, 0xd1, 0xbb, 0x40, 0x49, 0x52, 0xde, 0x40, 0x3e, 0xd3, 0xb6, 0xa9, 0xd1, 0x9b, 0x8e, 0x0d,
	0xe1, 0xd0, 0x08, 0x42, 0x2b, 0xbb, 0x61, 0x36, 0xce, 0x26, 0x59, 0xbd, 0x8a, 0xcb, 0xc9, 0x02,
	0x63, 0x14, 0x0d, 0x0e, 0x77, 0xc7, 0xd9, 0x24, 0xaf, 0x57, 0xb1, 0x7c, 0x80, 0xa3, 0x24, 0x78,
	0x6f, 0x31, 0x12, 0x1b, 0x41, 0x2e, 0x85, 0x31, 0x18, 0x5e, 0xb4, 0xea, 0x25, 0x79, 0x3d, 0x48,
	0xe0, 0x51, 0xb1, 0x02, 0x06, 0x3e, 0x68, 0x17, 0x34, 0x75, 0x5f, 0x9a, 0x75, 0x3e, 0xff, 0xc8,
	0x00, 0xee, 0xd7, 0x65, 0xd8, 0x2d, 0xec, 0x2f, 0xb5, 0x6c, 0xc4, 0xbf, 0xb7, 0xe4, 0x5b, 0x97,
	0x15, 0xa7, 0x3f, 0x0f, 0xbd, 0xe9, 0xca, 0x1d, 0x76, 0x09, 0x7b, 0xb3, 0x96, 0xd8, 0x49, 0x7f,
	0x66, 0x53, 0xfb, 0x29, 0xbd, 0xbb, 0xf8, 0x85, 0xdf, 0x5d, 0x3f, 0x5f, 0xfd, 0xbd, 0xc7, 0x85,
	0x53, 0x68, 0x62, 0x5a, 0xe7, 0xbc, 0x7d, 0xdd, 0xfa, 0x97, 0xf9, 0x41, 0x0f, 0xa7, 0x9f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc0, 0x56, 0xa7, 0xd0, 0xd0, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	// Sends a greeting
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Put(ctx context.Context, in *transport.Message, opts ...grpc.CallOption) (*transport.Message, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/dnc.dispatcher.Dispatcher/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) Put(ctx context.Context, in *transport.Message, opts ...grpc.CallOption) (*transport.Message, error) {
	out := new(transport.Message)
	err := c.cc.Invoke(ctx, "/dnc.dispatcher.Dispatcher/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	// Sends a greeting
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Put(context.Context, *transport.Message) (*transport.Message, error)
}

// UnimplementedDispatcherServer can be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (*UnimplementedDispatcherServer) Ping(ctx context.Context, req *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDispatcherServer) Put(ctx context.Context, req *transport.Message) (*transport.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnc.dispatcher.Dispatcher/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transport.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnc.dispatcher.Dispatcher/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Put(ctx, req.(*transport.Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dnc.dispatcher.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Dispatcher_Ping_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Dispatcher_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "git.liero.se/opentelco/go-dnc/proto/dispatcher.proto",
}
