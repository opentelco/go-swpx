// Code generated by protoc-gen-go. DO NOT EDIT.
// source: git.liero.se/opentelco/go-dnc/proto/transport.proto

package transport

import (
	fmt "fmt"
	shared "git.liero.se/opentelco/go-dnc/models/protobuf/shared"
	snmpc "git.liero.se/opentelco/go-dnc/models/protobuf/snmpc"
	telnet "git.liero.se/opentelco/go-dnc/models/protobuf/telnet"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Type int32

const (
	Type_TELNET Type = 0
	Type_SNMP   Type = 1
	Type_SSH    Type = 2
)

var Type_name = map[int32]string{
	0: "TELNET",
	1: "SNMP",
	2: "SSH",
}

var Type_value = map[string]int32{
	"TELNET": 0,
	"SNMP":   1,
	"SSH":    2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0f6ed18ef465a243, []int{0}
}

type Message struct {
	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OriginId string          `protobuf:"bytes,2,opt,name=origin_id,json=originId,proto3" json:"origin_id,omitempty"`
	Status   shared.Status   `protobuf:"varint,3,opt,name=status,proto3,enum=dnc.shared.Status" json:"status,omitempty"`
	Type     Type            `protobuf:"varint,4,opt,name=type,proto3,enum=dnc.transport.Type" json:"type,omitempty"`
	Target   string          `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Source   string          `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	Priority shared.Priority `protobuf:"varint,7,opt,name=priority,proto3,enum=dnc.shared.Priority" json:"priority,omitempty"`
	// Types that are valid to be assigned to Task:
	//	*Message_Snmpc
	//	*Message_Telnet
	Task                 isMessage_Task       `protobuf_oneof:"task"`
	Tags                 map[string]*any.Any  `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error                string               `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
	Created              *timestamp.Timestamp `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	Received             *timestamp.Timestamp `protobuf:"bytes,14,opt,name=received,proto3" json:"received,omitempty"`
	Started              *timestamp.Timestamp `protobuf:"bytes,15,opt,name=started,proto3" json:"started,omitempty"`
	Completed            *timestamp.Timestamp `protobuf:"bytes,16,opt,name=completed,proto3" json:"completed,omitempty"`
	ExecutionTime        *duration.Duration   `protobuf:"bytes,17,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f6ed18ef465a243, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *Message) GetStatus() shared.Status {
	if m != nil {
		return m.Status
	}
	return shared.Status_NEW
}

func (m *Message) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_TELNET
}

func (m *Message) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Message) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Message) GetPriority() shared.Priority {
	if m != nil {
		return m.Priority
	}
	return shared.Priority_NoN
}

type isMessage_Task interface {
	isMessage_Task()
}

type Message_Snmpc struct {
	Snmpc *snmpc.Task `protobuf:"bytes,8,opt,name=snmpc,proto3,oneof"`
}

type Message_Telnet struct {
	Telnet *telnet.Task `protobuf:"bytes,9,opt,name=telnet,proto3,oneof"`
}

func (*Message_Snmpc) isMessage_Task() {}

func (*Message_Telnet) isMessage_Task() {}

func (m *Message) GetTask() isMessage_Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *Message) GetSnmpc() *snmpc.Task {
	if x, ok := m.GetTask().(*Message_Snmpc); ok {
		return x.Snmpc
	}
	return nil
}

func (m *Message) GetTelnet() *telnet.Task {
	if x, ok := m.GetTask().(*Message_Telnet); ok {
		return x.Telnet
	}
	return nil
}

func (m *Message) GetTags() map[string]*any.Any {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Message) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Message) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Message) GetReceived() *timestamp.Timestamp {
	if m != nil {
		return m.Received
	}
	return nil
}

func (m *Message) GetStarted() *timestamp.Timestamp {
	if m != nil {
		return m.Started
	}
	return nil
}

func (m *Message) GetCompleted() *timestamp.Timestamp {
	if m != nil {
		return m.Completed
	}
	return nil
}

func (m *Message) GetExecutionTime() *duration.Duration {
	if m != nil {
		return m.ExecutionTime
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Message) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Message_Snmpc)(nil),
		(*Message_Telnet)(nil),
	}
}

func init() {
	proto.RegisterEnum("dnc.transport.Type", Type_name, Type_value)
	proto.RegisterType((*Message)(nil), "dnc.transport.Message")
	proto.RegisterMapType((map[string]*any.Any)(nil), "dnc.transport.Message.TagsEntry")
}

func init() {
	proto.RegisterFile("git.liero.se/opentelco/go-dnc/proto/transport.proto", fileDescriptor_0f6ed18ef465a243)
}

var fileDescriptor_0f6ed18ef465a243 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xdf, 0x6b, 0x13, 0x41,
	0x10, 0xc7, 0x9b, 0x5f, 0x97, 0x64, 0x42, 0xd3, 0xb8, 0x16, 0xd9, 0x46, 0xd0, 0x20, 0x48, 0x43,
	0xc1, 0x4b, 0x49, 0x8b, 0x56, 0x9f, 0xb4, 0x58, 0xa8, 0x60, 0x4b, 0xb9, 0xdc, 0x93, 0x2f, 0x65,
	0x7b, 0x37, 0x9e, 0x4b, 0x2f, 0xb7, 0xc7, 0xee, 0x5e, 0xf1, 0xfe, 0x00, 0xff, 0x6f, 0xd9, 0x1f,
	0x89, 0xb5, 0x05, 0x5b, 0xdf, 0xb2, 0x33, 0x9f, 0xef, 0xce, 0xce, 0x37, 0x33, 0x07, 0x07, 0x19,
	0xd7, 0x61, 0xce, 0x51, 0x8a, 0x50, 0xe1, 0x4c, 0x94, 0x58, 0x68, 0xcc, 0x13, 0x31, 0xcb, 0xc4,
	0x9b, 0xb4, 0x48, 0x66, 0xa5, 0x14, 0x5a, 0xcc, 0xb4, 0x64, 0x85, 0x2a, 0x85, 0xd4, 0xa1, 0x3d,
	0x93, 0xcd, 0xb4, 0x48, 0xc2, 0x75, 0x70, 0xfc, 0x22, 0x13, 0x22, 0xcb, 0xd1, 0xc1, 0x57, 0xd5,
	0xf7, 0x59, 0x5a, 0x49, 0xa6, 0xb9, 0x28, 0x1c, 0x3e, 0x7e, 0x79, 0x37, 0xaf, 0xf9, 0x12, 0x95,
	0x66, 0xcb, 0xd2, 0x03, 0x3b, 0x77, 0x01, 0x56, 0xd4, 0x3e, 0xb5, 0xff, 0x98, 0xf7, 0xa9, 0x1f,
	0x4c, 0x62, 0xea, 0x15, 0xb3, 0x47, 0x29, 0x8a, 0x65, 0x99, 0xfc, 0x4f, 0x09, 0x8d, 0x79, 0x81,
	0xbe, 0xff, 0x57, 0xbf, 0x02, 0xe8, 0x9e, 0xa1, 0x52, 0x2c, 0x43, 0x32, 0x84, 0x26, 0x4f, 0x69,
	0x63, 0xd2, 0x98, 0xf6, 0xa3, 0x26, 0x4f, 0xc9, 0x73, 0xe8, 0x0b, 0xc9, 0x33, 0x5e, 0x5c, 0xf2,
	0x94, 0x36, 0x6d, 0xb8, 0xe7, 0x02, 0x5f, 0x52, 0xb2, 0x07, 0x81, 0xd2, 0x4c, 0x57, 0x8a, 0xb6,
	0x26, 0x8d, 0xe9, 0x70, 0x4e, 0x42, 0xe3, 0xa4, 0x7f, 0xfe, 0xc2, 0x66, 0x22, 0x4f, 0x90, 0x5d,
	0x68, 0xeb, 0xba, 0x44, 0xda, 0xb6, 0xe4, 0xd3, 0xf0, 0x2f, 0xcf, 0xc3, 0xb8, 0x2e, 0x31, 0xb2,
	0x00, 0x79, 0x06, 0x81, 0x66, 0x32, 0x43, 0x4d, 0x3b, 0xb6, 0x9c, 0x3f, 0x99, 0xb8, 0x12, 0x95,
	0x4c, 0x90, 0x06, 0x2e, 0xee, 0x4e, 0x64, 0x1f, 0x7a, 0xa5, 0xe4, 0x42, 0x72, 0x5d, 0xd3, 0xae,
	0xbd, 0x7c, 0xfb, 0xf6, 0x33, 0x2e, 0x7c, 0x2e, 0x5a, 0x53, 0x64, 0x17, 0x3a, 0xd6, 0x30, 0xda,
	0x9b, 0x34, 0xa6, 0x83, 0xf9, 0x96, 0xc3, 0xad, 0x85, 0x31, 0x53, 0xd7, 0xa7, 0x1b, 0x91, 0xcb,
	0x9b, 0xfe, 0x9c, 0x51, 0xb4, 0x6f, 0xc9, 0x91, 0x7b, 0xb5, 0xf3, 0xce, 0xa3, 0x9e, 0x20, 0x87,
	0xd0, 0xd6, 0x2c, 0x53, 0x14, 0x26, 0xad, 0xe9, 0x60, 0x3e, 0xb9, 0xd3, 0x9f, 0xb7, 0x37, 0x8c,
	0x59, 0xa6, 0x4e, 0x0a, 0x2d, 0xeb, 0xc8, 0xd2, 0x64, 0x1b, 0x3a, 0x28, 0xa5, 0x90, 0x74, 0x60,
	0x7b, 0x72, 0x07, 0x72, 0x08, 0xdd, 0x44, 0x22, 0xd3, 0x98, 0xd2, 0x4d, 0x5b, 0x78, 0x1c, 0xba,
	0x91, 0x0a, 0x57, 0x23, 0x15, 0xc6, 0xab, 0x99, 0x8b, 0x56, 0x28, 0x79, 0x0b, 0x3d, 0x89, 0x09,
	0xf2, 0x1b, 0x4c, 0xe9, 0xf0, 0x41, 0xd9, 0x9a, 0x35, 0xd5, 0x94, 0x66, 0xd2, 0x54, 0xdb, 0x7a,
	0xb8, 0x9a, 0x47, 0xc9, 0x11, 0xf4, 0x13, 0xb1, 0x2c, 0x73, 0x34, 0xba, 0xd1, 0x83, 0xba, 0x3f,
	0x30, 0xf9, 0x08, 0x43, 0xfc, 0x89, 0x49, 0x65, 0x56, 0xea, 0xd2, 0xec, 0x0e, 0x7d, 0x62, 0xe5,
	0x3b, 0xf7, 0xe4, 0x9f, 0xfd, 0xe2, 0x45, 0x9b, 0x6b, 0x81, 0xb9, 0x71, 0x7c, 0x06, 0xfd, 0xb5,
	0x91, 0x64, 0x04, 0xad, 0x6b, 0xac, 0xfd, 0xc8, 0x9a, 0x9f, 0x64, 0x0f, 0x3a, 0x37, 0x2c, 0xaf,
	0xd0, 0xce, 0xeb, 0x60, 0xbe, 0x7d, 0xef, 0xde, 0x4f, 0x45, 0x1d, 0x39, 0xe4, 0x43, 0xf3, 0xa8,
	0x71, 0x1c, 0x98, 0xbf, 0x4e, 0x5d, 0xef, 0xbd, 0x86, 0xb6, 0x99, 0x43, 0x02, 0x10, 0xc4, 0x27,
	0x5f, 0xcf, 0x4f, 0xe2, 0xd1, 0x06, 0xe9, 0x41, 0x7b, 0x71, 0x7e, 0x76, 0x31, 0x6a, 0x90, 0x2e,
	0xb4, 0x16, 0x8b, 0xd3, 0x51, 0xf3, 0xf8, 0xfd, 0xb7, 0x77, 0xff, 0x5e, 0xb1, 0xa5, 0x48, 0x31,
	0x57, 0xb7, 0xbe, 0x0f, 0xab, 0x31, 0xb8, 0x0a, 0x6c, 0xec, 0xe0, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x9a, 0xa0, 0x62, 0xde, 0xa7, 0x04, 0x00, 0x00,
}
