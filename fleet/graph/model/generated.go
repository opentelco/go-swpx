// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type ChangeConnection struct {
	Changes  []*DeviceChange `json:"changes,omitempty"`
	PageInfo *PageInfo       `json:"pageInfo,omitempty"`
}

type Device struct {
	ID                   string            `json:"id"`
	Hostname             *string           `json:"hostname,omitempty"`
	Domain               *string           `json:"domain,omitempty"`
	ManagementIP         *string           `json:"managementIp,omitempty"`
	SerialNumber         *string           `json:"serialNumber,omitempty"`
	Model                *string           `json:"model,omitempty"`
	Version              *string           `json:"version,omitempty"`
	NetworkRegion        *string           `json:"networkRegion,omitempty"`
	PollerResourcePlugin *string           `json:"pollerResourcePlugin,omitempty"`
	PollerProviderPlugin *string           `json:"pollerProviderPlugin,omitempty"`
	State                DeviceState       `json:"state"`
	Status               DeviceStatus      `json:"status"`
	Schedules            []*DeviceSchedule `json:"schedules,omitempty"`
	Events               *EventConnection  `json:"events"`
	Changes              *ChangeConnection `json:"changes"`
	LastSeen             *time.Time        `json:"lastSeen,omitempty"`
	CreatedAt            time.Time         `json:"createdAt"`
	UpdatedAt            time.Time         `json:"updatedAt"`
	LastReboot           *time.Time        `json:"lastReboot,omitempty"`
}

type DeviceChange struct {
	ID        string    `json:"id"`
	Field     string    `json:"field"`
	OldValue  string    `json:"oldValue"`
	NewValue  string    `json:"newValue"`
	CreatedAt time.Time `json:"createdAt"`
}

type DeviceEvent struct {
	ID        string             `json:"id"`
	Type      DeviceEventType    `json:"type"`
	Message   string             `json:"message"`
	Action    DeviceEventAction  `json:"action"`
	Outcome   DeviceEventOutcome `json:"outcome"`
	CreatedAt time.Time          `json:"createdAt"`
}

type DeviceSchedule struct {
	Interval    time.Duration `json:"interval"`
	Type        ScheduleType  `json:"type"`
	LastRun     *time.Time    `json:"lastRun,omitempty"`
	Active      *bool         `json:"active,omitempty"`
	FailedCount *int          `json:"failedCount,omitempty"`
}

type EventConnection struct {
	Events   []*DeviceEvent `json:"events,omitempty"`
	PageInfo *PageInfo      `json:"pageInfo,omitempty"`
}

type ListDeviceResponse struct {
	Devices  []*Device `json:"devices,omitempty"`
	PageInfo *PageInfo `json:"pageInfo,omitempty"`
}

type ListDevicesParams struct {
	Search       *string `json:"search,omitempty"`
	Hostname     *string `json:"hostname,omitempty"`
	ManagementIP *string `json:"managementIp,omitempty"`
	Limit        *int    `json:"limit,omitempty"`
	Offset       *int    `json:"offset,omitempty"`
}

type ListNotificationsParams struct {
	ResourceIds []string                 `json:"resource_ids,omitempty"`
	Filter      []ListNotificationFilter `json:"filter,omitempty"`
	Limit       *int                     `json:"limit,omitempty"`
	Offset      *int                     `json:"offset,omitempty"`
}

type ListNotificationsResponse struct {
	Notifications []*Notification `json:"notifications,omitempty"`
	PageInfo      *PageInfo       `json:"pageInfo"`
}

type MarkNotificationsAsReadParams struct {
	Ids []*string `json:"ids,omitempty"`
}

type Notification struct {
	ID           string                   `json:"id"`
	Title        string                   `json:"title"`
	ResourceID   string                   `json:"resource_id"`
	ResourceType NotificationResourceType `json:"resource_type"`
	Timestamp    time.Time                `json:"timestamp"`
	Message      string                   `json:"message"`
	Read         bool                     `json:"read"`
}

type PageInfo struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
	Total  *int `json:"total,omitempty"`
	Count  *int `json:"count,omitempty"`
}

type DeviceEventAction string

const (
	DeviceEventActionNotSet        DeviceEventAction = "NOT_SET"
	DeviceEventActionCreate        DeviceEventAction = "CREATE"
	DeviceEventActionUpdate        DeviceEventAction = "UPDATE"
	DeviceEventActionCollectConfig DeviceEventAction = "COLLECT_CONFIG"
	DeviceEventActionCollectDevice DeviceEventAction = "COLLECT_DEVICE"
)

var AllDeviceEventAction = []DeviceEventAction{
	DeviceEventActionNotSet,
	DeviceEventActionCreate,
	DeviceEventActionUpdate,
	DeviceEventActionCollectConfig,
	DeviceEventActionCollectDevice,
}

func (e DeviceEventAction) IsValid() bool {
	switch e {
	case DeviceEventActionNotSet, DeviceEventActionCreate, DeviceEventActionUpdate, DeviceEventActionCollectConfig, DeviceEventActionCollectDevice:
		return true
	}
	return false
}

func (e DeviceEventAction) String() string {
	return string(e)
}

func (e *DeviceEventAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceEventAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceEventAction", str)
	}
	return nil
}

func (e DeviceEventAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceEventOutcome string

const (
	DeviceEventOutcomeNotSet  DeviceEventOutcome = "NOT_SET"
	DeviceEventOutcomeSuccess DeviceEventOutcome = "SUCCESS"
	DeviceEventOutcomeFailure DeviceEventOutcome = "FAILURE"
)

var AllDeviceEventOutcome = []DeviceEventOutcome{
	DeviceEventOutcomeNotSet,
	DeviceEventOutcomeSuccess,
	DeviceEventOutcomeFailure,
}

func (e DeviceEventOutcome) IsValid() bool {
	switch e {
	case DeviceEventOutcomeNotSet, DeviceEventOutcomeSuccess, DeviceEventOutcomeFailure:
		return true
	}
	return false
}

func (e DeviceEventOutcome) String() string {
	return string(e)
}

func (e *DeviceEventOutcome) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceEventOutcome(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceEventOutcome", str)
	}
	return nil
}

func (e DeviceEventOutcome) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceEventType string

const (
	DeviceEventTypeNotSet        DeviceEventType = "NOT_SET"
	DeviceEventTypeConfiguration DeviceEventType = "CONFIGURATION"
	DeviceEventTypeDevice        DeviceEventType = "DEVICE"
)

var AllDeviceEventType = []DeviceEventType{
	DeviceEventTypeNotSet,
	DeviceEventTypeConfiguration,
	DeviceEventTypeDevice,
}

func (e DeviceEventType) IsValid() bool {
	switch e {
	case DeviceEventTypeNotSet, DeviceEventTypeConfiguration, DeviceEventTypeDevice:
		return true
	}
	return false
}

func (e DeviceEventType) String() string {
	return string(e)
}

func (e *DeviceEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceEventType", str)
	}
	return nil
}

func (e DeviceEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceState string

const (
	DeviceStateNotSet   DeviceState = "NOT_SET"
	DeviceStateNew      DeviceState = "NEW"
	DeviceStateActive   DeviceState = "ACTIVE"
	DeviceStateInactive DeviceState = "INACTIVE"
	DeviceStateRouge    DeviceState = "ROUGE"
)

var AllDeviceState = []DeviceState{
	DeviceStateNotSet,
	DeviceStateNew,
	DeviceStateActive,
	DeviceStateInactive,
	DeviceStateRouge,
}

func (e DeviceState) IsValid() bool {
	switch e {
	case DeviceStateNotSet, DeviceStateNew, DeviceStateActive, DeviceStateInactive, DeviceStateRouge:
		return true
	}
	return false
}

func (e DeviceState) String() string {
	return string(e)
}

func (e *DeviceState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceState", str)
	}
	return nil
}

func (e DeviceState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeviceStatus string

const (
	DeviceStatusNotSet      DeviceStatus = "NOT_SET"
	DeviceStatusNew         DeviceStatus = "NEW"
	DeviceStatusUnreachable DeviceStatus = "UNREACHABLE"
	DeviceStatusReachable   DeviceStatus = "REACHABLE"
)

var AllDeviceStatus = []DeviceStatus{
	DeviceStatusNotSet,
	DeviceStatusNew,
	DeviceStatusUnreachable,
	DeviceStatusReachable,
}

func (e DeviceStatus) IsValid() bool {
	switch e {
	case DeviceStatusNotSet, DeviceStatusNew, DeviceStatusUnreachable, DeviceStatusReachable:
		return true
	}
	return false
}

func (e DeviceStatus) String() string {
	return string(e)
}

func (e *DeviceStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeviceStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeviceStatus", str)
	}
	return nil
}

func (e DeviceStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ListNotificationFilter string

const (
	ListNotificationFilterResourceTypeDevice ListNotificationFilter = "RESOURCE_TYPE_DEVICE"
	ListNotificationFilterResourceTypeConfig ListNotificationFilter = "RESOURCE_TYPE_CONFIG"
	ListNotificationFilterIncludeRead        ListNotificationFilter = "INCLUDE_READ"
)

var AllListNotificationFilter = []ListNotificationFilter{
	ListNotificationFilterResourceTypeDevice,
	ListNotificationFilterResourceTypeConfig,
	ListNotificationFilterIncludeRead,
}

func (e ListNotificationFilter) IsValid() bool {
	switch e {
	case ListNotificationFilterResourceTypeDevice, ListNotificationFilterResourceTypeConfig, ListNotificationFilterIncludeRead:
		return true
	}
	return false
}

func (e ListNotificationFilter) String() string {
	return string(e)
}

func (e *ListNotificationFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ListNotificationFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ListNotificationFilter", str)
	}
	return nil
}

func (e ListNotificationFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NotificationResourceType string

const (
	NotificationResourceTypeUnspecified NotificationResourceType = "UNSPECIFIED"
	NotificationResourceTypeDevice      NotificationResourceType = "DEVICE"
	NotificationResourceTypeConfig      NotificationResourceType = "CONFIG"
)

var AllNotificationResourceType = []NotificationResourceType{
	NotificationResourceTypeUnspecified,
	NotificationResourceTypeDevice,
	NotificationResourceTypeConfig,
}

func (e NotificationResourceType) IsValid() bool {
	switch e {
	case NotificationResourceTypeUnspecified, NotificationResourceTypeDevice, NotificationResourceTypeConfig:
		return true
	}
	return false
}

func (e NotificationResourceType) String() string {
	return string(e)
}

func (e *NotificationResourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationResourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationResourceType", str)
	}
	return nil
}

func (e NotificationResourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScheduleType string

const (
	ScheduleTypeNotSet ScheduleType = "NOT_SET"
	ScheduleTypeDevice ScheduleType = "DEVICE"
	ScheduleTypeConfig ScheduleType = "CONFIG"
)

var AllScheduleType = []ScheduleType{
	ScheduleTypeNotSet,
	ScheduleTypeDevice,
	ScheduleTypeConfig,
}

func (e ScheduleType) IsValid() bool {
	switch e {
	case ScheduleTypeNotSet, ScheduleTypeDevice, ScheduleTypeConfig:
		return true
	}
	return false
}

func (e ScheduleType) String() string {
	return string(e)
}

func (e *ScheduleType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScheduleType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScheduleType", str)
	}
	return nil
}

func (e ScheduleType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
