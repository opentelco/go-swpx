package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"git.liero.se/opentelco/go-swpx/fleet/graph/mappers"
	"git.liero.se/opentelco/go-swpx/fleet/graph/model"
	"git.liero.se/opentelco/go-swpx/fleet/internal"
	"git.liero.se/opentelco/go-swpx/proto/go/fleet/configurationpb"
	"git.liero.se/opentelco/go-swpx/proto/go/fleet/devicepb"
	"git.liero.se/opentelco/go-swpx/proto/go/fleet/stanzapb"
)

// Events is the resolver for the events field.
func (r *deviceResolver) Events(ctx context.Context, obj *model.Device, limit *int, offset *int) (*model.EventConnection, error) {
	res, err := r.devices.ListEvents(ctx, &devicepb.ListEventsParameters{
		DeviceId: obj.ID,
		Limit:    internal.PointerIntToPointerInt64(limit),
		Offset:   internal.PointerIntToPointerInt64(offset),
	})
	if err != nil {
		return nil, err
	}
	result := &model.EventConnection{
		Events:   mappers.DeviceEvents(res.Events).ToGQL(),
		PageInfo: mappers.PageInfo{res.PageInfo}.ToGQL(),
	}
	return result, nil
}

// Changes is the resolver for the changes field.
func (r *deviceResolver) Changes(ctx context.Context, obj *model.Device, limit *int, offset *int) (*model.ChangeConnection, error) {
	res, err := r.devices.ListChanges(ctx, &devicepb.ListChangesParameters{
		DeviceId: obj.ID,
		Limit:    internal.PointerIntToPointerInt64(limit),
		Offset:   internal.PointerIntToPointerInt64(offset),
	})
	if err != nil {
		return nil, err
	}
	result := &model.ChangeConnection{
		Changes:  mappers.DeviceChanges(res.Changes).ToGQL(),
		PageInfo: mappers.PageInfo{res.PageInfo}.ToGQL(),
	}
	return result, nil
}

// Configurations is the resolver for the configurations field.
func (r *deviceResolver) Configurations(ctx context.Context, obj *model.Device, limit *int, offset *int) (*model.ConfigurationConnection, error) {
	res, err := r.configurations.List(ctx, &configurationpb.ListParameters{
		DeviceId: &obj.ID,
		Limit:    internal.PointerIntToPointerInt64(limit),
		Offset:   internal.PointerIntToPointerInt64(offset),
	})
	if err != nil {
		return nil, err
	}
	return &model.ConfigurationConnection{
		Configurations: mappers.Configurations(res.Configurations).ToGQL(),
		PageInfo:       mappers.PageInfo{res.PageInfo}.ToGQL(),
	}, nil
}

// Stanzas is the resolver for the stanzas field.
func (r *deviceResolver) Stanzas(ctx context.Context, obj *model.Device, limit *int, offset *int) (*model.StanzaConnection, error) {
	res, err := r.stanzas.List(ctx, &stanzapb.ListRequest{
		DeviceId: &obj.ID,
		Limit:    internal.PointerIntToPointerInt64(limit),
		Offset:   internal.PointerIntToPointerInt64(offset),
	})
	if err != nil {
		return nil, err
	}
	return &model.StanzaConnection{
		Stanzas:  mappers.Stanzas(res.Stanzas).ToGQL(),
		PageInfo: mappers.PageInfo{res.PageInfo}.ToGQL(),
	}, nil
}

// Device returns DeviceResolver implementation.
func (r *Resolver) Device() DeviceResolver { return &deviceResolver{r} }

type deviceResolver struct{ *Resolver }
