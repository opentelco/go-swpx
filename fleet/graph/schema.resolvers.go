package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"

	"git.liero.se/opentelco/go-swpx/fleet/graph/mappers"
	"git.liero.se/opentelco/go-swpx/fleet/graph/model"
	"git.liero.se/opentelco/go-swpx/proto/go/fleet/configurationpb"
	"git.liero.se/opentelco/go-swpx/proto/go/fleet/devicepb"
	"git.liero.se/opentelco/go-swpx/proto/go/fleet/notificationpb"
)

// MarkNotificationsAsRead is the resolver for the markNotificationsAsRead field.
func (r *mutationResolver) MarkNotificationsAsRead(ctx context.Context, input model.MarkNotificationsAsReadParams) ([]*model.Notification, error) {
	res, err := r.notifications.MarkAsRead(ctx, input.ToProto())
	if err != nil {
		return nil, err
	}
	return mappers.Notifications(res.Notifications).ToGQL(), nil
}

// Device is the resolver for the device field.
func (r *queryResolver) Device(ctx context.Context, id string) (*model.Device, error) {
	dev, err := r.devices.GetByID(ctx, &devicepb.GetByIDParameters{Id: id})
	if err != nil {
		return nil, err
	}
	return mappers.ToDevice(dev).ToGQL(), nil
}

// Devices is the resolver for the devices field.
func (r *queryResolver) Devices(ctx context.Context, params *model.ListDevicesParams) (*model.ListDeviceResponse, error) {
	res, err := r.devices.List(ctx, params.ToProto())
	if err != nil {
		return nil, err
	}

	return mappers.ToDeviceListResponse(res).ToGQL(), nil
}

// DeviceChanges is the resolver for the deviceChanges field.
func (r *queryResolver) DeviceChanges(ctx context.Context, params *model.ListDeviceChangesParams) (*model.ListDeviceChangesResponse, error) {
	res, err := r.devices.ListChanges(ctx, params.ToProto())
	if err != nil {
		return nil, err
	}
	return mappers.ToListDeviceChangesResponse(res).ToGQL(), nil
}

// DeviceEvents is the resolver for the deviceEvents field.
func (r *queryResolver) DeviceEvents(ctx context.Context, params *model.ListDeviceEventsParams) (*model.ListDeviceEventsResponse, error) {
	res, err := r.devices.ListEvents(ctx, params.ToProto())
	if err != nil {
		return nil, err
	}
	return mappers.ToListDeviceEventsResponse(res).ToGQL(), nil
}

// Notifications is the resolver for the notifications field.
func (r *queryResolver) Notifications(ctx context.Context, params *model.ListNotificationsParams) (*model.ListNotificationsResponse, error) {
	resp, err := r.notifications.List(ctx, params.ToProto())
	if err != nil {
		return nil, err
	}
	return mappers.ToListNotificationResponse(resp).ToGQL(), nil
}

// Notification is the resolver for the notification field.
func (r *queryResolver) Notification(ctx context.Context, id string) (*model.Notification, error) {
	res, err := r.notifications.GetByID(ctx, &notificationpb.GetByIDRequest{Id: id})
	if err != nil {
		return nil, err
	}
	return mappers.Notification{res}.ToGQL(), nil
}

// Configurations is the resolver for the configurations field.
func (r *queryResolver) Configurations(ctx context.Context, params *model.ListConfigurationsParams) (*model.ListConfigurationsResponse, error) {
	res, err := r.configurations.List(ctx, params.ToProto())
	if err != nil {
		return nil, err
	}
	return mappers.ToListConfigurationsResponse(res).ToGQL(), nil
}

// Configuration is the resolver for the configuration field.
func (r *queryResolver) Configuration(ctx context.Context, id string) (*model.Configuration, error) {
	res, err := r.configurations.GetByID(ctx, &configurationpb.GetByIDParameters{Id: id})
	if err != nil {
		return nil, err
	}
	return mappers.Configuration{res}.ToGQL(), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
